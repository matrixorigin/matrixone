// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// cast.go is generated by cast.template and overloadGenerate.go, do not edit it directly.

package operator

import (
	"github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/typecast"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

// cast function's evaluation for arguments: [Int8,Int8]
func FdsCastInt8ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Int16]
func FdsCastInt8ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToInt16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Int32]
func FdsCastInt8ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToInt32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Int64]
func FdsCastInt8ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToInt64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Uint8]
func FdsCastInt8ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToUint8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Uint16]
func FdsCastInt8ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToUint16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Uint32]
func FdsCastInt8ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToUint32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Uint64]
func FdsCastInt8ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToUint64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Float32]
func FdsCastInt8ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToFloat32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Float64]
func FdsCastInt8ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToFloat64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Int8]
func FdsCastInt16ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToInt8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Int16]
func FdsCastInt16ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Int32]
func FdsCastInt16ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToInt32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Int64]
func FdsCastInt16ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToInt64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Uint8]
func FdsCastInt16ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToUint8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Uint16]
func FdsCastInt16ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToUint16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Uint32]
func FdsCastInt16ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToUint32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Uint64]
func FdsCastInt16ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToUint64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Float32]
func FdsCastInt16ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToFloat32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Float64]
func FdsCastInt16ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToFloat64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Int8]
func FdsCastInt32ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToInt8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Int16]
func FdsCastInt32ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToInt16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Int32]
func FdsCastInt32ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Int64]
func FdsCastInt32ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToInt64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Uint8]
func FdsCastInt32ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToUint8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Uint16]
func FdsCastInt32ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToUint16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Uint32]
func FdsCastInt32ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToUint32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Uint64]
func FdsCastInt32ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToUint64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil

}

// cast function's evaluation for arguments: [Int32,Float32]
func FdsCastInt32ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToFloat32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Float64]
func FdsCastInt32ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToFloat64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Int8]
func FdsCastInt64ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToInt8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Int16]
func FdsCastInt64ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToInt16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Int32]
func FdsCastInt64ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToInt32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Int64]
func FdsCastInt64ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Uint8]
func FdsCastInt64ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToUint8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Uint16]
func FdsCastInt64ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToUint16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Uint32]
func FdsCastInt64ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToUint32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Uint64]
func FdsCastInt64ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToUint64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Float32]
func FdsCastInt64ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToFloat32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Float64]
func FdsCastInt64ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToFloat64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Int8]
func FdsCastUint8ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint8ToInt8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Int16]
func FdsCastUint8ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint8ToInt16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Int32]
func FdsCastUint8ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint8ToInt32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Int64]
func FdsCastUint8ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint8ToInt64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Uint8]
func FdsCastUint8ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Uint16]
func FdsCastUint8ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint8ToUint16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Uint32]
func FdsCastUint8ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint8ToUint32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Uint64]
func FdsCastUint8ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint8ToUint64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Float32]
func FdsCastUint8ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint8ToFloat32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Float64]
func FdsCastUint8ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint8)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint8ToFloat64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Int8]
func FdsCastUint16ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint16ToInt8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Int16]
func FdsCastUint16ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint16ToInt16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Int32]
func FdsCastUint16ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint16ToInt32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Int64]
func FdsCastUint16ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint16ToInt64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Uint8]
func FdsCastUint16ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint16ToUint8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Uint16]
func FdsCastUint16ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Uint32]
func FdsCastUint16ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint16ToUint32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Uint64]
func FdsCastUint16ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint16ToUint64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Float32]
func FdsCastUint16ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint16ToFloat32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Float64]
func FdsCastUint16ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint16)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint16ToFloat64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Int8]
func FdsCastUint32ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint32ToInt8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Int16]
func FdsCastUint32ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint32ToInt16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Int32]
func FdsCastUint32ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint32ToInt32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Int64]
func FdsCastUint32ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint32ToInt64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Uint8]
func FdsCastUint32ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint32ToUint8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Uint16]
func FdsCastUint32ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint32ToUint16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Uint32]
func FdsCastUint32ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Uint64]
func FdsCastUint32ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint32ToUint64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Float32]
func FdsCastUint32ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint32ToFloat32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Float64]
func FdsCastUint32ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint32ToFloat64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Int8]
func FdsCastUint64ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint64ToInt8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Int16]
func FdsCastUint64ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint64ToInt16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Int32]
func FdsCastUint64ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint64ToInt32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Int64]
func FdsCastUint64ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint64ToInt64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Uint8]
func FdsCastUint64ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint64ToUint8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Uint16]
func FdsCastUint64ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint64ToUint16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Uint32]
func FdsCastUint64ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint64ToUint32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Uint64]
func FdsCastUint64ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Float32]
func FdsCastUint64ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint64ToFloat32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Float64]
func FdsCastUint64ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]uint64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Uint64ToFloat64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Int8]
func FdsCastFloat32ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float32ToInt8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Int16]
func FdsCastFloat32ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float32ToInt16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Int32]
func FdsCastFloat32ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float32ToInt32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Int64]
func FdsCastFloat32ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float32ToInt64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Uint8]
func FdsCastFloat32ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float32ToUint8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Uint16]
func FdsCastFloat32ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float32ToUint16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Uint32]
func FdsCastFloat32ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float32ToUint32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Uint64]
func FdsCastFloat32ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float32ToUint64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Float32]
func FdsCastFloat32ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Float64]
func FdsCastFloat32ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]float32)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float32ToFloat64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Int8]
func FdsCastFloat64ToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float64ToInt8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Int16]
func FdsCastFloat64ToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float64ToInt16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Int32]
func FdsCastFloat64ToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float64ToInt32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Int64]
func FdsCastFloat64ToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float64ToInt64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Uint8]
func FdsCastFloat64ToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float64ToUint8(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Uint16]
func FdsCastFloat64ToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float64ToUint16(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Uint32]
func FdsCastFloat64ToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float64ToUint32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Uint64]
func FdsCastFloat64ToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float64ToUint64(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Float32]
func FdsCastFloat64ToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Float64ToFloat32(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Float64]
func FdsCastFloat64ToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]float64)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Char]
func FdsCastCharToChar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lvs := lv.Col.(*types.Bytes)
	col := &types.Bytes{
		Data:    make([]byte, len(lvs.Data)),
		Offsets: make([]uint32, len(lvs.Offsets)),
		Lengths: make([]uint32, len(lvs.Lengths)),
	}
	copy(col.Data, lvs.Data)
	copy(col.Offsets, lvs.Offsets)
	copy(col.Lengths, lvs.Lengths)
	if err := proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Varchar]
func FdsCastVarcharToVarchar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lvs := lv.Col.(*types.Bytes)
	col := &types.Bytes{
		Data:    make([]byte, len(lvs.Data)),
		Offsets: make([]uint32, len(lvs.Offsets)),
		Lengths: make([]uint32, len(lvs.Lengths)),
	}
	copy(col.Data, lvs.Data)
	copy(col.Offsets, lvs.Offsets)
	copy(col.Lengths, lvs.Lengths)
	if err := proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Date,Date]
func FdsCastDateToDate(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	lvs := lv.Col.([]types.Date)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDateSlice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Datetime,Datetime]
func FdsCastDatetimeToDatetime(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]types.Datetime)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDatetimeSlice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Timestamp,Timestamp]
func FdsCastTimestampToTimestamp(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]types.Timestamp)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeTimestampSlice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Decimal64,Decimal64]
func FdsCastDecimal64ToDecimal64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	resultTyp := lv.Typ
	lvs := lv.Col.([]types.Decimal64)
	vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDecimal64Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	vec.Typ = resultTyp
	return vec, nil
}

// cast function's evaluation for arguments: [Decimal128,Decimal128]
func FdsCastDecimal128ToDecimal128(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	resultTyp := lv.Typ
	lvs := lv.Col.([]types.Decimal128)
	vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDecimal128Slice(vec.Data)
	rs = rs[:len(lvs)]
	copy(rs, lvs)
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	vec.Typ = resultTyp
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Int8]
func FdsCastCharToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToInt8(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Int16]
func FdsCastCharToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToInt16(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Int32]
func FdsCastCharToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToInt32(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Int64]
func FdsCastCharToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToInt64(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Uint8]
func FdsCastCharToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToUint8(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Uint16]
func FdsCastCharToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToUint16(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Uint32]
func FdsCastCharToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToUint32(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Uint64]
func FdsCastCharToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToUint64(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Float32]
func FdsCastCharToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToFloat32(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Float64]
func FdsCastCharToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToFloat64(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Int8]
func FdsCastVarcharToInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToInt8(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Int16]
func FdsCastVarcharToInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToInt16(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Int32]
func FdsCastVarcharToInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToInt32(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Int64]
func FdsCastVarcharToInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToInt64(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Uint8]
func FdsCastVarcharToUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 1
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToUint8(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Uint16]
func FdsCastVarcharToUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 2
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToUint16(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Uint32]
func FdsCastVarcharToUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToUint32(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Uint64]
func FdsCastVarcharToUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToUint64(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Float32]
func FdsCastVarcharToFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 4
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToFloat32(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Float64]
func FdsCastVarcharToFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	col := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rtl)*int64(len(col.Offsets)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(col.Offsets)]
	if _, err := typecast.BytesToFloat64(col, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Char]
func FdsCastInt8ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]int8)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Int8ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Varchar]
func FdsCastInt8ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]int8)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Int8ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Char]
func FdsCastInt16ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]

	var err error

	vs := lv.Col.([]int16)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Int16ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil

}

// cast function's evaluation for arguments: [Int16,Varchar]
func FdsCastInt16ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]int16)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Int16ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Char]
func FdsCastInt32ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]

	var err error

	vs := lv.Col.([]int32)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Int32ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Varchar]
func FdsCastInt32ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]int32)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Int32ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Char]
func FdsCastInt64ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]int64)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Int64ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Varchar]
func FdsCastInt64ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]int64)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Int64ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Char]
func FdsCastUint8ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]

	var err error

	vs := lv.Col.([]uint8)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Uint8ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint8,Varchar]
func FdsCastUint8ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]uint8)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Uint8ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Char]
func FdsCastUint16ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]uint16)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Uint16ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint16,Varchar]
func FdsCastUint16ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]uint16)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Uint16ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Char]
func FdsCastUint32ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]

	var err error

	vs := lv.Col.([]uint32)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Uint32ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint32,Varchar]
func FdsCastUint32ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]uint32)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Uint32ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Char]
func FdsCastUint64ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]uint64)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Uint64ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Uint64,Varchar]
func FdsCastUint64ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]

	var err error

	vs := lv.Col.([]uint64)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Uint64ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Char]
func FdsCastFloat32ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]float32)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Float32ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Float32,Varchar]
func FdsCastFloat32ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error
	vs := lv.Col.([]float32)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Float32ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Char]
func FdsCastFloat64ToChar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]float64)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Float64ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Float64,Varchar]
func FdsCastFloat64ToVarchar(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	var err error

	vs := lv.Col.([]float64)
	col := &types.Bytes{
		Data:    make([]byte, 0, len(vs)),
		Offsets: make([]uint32, 0, len(vs)),
		Lengths: make([]uint32, 0, len(vs)),
	}
	if col, err = typecast.Float64ToBytes(vs, col); err != nil {
		return nil, err
	}
	if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Date]
func FdsCastVarcharToDate(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	vs := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rv.Typ.Oid.FixedLength()*len(vs.Lengths)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDateSlice(vec.Data)
	rs = rs[:len(vs.Lengths)]
	for i := range vs.Lengths {
		if nulls.Contains(lv.Nsp, uint64(i)) {
			continue
		}
		varcharValue := vs.Get(int64(i))
		data, err2 := types.ParseDate(string(varcharValue))
		if err2 != nil {
			return nil, err2
		}
		rs[i] = data
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Datetime]
func FdsCastVarcharToDatetime(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	vs := lv.Col.(*types.Bytes)
	vec, err := process.Get(proc, int64(rv.Typ.Oid.FixedLength()*len(vs.Lengths)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDatetimeSlice(vec.Data)
	rs = rs[:len(vs.Lengths)]
	for i := range vs.Lengths {
		if nulls.Contains(lv.Nsp, uint64(i)) {
			continue
		}
		varcharValue := vs.Get(int64(i))
		data, err2 := types.ParseDatetime(string(varcharValue))
		if err2 != nil {
			return nil, err2
		}
		rs[i] = data
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Timestamp]
func FdsCastVarcharToTimestamp(vecs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vecs[0]
	rv := vecs[1]
	vs := lv.Col.(*types.Bytes)
	col := make([]types.Timestamp, 0, len(vs.Lengths))
	for i := range vs.Lengths {
		varcharValue := vs.Get(int64(i))
		data, err := types.ParseTimestamp(string(varcharValue), 6) // default timestamp precision is 6
		if err != nil {
			return nil, err
		}
		col = append(col, data)
	}
	vec := vector.New(rv.Typ)
	vec.Col = col
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Int8,Decimal128]
func FdsCastInt8ToDecimal128(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	resultScale := int32(0)
	resultTyp := types.Type{Oid: types.T_decimal128, Size: 16, Width: 38, Scale: resultScale}
	lvs := lv.Col.([]int8)
	vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDecimal128Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int8ToDecimal128(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int16,Decimal128]
func FdsCastInt16ToDecimal128(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	resultScale := int32(0)
	resultTyp := types.Type{Oid: types.T_decimal128, Size: 16, Width: 38, Scale: resultScale}
	lvs := lv.Col.([]int16)
	vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDecimal128Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int16ToDecimal128(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int32,Decimal128]
func FdsCastInt32ToDecimal128(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	resultScale := int32(0)
	resultTyp := types.Type{Oid: types.T_decimal128, Size: 16, Width: 38, Scale: resultScale}
	lvs := lv.Col.([]int32)
	vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDecimal128Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int32ToDecimal128(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Int64,Decimal128]
func FdsCastInt64ToDecimal128(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	resultScale := int32(0)
	resultTyp := types.Type{Oid: types.T_decimal128, Size: 16, Width: 38, Scale: resultScale}
	lvs := lv.Col.([]int64)
	vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDecimal128Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Int64ToDecimal128(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Timestamp,Datetime]
func FdsCastTimestampToDatetime(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	rtl := 8
	lvs := lv.Col.([]types.Timestamp)
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDatetimeSlice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.TimestampToDatetime(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Decimal64,Decimal128]
func FdsCastDecimal64ToDecimal128(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	lvScale := lv.Typ.Scale
	resultScale := lvScale
	resultTyp := types.Type{Oid: types.T_decimal128, Size: 16, Width: 38, Scale: resultScale}
	lvs := lv.Col.([]types.Decimal64)
	vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeDecimal128Slice(vec.Data)
	rs = rs[:len(lvs)]
	if _, err := typecast.Decimal64ToDecimal128(lvs, rs); err != nil {
		process.Put(proc, vec)
		return nil, err
	}
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, rs)
	return vec, nil
}

// cast function's evaluation for arguments: [Char,Varchar]
func FdsCastCharToVarchar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lvs := lv.Col.(*types.Bytes)
	col := &types.Bytes{
		Data:    make([]byte, len(lvs.Data)),
		Offsets: make([]uint32, len(lvs.Offsets)),
		Lengths: make([]uint32, len(lvs.Lengths)),
	}
	copy(col.Data, lvs.Data)
	copy(col.Offsets, lvs.Offsets)
	copy(col.Lengths, lvs.Lengths)
	if err := proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}

// cast function's evaluation for arguments: [Varchar,Char]
func FdsCastVarcharToChar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lvs := lv.Col.(*types.Bytes)
	col := &types.Bytes{
		Data:    make([]byte, len(lvs.Data)),
		Offsets: make([]uint32, len(lvs.Offsets)),
		Lengths: make([]uint32, len(lvs.Lengths)),
	}
	copy(col.Data, lvs.Data)
	copy(col.Offsets, lvs.Offsets)
	copy(col.Lengths, lvs.Lengths)
	if err := proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
		return nil, err
	}
	vec := vector.New(rv.Typ)
	vec.Data = col.Data
	nulls.Set(vec.Nsp, lv.Nsp)
	vector.SetCol(vec, col)
	return vec, nil
}
