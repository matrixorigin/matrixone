// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ge.go is generated by ge.template and overloadGenerate.go, do not edit it directly.

package operator

import (
	"github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/ge"
	"github.com/matrixorigin/matrixone/pkg/vectorize/le"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
	"unsafe"

	roaring "github.com/RoaringBitmap/roaring/roaring64"
)

// great equal operator's evaluation for arguments: [int8]
func FdsOpGreatEqualInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int8), rv.Col.([]int8)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Int8GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Int8GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Int8LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Int8LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int8GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int8GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int8GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Int8Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [int16]
func FdsOpGreatEqualInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int16), rv.Col.([]int16)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Int16GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Int16GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Int16LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Int16LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int16GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int16GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int16GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Int16Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [int32]
func FdsOpGreatEqualInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int32), rv.Col.([]int32)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Int32GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Int32GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Int32LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Int32LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int32GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int32GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int32GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Int32Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [int64]
func FdsOpGreatEqualInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int64), rv.Col.([]int64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Int64GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Int64GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Int64LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Int64LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int64GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int64GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int64GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Int64Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [uint8]
func FdsOpGreatEqualUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint8), rv.Col.([]uint8)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Uint8GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Uint8GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Uint8LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Uint8LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint8GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint8GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint8GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Uint8Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [uint16]
func FdsOpGreatEqualUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint16), rv.Col.([]uint16)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Uint16GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Uint16GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Uint16LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Uint16LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint16GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint16GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint16GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Uint16Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [uint32]
func FdsOpGreatEqualUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint32), rv.Col.([]uint32)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Uint32GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Uint32GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Uint32LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Uint32LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint32GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint32GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint32GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Uint32Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [uint64]
func FdsOpGreatEqualUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint64), rv.Col.([]uint64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Uint64GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Uint64GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Uint64LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Uint64LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint64GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint64GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Uint64GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Uint64Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [float32]
func FdsOpGreatEqualFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float32), rv.Col.([]float32)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Float32GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Float32GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Float32LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Float32LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Float32GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Float32GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Float32GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Float32Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [float64]
func FdsOpGreatEqualFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float64), rv.Col.([]float64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Float64GeNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Float64GeScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Float64LeNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Float64LeScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Float64GeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Float64GeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Float64GeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Float64Ge(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [varchar]
func FdsOpGreatEqualVarchar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.(*types.Bytes), rv.Col.(*types.Bytes)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs.Lengths)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.StrGeNullableScalar(lvs.Data, rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.StrGeScalar(lvs.Data, rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs.Lengths)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs.Lengths)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.StrLeNullableScalar(rvs.Data, lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.StrLeScalar(rvs.Data, lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs.Lengths)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs.Lengths)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.StrGeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.StrGeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.StrGeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.StrGe(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [char]
func FdsOpGreatEqualChar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.(*types.Bytes), rv.Col.(*types.Bytes)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs.Lengths)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.StrGeNullableScalar(lvs.Data, rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.StrGeScalar(lvs.Data, rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs.Lengths)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs.Lengths)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.StrLeNullableScalar(rvs.Data, lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.StrLeScalar(rvs.Data, lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs.Lengths)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs.Lengths)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.StrGeNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.StrGeNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.StrGeNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.StrGe(lvs, rvs, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [datetime]
func FdsOpGreatEqualDatetime(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Datetime), rv.Col.([]types.Datetime)
	rtl := 8
	switch {
	case lc && !rc:
		rvsInInt64 := *(*[]int64)(unsafe.Pointer(&rvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Int64GeNullableScalar(int64(lvs[0]), rvsInInt64, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Int64GeScalar(int64(lvs[0]), rvsInInt64, rs))
		}
		return vec, nil
	case !lc && rc:
		lvsInInt64 := *(*[]int64)(unsafe.Pointer(&lvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Int64LeNullableScalar(int64(rvs[0]), lvsInInt64, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Int64LeScalar(int64(rvs[0]), lvsInInt64, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	rvsInInt64 := *(*[]int64)(unsafe.Pointer(&rvs))
	lvsInInt64 := *(*[]int64)(unsafe.Pointer(&lvs))
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int64GeNullable(lvsInInt64, rvsInInt64, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int64GeNullable(lvsInInt64, rvsInInt64, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int64GeNullable(lvsInInt64, rvsInInt64, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Int64Ge(lvsInInt64, rvsInInt64, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [date]
func FdsOpGreatEqualDate(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Date), rv.Col.([]types.Date)
	rtl := 8
	switch {
	case lc && !rc:
		rvsInInt32 := *(*[]int32)(unsafe.Pointer(&rvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Int32GeNullableScalar(int32(lvs[0]), rvsInInt32, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Int32GeScalar(int32(lvs[0]), rvsInInt32, rs))
		}
		return vec, nil
	case !lc && rc:
		lvsInInt32 := *(*[]int32)(unsafe.Pointer(&lvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Int32LeNullableScalar(int32(rvs[0]), lvsInInt32, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Int32LeScalar(int32(rvs[0]), lvsInInt32, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	rvsInInt32 := *(*[]int32)(unsafe.Pointer(&rvs))
	lvsInInt32 := *(*[]int32)(unsafe.Pointer(&lvs))
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int32GeNullable(lvsInInt32, rvsInInt32, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int32GeNullable(lvsInInt32, rvsInInt32, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int32GeNullable(lvsInInt32, rvsInInt32, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Int32Ge(lvsInInt32, rvsInInt32, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [timestamp]
func FdsOpGreatEqualTimestamp(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Timestamp), rv.Col.([]types.Timestamp)
	rtl := 8
	switch {
	case lc && !rc:
		rvsInInt64 := *(*[]int64)(unsafe.Pointer(&rvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Int64GeNullableScalar(int64(lvs[0]), rvsInInt64, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Int64GeScalar(int64(lvs[0]), rvsInInt64, rs))
		}
		return vec, nil
	case !lc && rc:
		lvsInInt64 := *(*[]int64)(unsafe.Pointer(&lvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Int64LeNullableScalar(int64(rvs[0]), lvsInInt64, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Int64LeScalar(int64(rvs[0]), lvsInInt64, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	rvsInInt64 := *(*[]int64)(unsafe.Pointer(&rvs))
	lvsInInt64 := *(*[]int64)(unsafe.Pointer(&lvs))
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int64GeNullable(lvsInInt64, rvsInInt64, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int64GeNullable(lvsInInt64, rvsInInt64, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Int64GeNullable(lvsInInt64, rvsInInt64, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Int64Ge(lvsInInt64, rvsInInt64, rs))
	}
	return vec, nil

}

// great equal operator's evaluation for arguments: [decimal64]
func FdsOpGreatEqualDecimal64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Decimal64), rv.Col.([]types.Decimal64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Decimal64GeNullableScalar(lvs[0], rvs, lv.Typ.Scale, rv.Typ.Scale, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Decimal64GeScalar(lvs[0], rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Decimal64LeNullableScalar(rvs[0], lvs, rv.Typ.Scale, lv.Typ.Scale, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Decimal64LeScalar(rvs[0], lvs, rv.Typ.Scale, lv.Typ.Scale, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Decimal64GeNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Decimal64GeNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Decimal64GeNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Decimal64Ge(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
	}
	return vec, nil
}

// great equal operator's evaluation for arguments: [decimal128]
func FdsOpGreatEqualDecimal128(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Decimal128), rv.Col.([]types.Decimal128)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, ge.Decimal128GeNullableScalar(lvs[0], rvs, lv.Typ.Scale, rv.Typ.Scale, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, ge.Decimal128GeScalar(lvs[0], rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, le.Decimal128LeNullableScalar(rvs[0], lvs, rv.Typ.Scale, lv.Typ.Scale, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, le.Decimal128LeScalar(rvs[0], lvs, rv.Typ.Scale, lv.Typ.Scale, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Decimal128GeNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Decimal128GeNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, ge.Decimal128GeNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, ge.Decimal128Ge(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
	}
	return vec, nil
}
