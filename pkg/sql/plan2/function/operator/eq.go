// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// eq.go is generated by eq.template and overloadGenerate.go, do not edit it directly.

package operator

import (
	"github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/eq"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
	"unsafe"

	roaring "github.com/RoaringBitmap/roaring/roaring64"
)

// equal operator's evaluation for arguments: [int8]
func FdsOpEuqalInt8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int8), rv.Col.([]int8)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Int8EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int8EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Int8EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int8EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int8EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int8EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int8EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Int8Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [int16]
func FdsOpEuqalInt16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int16), rv.Col.([]int16)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Int16EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int16EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Int16EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int16EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int16EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int16EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int16EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Int16Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [int32]
func FdsOpEuqalInt32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int32), rv.Col.([]int32)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Int32EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int32EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Int32EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int32EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int32EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int32EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int32EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Int32Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [int64]
func FdsOpEuqalInt64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int64), rv.Col.([]int64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Int64EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int64EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Int64EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int64EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int64EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int64EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int64EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Int64Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [uint8]
func FdsOpEuqalUint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint8), rv.Col.([]uint8)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Uint8EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Uint8EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Uint8EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Uint8EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint8EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint8EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint8EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Uint8Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [uint16]
func FdsOpEuqalUint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint16), rv.Col.([]uint16)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Uint16EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Uint16EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Uint16EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Uint16EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint16EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint16EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint16EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Uint16Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [uint32]
func FdsOpEuqalUint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint32), rv.Col.([]uint32)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Uint32EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Uint32EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Uint32EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Uint32EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint32EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint32EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint32EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Uint32Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [uint64]
func FdsOpEuqalUint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint64), rv.Col.([]uint64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Uint64EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Uint64EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Uint64EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Uint64EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint64EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint64EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Uint64EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Uint64Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [float32]
func FdsOpEuqalFloat32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float32), rv.Col.([]float32)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Float32EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Float32EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Float32EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Float32EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Float32EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Float32EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Float32EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Float32Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [float64]
func FdsOpEuqalFloat64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float64), rv.Col.([]float64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Float64EqNullableScalar(lvs[0], rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Float64EqScalar(lvs[0], rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Float64EqNullableScalar(rvs[0], lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Float64EqScalar(rvs[0], lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Float64EqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Float64EqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Float64EqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Float64Eq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [varchar]
func FdsOpEuqalVarchar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.(*types.Bytes), rv.Col.(*types.Bytes)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs.Lengths)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.StrEqNullableScalar(lvs.Data, rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.StrEqScalar(lvs.Data, rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs.Lengths)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs.Lengths)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.StrEqNullableScalar(rvs.Data, lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.StrEqScalar(rvs.Data, lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs.Lengths)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs.Lengths)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.StrEqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.StrEqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.StrEqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.StrEq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [char]
func FdsOpEuqalChar(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.(*types.Bytes), rv.Col.(*types.Bytes)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs.Lengths)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs.Lengths)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.StrEqNullableScalar(lvs.Data, rvs, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.StrEqScalar(lvs.Data, rvs, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs.Lengths)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs.Lengths)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.StrEqNullableScalar(rvs.Data, lvs, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.StrEqScalar(rvs.Data, lvs, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs.Lengths)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs.Lengths)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.StrEqNullable(lvs, rvs, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.StrEqNullable(lvs, rvs, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.StrEqNullable(lvs, rvs, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.StrEq(lvs, rvs, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [date]
func FdsOpEuqalDate(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Date), rv.Col.([]types.Date)
	rtl := 8
	switch {
	case lc && !rc:
		rvsInInt32 := *(*[]int32)(unsafe.Pointer(&rvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Int32EqNullableScalar(int32(lvs[0]), rvsInInt32, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int32EqScalar(int32(lvs[0]), rvsInInt32, rs))
		}
		return vec, nil
	case !lc && rc:
		lvsInInt32 := *(*[]int32)(unsafe.Pointer(&lvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Int32EqNullableScalar(int32(rvs[0]), lvsInInt32, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int32EqScalar(int32(rvs[0]), lvsInInt32, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	rvsInInt32 := *(*[]int32)(unsafe.Pointer(&rvs))
	lvsInInt32 := *(*[]int32)(unsafe.Pointer(&lvs))
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int32EqNullable(lvsInInt32, rvsInInt32, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int32EqNullable(lvsInInt32, rvsInInt32, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int32EqNullable(lvsInInt32, rvsInInt32, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Int32Eq(lvsInInt32, rvsInInt32, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [datetime]
func FdsOpEuqalDatetime(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Datetime), rv.Col.([]types.Datetime)
	rtl := 8
	switch {
	case lc && !rc:
		rvsInInt64 := *(*[]int64)(unsafe.Pointer(&rvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Int64EqNullableScalar(int64(lvs[0]), rvsInInt64, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int64EqScalar(int64(lvs[0]), rvsInInt64, rs))
		}
		return vec, nil
	case !lc && rc:
		lvsInInt64 := *(*[]int64)(unsafe.Pointer(&lvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Int64EqNullableScalar(int64(rvs[0]), lvsInInt64, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int64EqScalar(int64(rvs[0]), lvsInInt64, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	rvsInInt64 := *(*[]int64)(unsafe.Pointer(&rvs))
	lvsInInt64 := *(*[]int64)(unsafe.Pointer(&lvs))
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int64EqNullable(lvsInInt64, rvsInInt64, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int64EqNullable(lvsInInt64, rvsInInt64, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int64EqNullable(lvsInInt64, rvsInInt64, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Int64Eq(lvsInInt64, rvsInInt64, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [timestamp]
func FdsOpEuqalTimestamp(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Timestamp), rv.Col.([]types.Timestamp)
	rtl := 8
	switch {
	case lc && !rc:
		rvsInInt64 := *(*[]int64)(unsafe.Pointer(&rvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Int64EqNullableScalar(int64(lvs[0]), rvsInInt64, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int64EqScalar(int64(lvs[0]), rvsInInt64, rs))
		}
		return vec, nil
	case !lc && rc:
		lvsInInt64 := *(*[]int64)(unsafe.Pointer(&lvs))
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Int64EqNullableScalar(int64(rvs[0]), lvsInInt64, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Int64EqScalar(int64(rvs[0]), lvsInInt64, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	rvsInInt64 := *(*[]int64)(unsafe.Pointer(&rvs))
	lvsInInt64 := *(*[]int64)(unsafe.Pointer(&lvs))
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int64EqNullable(lvsInInt64, rvsInInt64, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int64EqNullable(lvsInInt64, rvsInInt64, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Int64EqNullable(lvsInInt64, rvsInInt64, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Int64Eq(lvsInInt64, rvsInInt64, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [decimal64]
func FdsOpEuqalDecimal64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Decimal64), rv.Col.([]types.Decimal64)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Decimal64EqNullableScalar(lvs[0], rvs, lv.Typ.Scale, rv.Typ.Scale, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Decimal64EqScalar(lvs[0], rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Decimal64EqNullableScalar(rvs[0], lvs, rv.Typ.Scale, lv.Typ.Scale, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Decimal64EqScalar(rvs[0], lvs, rv.Typ.Scale, lv.Typ.Scale, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Decimal64EqNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Decimal64EqNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Decimal64EqNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Decimal64Eq(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
	}
	return vec, nil
}

// equal operator's evaluation for arguments: [decimal128]
func FdsOpEuqalDecimal128(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]types.Decimal128), rv.Col.([]types.Decimal128)
	rtl := 8
	switch {
	case lc && !rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		if nulls.Any(rv.Nsp) {
			vector.SetCol(vec, eq.Decimal128EqNullableScalar(lvs[0], rvs, lv.Typ.Scale, rv.Typ.Scale, rv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Decimal128EqScalar(lvs[0], rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
		}
		return vec, nil
	case !lc && rc:
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		if nulls.Any(lv.Nsp) {
			vector.SetCol(vec, eq.Decimal128EqNullableScalar(rvs[0], lvs, rv.Typ.Scale, lv.Typ.Scale, lv.Nsp.Np, rs))
		} else {
			vector.SetCol(vec, eq.Decimal128EqScalar(rvs[0], lvs, rv.Typ.Scale, lv.Typ.Scale, rs))
		}
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), SelsType)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(lvs)]
	switch {
	case nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Decimal128EqNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, roaring.Or(lv.Nsp.Np, rv.Nsp.Np), rs))
	case !nulls.Any(lv.Nsp) && nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Decimal128EqNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rv.Nsp.Np, rs))
	case nulls.Any(lv.Nsp) && !nulls.Any(rv.Nsp):
		vector.SetCol(vec, eq.Decimal128EqNullable(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, lv.Nsp.Np, rs))
	default:
		vector.SetCol(vec, eq.Decimal128Eq(lvs, rvs, lv.Typ.Scale, rv.Typ.Scale, rs))
	}
	return vec, nil
}
