// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// mod.go is generated by mod.template and overloadGenerate.go, do not edit it directly.

package operator

import (
	"github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/mod"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

// mod operator's evaluation for arguments: [int8,int8]
func FdsOpModInt8Int8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int8), rv.Col.([]int8)
	rtl := 1
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeInt8Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Int8ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt8Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Int8ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt8Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Int8ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt8Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Int8Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Int8ModSels(lvs, rvs, rs, sels))
	return vec, nil
}

// mod operator's evaluation for arguments: [int16,int16]
func FdsOpModInt16Int16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int16), rv.Col.([]int16)
	rtl := 2
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeInt16Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Int16ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt16Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Int16ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt16Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Int16ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt16Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Int16Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Int16ModSels(lvs, rvs, rs, sels))
	return vec, nil
}

// mod operator's evaluation for arguments: [int32,int32]
func FdsOpModInt32Int32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int32), rv.Col.([]int32)
	rtl := 4
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeInt32Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Int32ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Int32ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Int32ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt32Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Int32Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Int32ModSels(lvs, rvs, rs, sels))
	return vec, nil
}

// mod operator's evaluation for arguments: [int64,int64]
func FdsOpModInt64Int64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]int64), rv.Col.([]int64)
	rtl := 8
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeInt64Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Int64ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Int64ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeInt64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Int64ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Int64Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Int64ModSels(lvs, rvs, rs, sels))
	return vec, nil
}

// mod operator's evaluation for arguments: [uint8,uint8]
func FdsOpModUint8Uint8(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint8), rv.Col.([]uint8)
	rtl := 1
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeUint8Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Uint8ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint8Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Uint8ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint8Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Uint8ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint8Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Uint8Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Uint8ModSels(lvs, rvs, rs, sels))
	return vec, nil
}

// mod operator's evaluation for arguments: [uint16,uint16]
func FdsOpModUint16Uint16(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint16), rv.Col.([]uint16)
	rtl := 2
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeUint16Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Uint16ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint16Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Uint16ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint16Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Uint16ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint16Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Uint16Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Uint16ModSels(lvs, rvs, rs, sels))
	return vec, nil
}

// mod operator's evaluation for arguments: [uint32,uint32]
func FdsOpModUint32Uint32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint32), rv.Col.([]uint32)
	rtl := 4
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeUint32Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Uint32ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Uint32ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Uint32ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint32Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Uint32Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Uint32ModSels(lvs, rvs, rs, sels))
	return vec, nil
}

// mod operator's evaluation for arguments: [uint64,uint64]
func FdsOpModUint64Uint64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]uint64), rv.Col.([]uint64)
	rtl := 8
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeUint64Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Uint64ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Uint64ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeUint64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Uint64ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeUint64Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Uint64Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Uint64ModSels(lvs, rvs, rs, sels))
	return vec, nil
}

// mod operator's evaluation for arguments: [float32,float32]
func FdsOpModFloat32Float32(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float32), rv.Col.([]float32)
	rtl := 4
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeFloat32Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Float32ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat32Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Float32ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat32Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Float32ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat32Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Float32Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Float32ModSels(lvs, rvs, rs, sels))
	return vec, nil
}

// mod operator's evaluation for arguments: [float64,float64]
func FdsOpModFloat64Float64(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lc := lv.IsConstant()
	rc := rv.IsConstant()
	lvs, rvs := lv.Col.([]float64), rv.Col.([]float64)
	rtl := 8
	switch {
	case lc && !rc:
		if !nulls.Any(rv.Nsp) {
			for _, v := range rvs {
				if v == 0 {
					return nil, ErrModByZero
				}
			}
			vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
			if err != nil {
				return nil, err
			}
			rs := encoding.DecodeFloat64Slice(vec.Data)
			rs = rs[:len(rvs)]
			nulls.Set(vec.Nsp, rv.Nsp)
			vector.SetCol(vec, mod.Float64ModScalar(lvs[0], rvs, rs))
			return vec, nil
		}
		sels := process.GetSels(proc)
		defer process.PutSels(sels, proc)
		for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
			if nulls.Contains(rv.Nsp, i) {
				continue
			}
			if rvs[i] == 0 {
				return nil, ErrModByZero
			}
			sels = append(sels, int64(i))
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(rvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat64Slice(vec.Data)
		rs = rs[:len(rvs)]
		nulls.Set(vec.Nsp, rv.Nsp)
		vector.SetCol(vec, mod.Float64ModScalarSels(lvs[0], rvs, rs, sels))
		return vec, nil
	case !lc && rc:
		if rvs[0] == 0 {
			return nil, ErrModByZero
		}
		vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
		if err != nil {
			return nil, err
		}
		rs := encoding.DecodeFloat64Slice(vec.Data)
		rs = rs[:len(lvs)]
		nulls.Set(vec.Nsp, lv.Nsp)
		vector.SetCol(vec, mod.Float64ModByScalar(rvs[0], lvs, rs))
		return vec, nil
	}
	vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeFloat64Slice(vec.Data)
	rs = rs[:len(rvs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	if !nulls.Any(rv.Nsp) {
		for _, v := range rvs {
			if v == 0 {
				return nil, ErrModByZero
			}
		}
		vector.SetCol(vec, mod.Float64Mod(lvs, rvs, rs))
		return vec, nil
	}
	sels := process.GetSels(proc)
	defer process.PutSels(sels, proc)
	for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
		if nulls.Contains(rv.Nsp, i) {
			continue
		}
		if rvs[i] == 0 {
			return nil, ErrModByZero
		}
		sels = append(sels, int64(i))
	}
	vector.SetCol(vec, mod.Float64ModSels(lvs, rvs, rs, sels))
	return vec, nil
}
