// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// and.go is generated by and.template and overloadGenerate.go, do not edit it directly.

package operator

import (
	"github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/and"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

// And operator's evaluation for arguments: [bool,bool]
func FdsOpAndBool(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
	lv := vs[0]
	rv := vs[1]
	lvs, rvs := lv.Col.([]int64), rv.Col.([]int64)
	n := len(lvs)
	if n < len(rvs) {
		n = len(rvs)
	}
	vec, err := process.Get(proc, int64(n)*8, lv.Typ)
	if err != nil {
		return nil, err
	}
	rs := encoding.DecodeInt64Slice(vec.Data)
	rs = rs[:and.SelAnd(lvs, rvs, rs)]
	nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
	nulls.Filter(vec.Nsp, rs)
	vec.Col = rs
	return vec, nil
}
