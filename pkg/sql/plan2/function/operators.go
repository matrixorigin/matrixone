// Copyright 2021 - 2022 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package function

import (
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/pb/plan"
	"github.com/matrixorigin/matrixone/pkg/sql/plan2/function/operator"
	process "github.com/matrixorigin/matrixone/pkg/vm/process2"
)

func initOperators() {
	var err error

	for name, fs := range operators {
		for _, f := range fs {
			err = appendFunction(name, f)
			if err != nil {
				panic(err)
			}
		}
	}
}

// compute operators contains the operator function indexed by function id. including: +,-,*,/,mod
var computeOperators map[int][]Function = map[int][]Function{
	// arithmetic operator
	PLUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt8Int8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt16Int16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt32Int32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt64Int64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint8Uint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint16Uint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint32Uint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint64Uint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusFloat32Float32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusFloat64Float64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusDecimal64Decimal64,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusDecimal128Decimal128,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt8Int16,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt8Int32,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt16Int32,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt8Int64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt16Int64,
		},
		{
			Index:       17,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt32Int64,
		},
		{
			Index:       18,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint8Uint16,
		},
		{
			Index:       19,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint8Uint32,
		},
		{
			Index:       20,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint16Uint32,
		},
		{
			Index:       21,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint8Uint64,
		},
		{
			Index:       22,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint16Uint64,
		},
		{
			Index:       23,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint32Uint64,
		},
		{
			Index:       24,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusFloat32Float64,
		},
		{
			Index:       25,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int8},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt16Int8,
		},
		{
			Index:       26,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int8},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt32Int8,
		},
		{
			Index:       27,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int16},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt32Int16,
		},
		{
			Index:       28,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int8},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt64Int8,
		},
		{
			Index:       29,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int16},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt64Int16,
		},
		{
			Index:       30,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int32},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt64Int32,
		},
		{
			Index:       31,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint8},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint16Uint8,
		},
		{
			Index:       32,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint8},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint32Uint8,
		},
		{
			Index:       33,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint16},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint32Uint16,
		},
		{
			Index:       34,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint8},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint64Uint8,
		},
		{
			Index:       35,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint16},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint64Uint16,
		},
		{
			Index:       36,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint32},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint64Uint32,
		},
		{
			Index:       37,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusFloat64Float32,
		},
	},
	MINUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt8Int8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt16Int16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt32Int32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt64Int64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint8Uint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint16Uint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint32Uint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint64Uint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusFloat32Float32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusFloat64Float64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusDecimal64Decimal64,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusDecimal128Decimal128,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt8Int16,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt8Int32,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt16Int32,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt8Int64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt16Int64,
		},
		{
			Index:       17,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt32Int64,
		},
		{
			Index:       18,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint8Uint16,
		},
		{
			Index:       19,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint8Uint32,
		},
		{
			Index:       20,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint16Uint32,
		},
		{
			Index:       21,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint8Uint64,
		},
		{
			Index:       22,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint16Uint64,
		},
		{
			Index:       23,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint32Uint64,
		},
		{
			Index:       24,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusFloat32Float64,
		},
		{
			Index:       25,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int8},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt16Int8,
		},
		{
			Index:       26,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int8},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt32Int8,
		},
		{
			Index:       27,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int16},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt32Int16,
		},
		{
			Index:       28,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int8},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt64Int8,
		},
		{
			Index:       29,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int16},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt64Int16,
		},
		{
			Index:       30,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int32},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt64Int32,
		},
		{
			Index:       31,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint8},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint16Uint8,
		},
		{
			Index:       32,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint8},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint32Uint8,
		},
		{
			Index:       33,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint16},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint32Uint16,
		},
		{
			Index:       34,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint8},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint64Uint8,
		},
		{
			Index:       35,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint16},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint64Uint16,
		},
		{
			Index:       36,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint32},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint64Uint32,
		},
		{
			Index:       37,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusFloat64Float32,
		},
	},
	MULTI: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt8Int8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt16Int16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt32Int32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt64Int64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint8Uint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint16Uint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint32Uint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint64Uint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiFloat32Float32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiFloat64Float64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiDecimal64Decimal64,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiDecimal128Decimal128,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt8Int16,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt8Int32,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt16Int32,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt8Int64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt16Int64,
		},
		{
			Index:       17,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt32Int64,
		},
		{
			Index:       18,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint8Uint16,
		},
		{
			Index:       19,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint8Uint32,
		},
		{
			Index:       20,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint16Uint32,
		},
		{
			Index:       21,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint8Uint64,
		},
		{
			Index:       22,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint16Uint64,
		},
		{
			Index:       23,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint32Uint64,
		},
		{
			Index:       24,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiFloat32Float64,
		},
		{
			Index:       25,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int8},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt16Int8,
		},
		{
			Index:       26,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int8},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt32Int8,
		},
		{
			Index:       27,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int16},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt32Int16,
		},
		{
			Index:       28,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int8},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt64Int8,
		},
		{
			Index:       29,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int16},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt64Int16,
		},
		{
			Index:       30,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int32},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt64Int32,
		},
		{
			Index:       31,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint8},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint16Uint8,
		},
		{
			Index:       32,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint8},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint32Uint8,
		},
		{
			Index:       33,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint16},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint32Uint16,
		},
		{
			Index:       34,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint8},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint64Uint8,
		},
		{
			Index:       35,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint16},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint64Uint16,
		},
		{
			Index:       36,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint32},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint64Uint32,
		},
		{
			Index:       37,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiFloat64Float32,
		},
	},
	DIV: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpDivFloat32Float32,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpDivFloat64Float64,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpDivDecimal64Decimal64,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpDivDecimal128Decimal128,
		},
	},
	//------------------------
	INTEGER_DIV: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	MOD: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	UNARY_PLUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
	},
	UNARY_MINUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
}

// compare operators contains the operator function indexed by function id. including: =,>,>=,<,<=,!=
var compareOperators map[int][]Function = map[int][]Function{
	// comparison operator
	EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalVarchar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalChar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDatetime,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDate,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDecimal128,
		},
	},
	GREAT_THAN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanVarchar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanChar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDatetime,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDate,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDecimal128,
		},
	},
	GREAT_EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualVarchar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualChar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDatetime,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDate,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDecimal128,
		},
	},
	LESS_THAN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanChar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanVarchar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDate,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDatetime,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDecimal128,
		},
	},
	LESS_EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualChar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualVarchar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDate,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDatetime,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDecimal128,
		},
	},
	NOT_EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualChar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualVarchar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDate,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDatetime,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDecimal128,
		},
	},
}

// logic operators contains the operator function indexed by function id. including: like
var logicOperators map[int][]Function = map[int][]Function{
	LIKE: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLikeCharChar,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_varchar},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLikeCharVarchar,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_char},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLikeVarcharChar,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLikeVarcharVarchar,
		},
	},
}

// operators contains the operator function indexed by function id.
var operators = map[int][]Function{
	// comparison operator
	EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalVarchar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalChar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDatetime,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDate,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDecimal128,
		},
	},
	GREAT_THAN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanVarchar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanChar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDatetime,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDate,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDecimal128,
		},
	},
	GREAT_EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualVarchar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualChar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDatetime,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDate,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDecimal128,
		},
	},
	LESS_THAN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanChar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanVarchar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDate,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDatetime,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDecimal128,
		},
	},
	LESS_EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualChar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualVarchar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDate,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDatetime,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDecimal128,
		},
	},
	NOT_EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualChar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualVarchar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDate,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDatetime,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDecimal128,
		},
	},
	LIKE: {
		{
			Index:     0,
			Flag:      plan.Function_STRICT,
			Kind:      BINARY_LOGICAL_OPERATOR,
			Args:      nil,
			ReturnTyp: types.T_bool,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				_, _ = vs[0].Col.(*types.Bytes), vs[1].Col.(*types.Bytes)
				return nil, nil
			},
			TypeCheckFn: func(inputTypes []types.T, _ []types.T) (match bool) {
				if len(inputTypes) != 2 {
					return false
				}
				typ1, typ2 := inputTypes[0], inputTypes[1]
				if typ1 != types.T_char && typ1 != types.T_varchar {
					return false
				}
				if typ2 != types.T_char && typ2 != types.T_varchar {
					return false
				}
				return true
			},
		},
	},
	BETWEEN: {
		{
			Index: 0,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint8,
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 1,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint16,
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 2,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint32,
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 3,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint64,
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 4,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int8,
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 5,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int16,
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 6,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int32,
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 7,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int64,
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 8,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_float32,
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 9,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_float64,
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 10,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_decimal64,
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index: 11,
			Flag:  plan.Function_STRICT,
			Kind:  BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_decimal128,
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	IN: {
		{
			Index:     0,
			Flag:      plan.Function_STRICT,
			Kind:      IN_PREDICATE,
			ReturnTyp: types.T_bool,
			TypeCheckFn: func(inputTypes []types.T, _ []types.T) (match bool) {
				if len(inputTypes) == 2 && inputTypes[1] == types.T_tuple {
					return true
				}
				return false
			},
			Fn: nil,
		},
	},
	EXISTS: {
		{
			Index:     0,
			Flag:      plan.Function_STRICT,
			Kind:      EXISTS_ANY_PREDICATE,
			ReturnTyp: types.T_bool,
			TypeCheckFn: func(inputTypes []types.T, _ []types.T) (match bool) {
				if len(inputTypes) != 1 {
					return false
				}
				return true
			},
		},
	},
	// logic operator
	AND: {
		{
			Index: 0,
			Flag:  plan.Function_STRICT,
			Kind:  BINARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	OR: {
		{
			Index: 0,
			Flag:  plan.Function_STRICT,
			Kind:  BINARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	NOT: {
		{
			Index: 0,
			Flag:  plan.Function_STRICT,
			Kind:  UNARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	// arithmetic operator
	PLUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	MINUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	MULTI: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	DIV: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	INTEGER_DIV: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	MOD: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	UNARY_PLUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
	},
	UNARY_MINUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	// others
	CAST: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       17,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       18,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       19,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       20,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       21,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       22,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       23,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       24,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       25,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       26,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       27,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       28,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       29,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       30,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       31,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       32,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       33,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       34,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       35,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       36,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       37,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       38,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       39,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       40,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       41,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       42,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       43,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       44,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       45,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       46,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       47,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       48,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       49,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       50,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       51,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       52,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       53,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       54,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       55,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       56,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       57,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       58,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       59,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       60,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       61,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       62,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       63,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       64,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       65,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       66,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       67,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       68,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       69,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       70,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       71,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       72,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       73,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       74,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       75,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       76,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       77,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       78,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       79,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       80,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       81,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       82,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       83,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       84,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       85,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       86,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       87,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       88,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       89,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       90,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       91,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       92,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       93,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       94,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       95,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       96,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       97,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       98,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       99,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       100,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       101,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       102,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       103,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       104,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       105,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       106,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       107,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       108,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       109,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       110,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       111,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       112,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       113,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       114,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       115,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       116,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       117,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       118,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       119,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       120,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       121,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       122,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       123,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       124,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       125,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       126,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       127,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       128,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       129,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       130,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       131,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       132,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       133,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       134,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       135,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       136,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       137,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       138,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       139,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       140,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       141,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       142,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       143,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       144,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       145,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       146,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       147,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       148,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       149,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       150,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       151,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       152,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       153,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       154,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal64, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       155,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       156,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       157,
			Flag:        plan.Function_STRICT,
			Kind:        CAST_EXPRESSION,
			Args:        []types.T{types.T_timestamp, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	CASE: {
		{
			Index:     0,
			Flag:      plan.Function_NONE,
			Kind:      CASE_WHEN_EXPRESSION,
			Args:      nil,
			ReturnTyp: types.T_int64,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				// not implement now.
				return nil, nil
			},
			TypeCheckFn: func(inputTypes []types.T, _ []types.T) (match bool) {
				l := len(inputTypes)
				if l < 3 {
					return false
				}
				caseType := inputTypes[0]
				for i := 0; i < l-1; i += 2 { // when should be caseType
					if inputTypes[i] != caseType && isNotScalarNull(inputTypes[i]) {
						return false
					}
				}
				for i := 1; i < l-1; i += 2 { // then should be int64
					if inputTypes[i] != types.T_int64 && isNotScalarNull(inputTypes[i]) {
						return false
					}
				}
				if l%2 == 1 { // has else part
					if inputTypes[l-1] != types.T_int64 && isNotScalarNull(inputTypes[l-1]) {
						return false
					}
				}
				return true
			},
		},
	},
}
