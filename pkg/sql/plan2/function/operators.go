// Copyright 2021 - 2022 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package function

import (
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/pb/plan"
	"github.com/matrixorigin/matrixone/pkg/sql/plan2/function/operator"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

func initOperators() {
	var err error

	for name, fs := range operators {
		for _, f := range fs {
			err = appendFunction(name, f)
			if err != nil {
				panic(err)
			}
		}
	}
	operator.InitFuncMap()
}

// operators contains the operator function indexed by function id.
var operators = map[int][]Function{
	// is null operator
	ISNULL: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[uint8],
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[uint16],
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[uint32],
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[uint64],
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[int8],
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[int16],
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[int32],
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[int64],
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[float32],
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[float64],
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[types.Decimal64],
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[types.Decimal128],
		},
		{
			Index:  12,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_varchar,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[string],
		},
		{
			Index:  13,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_char,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[string],
		},
		{
			Index:  14,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_date,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[types.Date],
		},
		{
			Index:  15,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_datetime,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[types.Datetime],
		},
		{
			Index:  16,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNull[bool],
		},
	},
	ISNOTNULL: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[uint8],
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[uint16],
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[uint32],
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[uint64],
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[int8],
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[int16],
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[int32],
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[int64],
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[float32],
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[float64],
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[types.Decimal64],
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[types.Decimal128],
		},
		{
			Index:  12,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_varchar,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[string],
		},
		{
			Index:  13,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_char,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[string],
		},
		{
			Index:  14,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_date,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[types.Date],
		},
		{
			Index:  15,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_datetime,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[types.Datetime],
		},
		{
			Index:  16,
			Flag:   plan.Function_STRICT,
			Layout: IS_NULL_EXPRESSION,
			Args: []types.T{
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNotNull[bool],
		},
	},
	// comparison operator
	IS: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Is,
		},
	},
	ISNOT: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IsNot,
		},
	},
	EQUAL: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint8,
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[uint8],
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint16,
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[uint16],
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint32,
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[uint32],
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint64,
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[uint64],
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int8,
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[int8],
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int16,
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[int16],
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int32,
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[int32],
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int64,
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[int64],
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float32,
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[float32],
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float64,
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[float64],
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal64,
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[types.Decimal64],
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal128,
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[types.Decimal128],
		},
		{
			Index:  12,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_varchar,
				types.T_varchar,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[string],
		},
		{
			Index:  13,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_char,
				types.T_char,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[string],
		},
		{
			Index:  14,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_date,
				types.T_date,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[types.Date],
		},
		{
			Index:  15,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_datetime,
				types.T_datetime,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[types.Datetime],
		},
		{
			Index:  16,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.EqDataValue[bool],
		},
	},
	GREAT_THAN: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint8,
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[uint8],
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint16,
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[uint16],
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint32,
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[uint32],
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint64,
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[uint64],
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int8,
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[int8],
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int16,
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[int16],
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int32,
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[int32],
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int64,
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[int64],
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float32,
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[float32],
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float64,
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[float64],
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal64,
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[types.Decimal64],
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal128,
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[types.Decimal128],
		},
		{
			Index:  12,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_varchar,
				types.T_varchar,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[string],
		},
		{
			Index:  13,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_char,
				types.T_char,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[string],
		},
		{
			Index:  14,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_date,
				types.T_date,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[types.Date],
		},
		{
			Index:  15,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_datetime,
				types.T_datetime,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[types.Datetime],
		},
		{
			Index:  16,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GtDataValue[bool],
		},
	},
	GREAT_EQUAL: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint8,
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[uint8],
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint16,
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[uint16],
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint32,
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[uint32],
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint64,
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[uint64],
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int8,
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[int8],
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int16,
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[int16],
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int32,
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[int32],
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int64,
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[int64],
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float32,
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[float32],
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float64,
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[float64],
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal64,
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[types.Decimal64],
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal128,
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[types.Decimal128],
		},
		{
			Index:  12,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_varchar,
				types.T_varchar,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[string],
		},
		{
			Index:  13,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_char,
				types.T_char,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[string],
		},
		{
			Index:  14,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_date,
				types.T_date,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[types.Date],
		},
		{
			Index:  15,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_datetime,
				types.T_datetime,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[types.Datetime],
		},
		{
			Index:  16,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.GeDataValue[bool],
		},
	},
	LESS_THAN: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint8,
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[uint8],
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint16,
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[uint16],
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint32,
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[uint32],
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint64,
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[uint64],
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int8,
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[int8],
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int16,
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[int16],
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int32,
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[int32],
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int64,
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[int64],
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float32,
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[float32],
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float64,
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[float64],
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal64,
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[types.Decimal64],
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal128,
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[types.Decimal128],
		},
		{
			Index:  12,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_varchar,
				types.T_varchar,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[string],
		},
		{
			Index:  13,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_char,
				types.T_char,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[string],
		},
		{
			Index:  14,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_date,
				types.T_date,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[types.Date],
		},
		{
			Index:  15,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_datetime,
				types.T_datetime,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[types.Datetime],
		},
		{
			Index:  16,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LtDataValue[bool],
		},
	},
	LESS_EQUAL: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint8,
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[uint8],
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint16,
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[uint16],
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint32,
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[uint32],
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint64,
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[uint64],
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int8,
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[int8],
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int16,
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[int16],
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int32,
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[int32],
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int64,
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[int64],
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float32,
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[float32],
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float64,
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[float64],
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal64,
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[types.Decimal64],
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal128,
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[types.Decimal128],
		},
		{
			Index:  12,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_varchar,
				types.T_varchar,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[string],
		},
		{
			Index:  13,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_char,
				types.T_char,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[string],
		},
		{
			Index:  14,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_date,
				types.T_date,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[types.Date],
		},
		{
			Index:  15,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_datetime,
				types.T_datetime,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[types.Datetime],
		},
		{
			Index:  16,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.LeDataValue[bool],
		},
	},
	NOT_EQUAL: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint8,
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[uint8],
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint16,
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[uint16],
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint32,
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[uint16],
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_uint64,
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[uint64],
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int8,
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[int8],
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int16,
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[int16],
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int32,
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[int32],
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_int64,
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[int64],
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float32,
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[float32],
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_float64,
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[float64],
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal64,
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[types.Decimal64],
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_decimal128,
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[types.Decimal128],
		},
		{
			Index:  12,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_varchar,
				types.T_varchar,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[string],
		},
		{
			Index:  13,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_char,
				types.T_char,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[string],
		},
		{
			Index:  14,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_date,
				types.T_date,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[types.Date],
		},
		{
			Index:  15,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_datetime,
				types.T_datetime,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[types.Datetime],
		},
		{
			Index:  16,
			Flag:   plan.Function_STRICT,
			Layout: COMPARISON_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.NeDataValue[bool],
		},
	},
	LIKE: {
		{
			Index:     0,
			Flag:      plan.Function_STRICT,
			Layout:    BINARY_LOGICAL_OPERATOR,
			Args:      nil,
			ReturnTyp: types.T_bool,
			Fn:        operator.Like,
			TypeCheckFn: func(inputTypes []types.T, _ []types.T, _ types.T) (match bool) {
				if len(inputTypes) != 2 {
					return false
				}
				typ1, typ2 := inputTypes[0], inputTypes[1]
				if typ1 != types.T_char && typ1 != types.T_varchar {
					return false
				}
				if typ2 != types.T_char && typ2 != types.T_varchar {
					return false
				}
				return true
			},
		},
	},
	BETWEEN: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint8,
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint16,
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint32,
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint64,
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int8,
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int16,
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int32,
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int64,
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_float32,
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_float64,
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_decimal64,
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_decimal128,
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	IN: {
		{
			Index:     0,
			Flag:      plan.Function_STRICT,
			Layout:    IN_PREDICATE,
			ReturnTyp: types.T_bool,
			TypeCheckFn: func(inputTypes []types.T, _ []types.T, _ types.T) (match bool) {
				if len(inputTypes) == 2 && inputTypes[1] == types.T_tuple {
					return true
				}
				return false
			},
			Fn: nil,
		},
	},
	EXISTS: {
		{
			Index:     0,
			Flag:      plan.Function_STRICT,
			Layout:    EXISTS_ANY_PREDICATE,
			ReturnTyp: types.T_bool,
			TypeCheckFn: func(inputTypes []types.T, _ []types.T, _ types.T) (match bool) {
				return len(inputTypes) == 1
			},
		},
	},
	// logic operator
	AND: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: BINARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.And,
		},
	},
	OR: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: BINARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Or,
		},
	},
	XOR: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: BINARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Xor,
		},
	},
	NOT: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: UNARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Not,
		},
	},
	// arithmetic operator
	PLUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Plus[float64],
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.PlusDecimal64,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.PlusDecimal128,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_date, types.T_interval},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	MINUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Minus[float64],
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.MinusDecimal64,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.MinusDecimal128,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_date, types.T_interval},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	MULTI: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Mult[float64],
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.MultDecimal64,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.MultDecimal128,
		},
	},
	DIV: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Div[float32],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Div[float64],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.DivDecimal64,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.DivDecimal128,
		},
	},
	INTEGER_DIV: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IntegerDiv[float32],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.IntegerDiv[float64],
		},
	},
	MOD: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModInt[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModInt[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModInt[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModInt[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModInt[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModInt[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModInt[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModInt[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModFloat[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.ModFloat[float64],
		},
	},
	UNARY_PLUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
	},
	UNARY_MINUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.UnaryMinus[int8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.UnaryMinus[int16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.UnaryMinus[int32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.UnaryMinus[int64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.UnaryMinus[float32],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.UnaryMinus[float64],
		},
	},
	// others
	CAST: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       17,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       18,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       19,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       20,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       21,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       22,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       23,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       24,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       25,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       26,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       27,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       28,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       29,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       30,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       31,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       32,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       33,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       34,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       35,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       36,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       37,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       38,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       39,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       40,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       41,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       42,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       43,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       44,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       45,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       46,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       47,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       48,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       49,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       50,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       51,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       52,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       53,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       54,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       55,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       56,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       57,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       58,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       59,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       60,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       61,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       62,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       63,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       64,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       65,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       66,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       67,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       68,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       69,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       70,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       71,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       72,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       73,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       74,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       75,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       76,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       77,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       78,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       79,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       80,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       81,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       82,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       83,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       84,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       85,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       86,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       87,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       88,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       89,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       90,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       91,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       92,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       93,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       94,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       95,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       96,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       97,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       98,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       99,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       100,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       101,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       102,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       103,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       104,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       105,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       106,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       107,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       108,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       109,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       110,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       111,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       112,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       113,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       114,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       115,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       116,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       117,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       118,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       119,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       120,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       121,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       122,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       123,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       124,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       125,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       126,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       127,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       128,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       129,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       130,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       131,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       132,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       133,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       134,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       135,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       136,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       137,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       138,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       139,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       140,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       141,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       142,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       143,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       144,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       145,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       146,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       147,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       148,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       149,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       150,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       151,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       152,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       153,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       154,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal64, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       155,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       156,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       157,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_timestamp, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       158,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_interval},
			ReturnTyp:   types.T_interval,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       159,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       160,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       161,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       162,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       163,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       164,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       165,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_decimal128},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       166,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_decimal128},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       167,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_timestamp, types.T_varchar},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       168,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_date, types.T_char},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       169,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_date, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       170,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_datetime, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       171,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_datetime, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       172,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_bool, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       173,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_bool, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       174,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_date, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       175,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_datetime, types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       176,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       177,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       178,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       179,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       180,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_datetime, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       181,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_date, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       182,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       183,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal128, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       184,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_timestamp, types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       185,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       186,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       187,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       188,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       189,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       190,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       191,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       192,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       193,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal64, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
		{
			Index:       194,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal128, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.Cast,
		},
	},
	CASE: {
		{
			Index:       0,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_int8,
			Fn:          operator.CaseWhenInt8,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       1,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_int16,
			Fn:          operator.CaseWhenInt16,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       2,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_int32,
			Fn:          operator.CaseWhenInt32,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       3,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_int64,
			Fn:          operator.CaseWhenInt64,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       4,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_uint8,
			Fn:          operator.CaseWhenUint8,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       5,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_uint16,
			Fn:          operator.CaseWhenUint16,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       6,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_uint32,
			Fn:          operator.CaseWhenUint32,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       7,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_uint64,
			Fn:          operator.CaseWhenUint64,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       8,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_float32,
			Fn:          operator.CaseWhenFloat32,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       9,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_float64,
			Fn:          operator.CaseWhenFloat64,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       10,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_bool,
			Fn:          operator.CaseWhenBool,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       11,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_date,
			Fn:          operator.CaseWhenDate,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       12,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_datetime,
			Fn:          operator.CaseWhenDateTime,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       13,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_varchar,
			Fn:          operator.CaseWhenVarchar,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       14,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_char,
			Fn:          operator.CaseWhenChar,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       15,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_decimal64,
			Fn:          operator.CaseWhenDecimal64,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
		{
			Index:       16,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      CASE_WHEN_EXPRESSION,
			ReturnTyp:   types.T_decimal128,
			Fn:          operator.CaseWhenDecimal128,
			TypeCheckFn: operator.CwTypeCheckFn,
		},
	},
	IFF: {
		{
			Index:       0,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_int8,
			Fn:          operator.IfInt8,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       1,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_int16,
			Fn:          operator.IfInt16,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       2,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_int32,
			Fn:          operator.IfInt32,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       3,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_int64,
			Fn:          operator.IfInt64,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       4,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_uint8,
			Fn:          operator.IfUint8,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       5,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_uint16,
			Fn:          operator.IfUint16,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       6,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_uint32,
			Fn:          operator.IfUint32,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       7,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_uint64,
			Fn:          operator.IfUint64,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       8,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_float32,
			Fn:          operator.IfFloat32,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       9,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_float64,
			Fn:          operator.IfFloat64,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       10,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_bool,
			Fn:          operator.IfBool,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       11,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_date,
			Fn:          operator.IfDate,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       12,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_datetime,
			Fn:          operator.IfDateTime,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       13,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_varchar,
			Fn:          operator.IfVarchar,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       14,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_char,
			Fn:          operator.IfChar,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       15,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_decimal64,
			Fn:          operator.IfDecimal64,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
		{
			Index:       16,
			Volatile:    true,
			Flag:        plan.Function_NONE,
			Layout:      STANDARD_FUNCTION,
			ReturnTyp:   types.T_decimal128,
			Fn:          operator.IfDecimal128,
			TypeCheckFn: operator.IfTypeCheckFn,
		},
	},
}
