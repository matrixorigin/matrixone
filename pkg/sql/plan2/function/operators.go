// Copyright 2021 - 2022 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY Layout, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package function

import (
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/pb/plan"
	"github.com/matrixorigin/matrixone/pkg/sql/plan2/function/operator"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

func initOperators() {
	var err error

	for name, fs := range operators {
		for _, f := range fs {
			err = appendFunction(name, f)
			if err != nil {
				panic(err)
			}
		}
	}
}

// operators contains the operator function indexed by function id.-->Source
var operators = map[int][]Function{
	// comparison operator
	EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalVarchar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalChar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDatetime,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDate,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpEuqalDecimal128,
		},
	},
	GREAT_THAN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanVarchar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanChar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDatetime,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDate,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatThanDecimal128,
		},
	},
	GREAT_EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualVarchar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualChar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDatetime,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDate,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpGreatEqualDecimal128,
		},
	},
	LESS_THAN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanChar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanVarchar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDate,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDatetime,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessThanDecimal128,
		},
	},
	LESS_EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualChar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualVarchar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDate,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDatetime,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLessEqualDecimal128,
		},
	},
	NOT_EQUAL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualChar,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualVarchar,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDate,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDatetime,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualTimestamp,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDecimal64,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Layout:      COMPARISON_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpNotEqualDecimal128,
		},
	},
	LIKE: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_LOGICAL_OPERATOR,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLikeCharChar,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_LOGICAL_OPERATOR,
			Args:        []types.T{types.T_char, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLikeVarcharChar,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_LOGICAL_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_char},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLikeCharVarchar,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_LOGICAL_OPERATOR,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpLikeVarcharVarchar,
		},
	},
	BETWEEN: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint8,
				types.T_uint8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  1,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint16,
				types.T_uint16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  2,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint32,
				types.T_uint32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  3,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_uint64,
				types.T_uint64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  4,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int8,
				types.T_int8,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  5,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int16,
				types.T_int16,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  6,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int32,
				types.T_int32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  7,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_int64,
				types.T_int64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  8,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_float32,
				types.T_float32,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  9,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_float64,
				types.T_float64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  10,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_decimal64,
				types.T_decimal64,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:  11,
			Flag:   plan.Function_STRICT,
			Layout: BETWEEN_AND_EXPRESSION,
			Args: []types.T{
				types.T_decimal128,
				types.T_decimal128,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	IN: {
		{
			Index:     0,
			Flag:      plan.Function_STRICT,
			Layout:    IN_PREDICATE,
			ReturnTyp: types.T_bool,
			TypeCheckFn: func(inputTypes []types.T, _ []types.T) (match bool) {
				if len(inputTypes) == 2 && inputTypes[1] == types.T_tuple {
					return true
				}
				return false
			},
			Fn: nil,
		},
	},
	EXISTS: {
		{
			Index:     0,
			Flag:      plan.Function_STRICT,
			Layout:    EXISTS_ANY_PREDICATE,
			ReturnTyp: types.T_bool,
			TypeCheckFn: func(inputTypes []types.T, _ []types.T) (match bool) {
				return len(inputTypes) == 1
			},
		},
	},
	// logic operator
	AND: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: BINARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpAndBool,
		},
	},
	OR: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: BINARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpOrBool,
		},
	},
	NOT: {
		{
			Index:  0,
			Flag:   plan.Function_STRICT,
			Layout: UNARY_LOGICAL_OPERATOR,
			Args: []types.T{
				types.T_bool,
			},
			ReturnTyp:   types.T_bool,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	// arithmetic operator
	PLUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt8Int8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt16Int16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt32Int32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusInt64Int64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint8Uint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint16Uint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint32Uint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusUint64Uint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusFloat32Float32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusFloat64Float64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusDecimal64Decimal64,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpPlusDecimal128Decimal128,
		},
	},
	MINUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt8Int8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt16Int16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt32Int32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusInt64Int64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint8Uint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint16Uint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint32Uint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusUint64Uint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusFloat32Float32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusFloat64Float64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusDecimal64Decimal64,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMinusDecimal128Decimal128,
		},
	},
	MULTI: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt8Int8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt16Int16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt32Int32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiInt64Int64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint8Uint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint16Uint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint32Uint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiUint64Uint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiFloat32Float32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiFloat64Float64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiDecimal64Decimal64,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpMultiDecimal128Decimal128,
		},
	},
	DIV: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpDivFloat32Float32,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpDivFloat64Float64,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpDivDecimal64Decimal64,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpDivDecimal128Decimal128,
		},
	},
	INTEGER_DIV: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpIntegerDivFloat32Float32,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpIntegerDivFloat64Float64,
		},
	},
	MOD: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModInt8Int8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModInt16Int16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModInt32Int32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModInt64Int64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModUint8Uint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModUint16Uint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModUint32Uint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModUint64Uint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModFloat32Float32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpModFloat64Float64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      BINARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	UNARY_PLUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				return vs[0], nil
			},
		},
	},
	UNARY_MINUS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpUnaryMinusInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpUnaryMinusInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpUnaryMinusInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpUnaryMinusInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpUnaryMinusFloat32,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsOpUnaryMinusFloat64,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      UNARY_ARITHMETIC_OPERATOR,
			Args:        []types.T{types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	// others
	CAST: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToInt8,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToInt16,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToInt32,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToUint8,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToUint16,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToUint32,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToUint64,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToFloat32,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToFloat64,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToInt8,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToInt16,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToInt32,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToInt64,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToUint8,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToUint16,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToUint32,
		},
		{
			Index:       17,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToUint64,
		},
		{
			Index:       18,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToFloat32,
		},
		{
			Index:       19,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToFloat64,
		},
		{
			Index:       20,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToInt8,
		},
		{
			Index:       21,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToInt16,
		},
		{
			Index:       22,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToInt32,
		},
		{
			Index:       23,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToInt64,
		},
		{
			Index:       24,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToUint8,
		},
		{
			Index:       25,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToUint16,
		},
		{
			Index:       26,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToUint32,
		},
		{
			Index:       27,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToUint64,
		},
		{
			Index:       28,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToFloat32,
		},
		{
			Index:       29,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToFloat64,
		},
		{
			Index:       30,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToInt8,
		},
		{
			Index:       31,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToInt16,
		},
		{
			Index:       32,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToInt32,
		},
		{
			Index:       33,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToInt64,
		},
		{
			Index:       34,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToUint8,
		},
		{
			Index:       35,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToUint16,
		},
		{
			Index:       36,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToUint32,
		},
		{
			Index:       37,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToUint64,
		},
		{
			Index:       38,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToFloat32,
		},
		{
			Index:       39,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToFloat64,
		},
		{
			Index:       40,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToInt8,
		},
		{
			Index:       41,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToInt16,
		},
		{
			Index:       42,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToInt32,
		},
		{
			Index:       43,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToInt64,
		},
		{
			Index:       44,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToUint8,
		},
		{
			Index:       45,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToUint16,
		},
		{
			Index:       46,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToUint32,
		},
		{
			Index:       47,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToUint64,
		},
		{
			Index:       48,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToFloat32,
		},
		{
			Index:       49,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToFloat64,
		},
		{
			Index:       50,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToInt8,
		},
		{
			Index:       51,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToInt16,
		},
		{
			Index:       52,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToInt32,
		},
		{
			Index:       53,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToInt64,
		},
		{
			Index:       54,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToUint8,
		},
		{
			Index:       55,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToUint16,
		},
		{
			Index:       56,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToUint32,
		},
		{
			Index:       57,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToUint64,
		},
		{
			Index:       58,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToFloat32,
		},
		{
			Index:       59,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToFloat64,
		},
		{
			Index:       60,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToInt8,
		},
		{
			Index:       61,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToInt16,
		},
		{
			Index:       62,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToInt32,
		},
		{
			Index:       63,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToInt64,
		},
		{
			Index:       64,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToUint8,
		},
		{
			Index:       65,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToUint16,
		},
		{
			Index:       66,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToUint32,
		},
		{
			Index:       67,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToUint64,
		},
		{
			Index:       68,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToFloat32,
		},
		{
			Index:       69,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToFloat64,
		},
		{
			Index:       70,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToInt8,
		},
		{
			Index:       71,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToInt16,
		},
		{
			Index:       72,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToInt32,
		},
		{
			Index:       73,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToInt64,
		},
		{
			Index:       74,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToUint8,
		},
		{
			Index:       75,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToUint16,
		},
		{
			Index:       76,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToUint32,
		},
		{
			Index:       77,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToUint64,
		},
		{
			Index:       78,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToFloat32,
		},
		{
			Index:       79,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToFloat64,
		},
		{
			Index:       80,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToInt8,
		},
		{
			Index:       81,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToInt16,
		},
		{
			Index:       82,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToInt32,
		},
		{
			Index:       83,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToInt64,
		},
		{
			Index:       84,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToUint8,
		},
		{
			Index:       85,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToUint16,
		},
		{
			Index:       86,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToUint32,
		},
		{
			Index:       87,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToUint64,
		},
		{
			Index:       88,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToFloat32,
		},
		{
			Index:       89,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToFloat64,
		},
		{
			Index:       90,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToInt8,
		},
		{
			Index:       91,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToInt16,
		},
		{
			Index:       92,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToInt32,
		},
		{
			Index:       93,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToInt64,
		},
		{
			Index:       94,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToUint8,
		},
		{
			Index:       95,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToUint16,
		},
		{
			Index:       96,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToUint32,
		},
		{
			Index:       97,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToUint64,
		},
		{
			Index:       98,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToFloat32,
		},
		{
			Index:       99,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToFloat64,
		},
		{
			Index:       100,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToChar,
		},
		{
			Index:       101,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToVarchar,
		},
		{
			Index:       102,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_date, types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastDateToDate,
		},
		{
			Index:       103,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_datetime, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastDatetimeToDatetime,
		},
		{
			Index:       104,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_timestamp, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastTimestampToTimestamp,
		},
		{
			Index:       105,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal64, types.T_decimal64},
			ReturnTyp:   types.T_decimal64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastDecimal64ToDecimal64,
		},
		{
			Index:       106,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal128, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastDecimal128ToDecimal128,
		},
		{
			Index:       107,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToInt8,
		},
		{
			Index:       108,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToInt16,
		},
		{
			Index:       109,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToInt32,
		},
		{
			Index:       110,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToInt64,
		},
		{
			Index:       111,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToUint8,
		},
		{
			Index:       112,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToUint16,
		},
		{
			Index:       113,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToUint32,
		},
		{
			Index:       114,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToUint64,
		},
		{
			Index:       115,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToFloat32,
		},
		{
			Index:       116,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToFloat64,
		},
		{
			Index:       117,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int8},
			ReturnTyp:   types.T_int8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToInt8,
		},
		{
			Index:       118,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int16},
			ReturnTyp:   types.T_int16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToInt16,
		},
		{
			Index:       119,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int32},
			ReturnTyp:   types.T_int32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToInt32,
		},
		{
			Index:       120,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToInt64,
		},
		{
			Index:       121,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint8},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToUint8,
		},
		{
			Index:       122,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint16},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToUint16,
		},
		{
			Index:       123,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint32},
			ReturnTyp:   types.T_uint32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToUint32,
		},
		{
			Index:       124,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToUint64,
		},
		{
			Index:       125,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_float32},
			ReturnTyp:   types.T_float32,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToFloat32,
		},
		{
			Index:       126,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToFloat64,
		},
		{
			Index:       127,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToChar,
		},
		{
			Index:       128,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToVarchar,
		},
		{
			Index:       129,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToChar,
		},
		{
			Index:       130,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToVarchar,
		},
		{
			Index:       131,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToChar,
		},
		{
			Index:       132,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToVarchar,
		},
		{
			Index:       133,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToChar,
		},
		{
			Index:       134,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToVarchar,
		},
		{
			Index:       135,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToChar,
		},
		{
			Index:       136,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint8, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint8ToVarchar,
		},
		{
			Index:       137,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToChar,
		},
		{
			Index:       138,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint16, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint16ToVarchar,
		},
		{
			Index:       139,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToChar,
		},
		{
			Index:       140,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint32, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint32ToVarchar,
		},
		{
			Index:       141,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToChar,
		},
		{
			Index:       142,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_uint64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastUint64ToVarchar,
		},
		{
			Index:       143,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToChar,
		},
		{
			Index:       144,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float32, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat32ToVarchar,
		},
		{
			Index:       145,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToChar,
		},
		{
			Index:       146,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_float64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastFloat64ToVarchar,
		},
		{
			Index:       147,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToDate,
		},
		{
			Index:       148,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToDatetime,
		},
		{
			Index:       149,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_timestamp},
			ReturnTyp:   types.T_timestamp,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToTimestamp,
		},
		{
			Index:       150,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int8, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt8ToDecimal128,
		},
		{
			Index:       151,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int16, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt16ToDecimal128,
		},
		{
			Index:       152,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int32, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt32ToDecimal128,
		},
		{
			Index:       153,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_int64, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastInt64ToDecimal128,
		},
		{
			Index:       154,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_timestamp, types.T_datetime},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastTimestampToDatetime,
		},
		{
			Index:       155,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_decimal64, types.T_decimal128},
			ReturnTyp:   types.T_decimal128,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastDecimal64ToDecimal128,
		},
		{
			Index:       156,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastCharToVarchar,
		},
		{
			Index:       157,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToChar,
		},
		{
			Index:       158,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_char, types.T_interval},
			ReturnTyp:   types.T_interval,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToChar,
		},
		{
			Index:       159,
			Flag:        plan.Function_STRICT,
			Layout:      CAST_EXPRESSION,
			Args:        []types.T{types.T_varchar, types.T_interval},
			ReturnTyp:   types.T_interval,
			TypeCheckFn: strictTypeCheck,
			Fn:          operator.FdsCastVarcharToChar,
		},
	},
	CASE: {
		{
			Index:     0,
			Flag:      plan.Function_NONE,
			Layout:    CASE_WHEN_EXPRESSION,
			Args:      nil,
			ReturnTyp: types.T_int64,
			Fn: func(vs []*vector.Vector, proc *process.Process) (*vector.Vector, error) {
				// not implement now.
				return nil, nil
			},
			TypeCheckFn: func(inputTypes []types.T, _ []types.T) (match bool) {
				return true
				// TODO: need rewrite to deal with case is nil
				// l := len(inputTypes)
				// if l < 3 {
				// 	return false
				// }
				// caseType := inputTypes[0]
				// for i := 0; i < l-1; i += 2 { // when should be caseType
				// 	if inputTypes[i] != caseType && isNotScalarNull(inputTypes[i]) {
				// 		return false
				// 	}
				// }
				// for i := 1; i < l-1; i += 2 { // then should be int64
				// 	if inputTypes[i] != types.T_int64 && isNotScalarNull(inputTypes[i]) {
				// 		return false
				// 	}
				// }
				// if l%2 == 1 { // has else part
				// 	if inputTypes[l-1] != types.T_int64 && isNotScalarNull(inputTypes[l-1]) {
				// 		return false
				// 	}
				// }
				// return true
			},
		},
	},
	IFF: {
		{
			Index:     0,
			Flag:      plan.Function_STRICT,
			Layout:    STANDARD_FUNCTION,
			Args:      []types.T{types.T_any, types.T_any, types.T_any},
			ReturnTyp: types.T_any,
			TypeCheckFn: func(inputTypes []types.T, _ []types.T) (match bool) {
				return true
			},
			Fn: nil,
		},
	},
}
