// Copyright 2021 - 2022 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package function

import (
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/pb/plan"
	"github.com/matrixorigin/matrixone/pkg/sql/plan2/function/builtin/binary"
	"github.com/matrixorigin/matrixone/pkg/sql/plan2/function/builtin/multi"
	"github.com/matrixorigin/matrixone/pkg/sql/plan2/function/builtin/unary"
)

func initBuiltIns() {
	var err error

	for name, fs := range builtins {
		for _, f := range fs {
			err = appendFunction(name, f)
			if err != nil {
				panic(err)
			}
		}
	}
}

// builtins contains the builtin function indexed by function id.
var builtins = map[int][]Function{
	ABS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.AbsInt64,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.AbsUInt64,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.AbsFloat64,
		},
	},
	ACOS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[uint8],
		}, {
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[uint16],
		}, {
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[int8],
		}, {
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[int16],
		}, {
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Acos[float64],
		},
	},
	BIT_LENGTH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.BitLengthFunc,
		},
	},
	CONCAT_WS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: concatWsTypeCheck,
			Fn:          multi.Concat_ws,
		},
	},
	DATE: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DateToDate,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DatetimeToDate,
		},
	},
	DAY: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DateToDay,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DatetimeToDay,
		},
	},
	DAYOFYEAR: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DayOfYear,
		},
	},
	EMPTY: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Empty,
		},
	},
	EXP: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Exp[float64],
		},
	},
	LENGTH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Length,
		},
	},
	LENGTH_UTF8: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.LengthUTF8,
		},
	},
	LN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ln[float64],
		},
	},
	LOG: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Log[float64],
		},
	},
	LTRIM: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Ltrim,
		},
	},
	MONTH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DateToMonth,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DatetimeToMonth,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DateStringToMonth,
		},
	},
	OCT: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Oct[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Oct[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Oct[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Oct[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Oct[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Oct[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Oct[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Oct[int64],
		},
	},
	REVERSE: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Reverse,
		},
	},
	RTRIM: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Rtrim,
		},
	},
	SIN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sin[float64],
		},
	},
	SPACE: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.SpaceUint64,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.SpaceInt64,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.SpaceFloat[float32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.SpaceFloat[float64],
		},
	},
	WEEK: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DateToWeek,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DatetimeToWeek,
		},
	},
	WEEKDAY: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DateToWeekday,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DatetimeToWeekday,
		},
	},
	YEAR: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DateToYear,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DatetimeToYear,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.DateStringToYear,
		},
	},
	// binary functions
	ENDSWITH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          binary.Endswith,
		},
	},
	FINDINSET: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          binary.FindInSet,
		},
	},
	POW: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          binary.Power,
		},
	},
	STARTSWITH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          binary.Startswith,
		},
	},
	// variadic functions
	CEIL: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.CeilUint64,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.CeilUint64,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.CeilInt64,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.CeilInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.CeilFloat64,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64, types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.CeilFloat64,
		},
	},
	FLOOR: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.FloorUInt64,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.FloorUInt64Int64,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.FloorInt64,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.FloorInt64Int64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.FloorFloat64,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64, types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.FloorFloat64Int64,
		},
	},
	LPAD: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Lpad,
		},
	},
	PI: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Pi,
		},
	},
	ROUND: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.RoundUint64,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.RoundUint64,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.RoundInt64,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64, types.T_int64},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.RoundInt64,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.RoundFloat64,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64, types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.RoundFloat64,
		},
	},
	RPAD: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_float64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_char},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_uint64, types.T_float64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_uint64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_uint64, types.T_char},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_float64, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_float64, types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       12,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_float64, types.T_float64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       13,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_float64, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       14,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_float64, types.T_char},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       15,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       16,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar, types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       17,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar, types.T_float64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       18,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       19,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar, types.T_char},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       20,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_char, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       21,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_char, types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       22,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_char, types.T_float64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       23,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_char, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       24,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_char, types.T_char},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       25,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       26,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_int64, types.T_uint64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       27,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_int64, types.T_float64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       28,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_int64, types.T_varchar},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       29,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_int64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       30,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       31,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       32,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_uint64, types.T_float64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       33,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_uint64, types.T_varchar},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       34,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_uint64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       35,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_float64, types.T_int64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       36,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_float64, types.T_uint64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       37,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_float64, types.T_float64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       38,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_float64, types.T_varchar},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       39,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_float64, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       40,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_varchar, types.T_int64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       41,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_varchar, types.T_uint64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       42,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_varchar, types.T_float64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       43,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       44,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_varchar, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       45,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_char, types.T_int64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       46,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_char, types.T_uint64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       47,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_char, types.T_float64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       48,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_char, types.T_varchar},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
		{
			Index:       49,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_char, types.T_char},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Rpad,
		},
	},
	SUBSTRING: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_int64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_uint64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_int64, types.T_uint64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       10,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_uint64, types.T_int64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
		{
			Index:       11,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_uint64, types.T_uint64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.Substring,
		},
	},
	FROM_UNIXTIME: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.FromUnixTime,
		},
	},
	UNIX_TIMESTAMP: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.UnixTimestamp,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar},
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.UnixTimestampVarchar,
		},
	},
	UTC_TIMESTAMP: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.UTCTimestamp,
		},
	},
	EXTRACT: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_date},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_datetime},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	DATE_ADD: {
		{
			Index:       0,
			Volatile:    true,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.DateAdd,
		},
		{
			Index:       1,
			Volatile:    true,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.DatetimeAdd,
		},
		{
			Index:       2,
			Volatile:    true,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.DateStringAdd,
		},
	},
	DATE_SUB: {
		{
			Index:       0,
			Volatile:    true,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.DateSub,
		},
		{
			Index:       1,
			Volatile:    true,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.DatetimeSub,
		},
		{
			Index:       2,
			Volatile:    true,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          multi.DateStringSub,
		},
	},
	TAN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Tan[float64],
		},
	},
	SINH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Sinh[float64],
		},
	},
	TO_DATE: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: toDateTypeCheck,
			Fn:          binary.ToDate,
		},
	},
	ATAN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Atan[float64],
		},
	},
	COS: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cos[float64],
		},
	},
	COT: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unary.Cot[float64],
		},
	},
}
