// Copyright 2021 - 2022 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package explain

//BuiltinFunctionsMap  change BuiltinFunctions to map
var SysFunsAndOperatorsMap map[string]FunctionProtoType

func init() {
	//change BuiltinFunctions to map
	SysFunsAndOperatorsMap = make(map[string]FunctionProtoType)
	for _, fun := range BuiltinFunctions {
		SysFunsAndOperatorsMap[fun.Name] = fun
	}
}

type FunctionKind int32

const (
	STANDARD_FUNCTION          FunctionKind = 0
	UNARY_ARITHMETIC_OPERATOR  FunctionKind = 1
	BINARY_ARITHMETIC_OPERATOR FunctionKind = 2
	UNARY_LOGICAL_OPERATOR     FunctionKind = 3
	BINARY_LOGICAL_OPERATOR    FunctionKind = 4
	COMPARISON_OPERATOR        FunctionKind = 5
	CAST_EXPRESSION            FunctionKind = 6
	CASE_WHEN_EXPRESSION       FunctionKind = 7
	BETWEEN_AND_EXPRESSION     FunctionKind = 8
	IN_EXISTS_EXPRESSION       FunctionKind = 9
	NOPARAMETER_FUNCTION       FunctionKind = 10
	UNKNOW_KIND_FUNCTION       FunctionKind = 11
)

type FunctionProtoType struct {
	Name string
	Kind FunctionKind
}

var BuiltinFunctions = []FunctionProtoType{
	//Operators
	{"=", COMPARISON_OPERATOR},
	{"<>", COMPARISON_OPERATOR},
	{">", COMPARISON_OPERATOR},
	{">=", COMPARISON_OPERATOR},
	{"<", COMPARISON_OPERATOR},
	{"<=", COMPARISON_OPERATOR},
	{"BETWEEN", BETWEEN_AND_EXPRESSION},
	{"UNARY_PLUS", UNARY_ARITHMETIC_OPERATOR},
	{"UNARY_MINUS", UNARY_ARITHMETIC_OPERATOR},
	{"+", BINARY_ARITHMETIC_OPERATOR},
	{"-", BINARY_ARITHMETIC_OPERATOR},
	{"*", BINARY_ARITHMETIC_OPERATOR},
	{"/", BINARY_ARITHMETIC_OPERATOR},
	{"<<", BINARY_ARITHMETIC_OPERATOR},
	{">>", BINARY_ARITHMETIC_OPERATOR},
	{"%", BINARY_ARITHMETIC_OPERATOR},
	{"||", BINARY_ARITHMETIC_OPERATOR},
	{"AND", BINARY_LOGICAL_OPERATOR},
	{"OR", BINARY_LOGICAL_OPERATOR},
	{"NOT", UNARY_LOGICAL_OPERATOR},
	{"CAST", CAST_EXPRESSION},

	//Functions,},
	{"ABS", STANDARD_FUNCTION},
	{"ACOS", STANDARD_FUNCTION},
	{"ADDDATE", UNKNOW_KIND_FUNCTION},
	{"ADDTIME", UNKNOW_KIND_FUNCTION},
	{"AES_DECRYPT", STANDARD_FUNCTION},
	{"AES_ENCRYPT", STANDARD_FUNCTION},
	{"ANY_VALUE", STANDARD_FUNCTION},
	{"ARRAY_AGG", STANDARD_FUNCTION},
	{"ARRAY_APPEND", STANDARD_FUNCTION},
	{"ARRAY_CAT", STANDARD_FUNCTION},
	{"ARRAY_CONTAINS", STANDARD_FUNCTION},
	{"ARRAY_POSITION", STANDARD_FUNCTION},
	{"ARRAY_SIZE", STANDARD_FUNCTION},
	{"ASCII", STANDARD_FUNCTION},
	{"ASIN", STANDARD_FUNCTION},
	{"ATAN", STANDARD_FUNCTION},
	{"ATAN2", STANDARD_FUNCTION},
	{"AVG", STANDARD_FUNCTION},

	{"BASE64_DECODE", STANDARD_FUNCTION},
	{"BASE64_ENCODE", STANDARD_FUNCTION},
	{"BIT_AND", STANDARD_FUNCTION},
	{"BIT_NOT", STANDARD_FUNCTION},
	{"BIT_OR", STANDARD_FUNCTION},
	{"BIT_XOR", STANDARD_FUNCTION},
	{"BITAGG_AND", STANDARD_FUNCTION},
	{"BITAGG_OR", STANDARD_FUNCTION},
	{"BOOLAGG_AND", STANDARD_FUNCTION},
	{"BOOLAGG_OR", STANDARD_FUNCTION},

	{"CASE", CASE_WHEN_EXPRESSION},
	{"CEIL", STANDARD_FUNCTION},
	{"CHR", STANDARD_FUNCTION},
	{"COALESCE", STANDARD_FUNCTION},
	{"CONTAINS", STANDARD_FUNCTION},
	{"CORR", STANDARD_FUNCTION},
	{"COS", STANDARD_FUNCTION},
	{"COT", STANDARD_FUNCTION},
	{"COUNT", STANDARD_FUNCTION},
	{"COUNT_IF", UNKNOW_KIND_FUNCTION},
	{"COVAR_POP", UNKNOW_KIND_FUNCTION},
	{"COVAR_SAMPLE", UNKNOW_KIND_FUNCTION},
	{"CUME_DIST", UNKNOW_KIND_FUNCTION},
	{"CURRENT_DATE", NOPARAMETER_FUNCTION},
	{"CURRENT_TIMESTAMP", NOPARAMETER_FUNCTION},

	{"DATE_FROM_PARTS", STANDARD_FUNCTION},
	{"DATE_PART", STANDARD_FUNCTION},
	{"DATEADD", STANDARD_FUNCTION},
	{"DATEDIFF", STANDARD_FUNCTION},
	{"DENSE_RANK", STANDARD_FUNCTION},

	{"ENDSWITH", UNKNOW_KIND_FUNCTION},
	{"EXP", UNKNOW_KIND_FUNCTION},

	{"FIRST_VALUE", STANDARD_FUNCTION},
	{"FLOOR", STANDARD_FUNCTION},

	{"GREATEST", STANDARD_FUNCTION},
	{"GROUPING_ID", UNKNOW_KIND_FUNCTION},

	{"HASH", UNKNOW_KIND_FUNCTION},
	{"HASH_AGG", UNKNOW_KIND_FUNCTION},
	{"HEX_DECODE", UNKNOW_KIND_FUNCTION},
	{"HEX_ENCODE", UNKNOW_KIND_FUNCTION},

	{"IFF", UNKNOW_KIND_FUNCTION},
	{"IFNULL", UNKNOW_KIND_FUNCTION},
	{"ILIKE", UNKNOW_KIND_FUNCTION},
	{"ILIKE_ALL", UNKNOW_KIND_FUNCTION},
	{"ILIKE_ANY", UNKNOW_KIND_FUNCTION},
	{"IN", STANDARD_FUNCTION},

	{"LAG", STANDARD_FUNCTION},
	{"LAST_VALUE", STANDARD_FUNCTION},
	{"LEAD", STANDARD_FUNCTION},
	{"LEAST", STANDARD_FUNCTION},
	{"LEFT", STANDARD_FUNCTION},
	{"LENGTH", STANDARD_FUNCTION},
	{"LIKE", BINARY_LOGICAL_OPERATOR},
	{"LIKE_ALL", UNKNOW_KIND_FUNCTION},
	{"LIKE_ANY", UNKNOW_KIND_FUNCTION},
	{"LN", STANDARD_FUNCTION},
	{"LOG", STANDARD_FUNCTION},
	{"LOWER", STANDARD_FUNCTION},
	{"LPAD", STANDARD_FUNCTION},
	{"LTRIM", STANDARD_FUNCTION},

	{"MAX", STANDARD_FUNCTION},
	{"MEDIAN", STANDARD_FUNCTION},
	{"MIN", STANDARD_FUNCTION},
	{"MODE", STANDARD_FUNCTION},

	{"NORMAL", UNKNOW_KIND_FUNCTION},
	{"NTH_VALUE", UNKNOW_KIND_FUNCTION},
	{"NTILE", UNKNOW_KIND_FUNCTION},
	{"NULLIF", UNKNOW_KIND_FUNCTION},

	{"PERCENT_RANK", UNKNOW_KIND_FUNCTION},
	{"POSITION", UNKNOW_KIND_FUNCTION},
	{"POW", STANDARD_FUNCTION},

	{"RADIAN", STANDARD_FUNCTION},
	{"RANDOM", STANDARD_FUNCTION},
	{"RANK", STANDARD_FUNCTION},
	{"REGEXP", STANDARD_FUNCTION},
	{"REGEXP_REPLACE", STANDARD_FUNCTION},
	{"REGEXP_SUBSTR", STANDARD_FUNCTION},
	{"REPEAT", STANDARD_FUNCTION},
	{"REPLACE", STANDARD_FUNCTION},
	{"RIGHT", STANDARD_FUNCTION},
	{"ROUND", STANDARD_FUNCTION},
	{"ROW_NUMBER", STANDARD_FUNCTION},
	{"RPAD", STANDARD_FUNCTION},
	{"RTRIM", STANDARD_FUNCTION},

	{"SIGN", STANDARD_FUNCTION},
	{"SIN", STANDARD_FUNCTION},
	{"SPLIT", STANDARD_FUNCTION},
	{"STARTSWITH", STANDARD_FUNCTION},
	{"STDDEV_POP", STANDARD_FUNCTION},
	{"STDDEV_SAMPLE", STANDARD_FUNCTION},
	{"SUBSTR", STANDARD_FUNCTION},
	{"SUM", STANDARD_FUNCTION},

	{"TAN", STANDARD_FUNCTION},
	{"TO_INTERVAL", STANDARD_FUNCTION},
	{"TRANSLATE", STANDARD_FUNCTION},
	{"TRIM", STANDARD_FUNCTION},

	{"UNIFORM", UNKNOW_KIND_FUNCTION},
	{"UPPER", STANDARD_FUNCTION},

	{"VAR_POP", UNKNOW_KIND_FUNCTION},
	{"VAR_SAMPLE", UNKNOW_KIND_FUNCTION},
}
