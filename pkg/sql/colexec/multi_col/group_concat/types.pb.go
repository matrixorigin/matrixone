// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package group_concat

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_matrixorigin_matrixone_pkg_container_types "github.com/matrixorigin/matrixone/pkg/container/types"
	plan "github.com/matrixorigin/matrixone/pkg/pb/plan"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *Argument) Reset()         { *m = Argument{} }
func (m *Argument) String() string { return proto.CompactTextString(m) }
func (*Argument) ProtoMessage()    {}
func (*Argument) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}
func (m *Argument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Argument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Argument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Argument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Argument.Merge(m, src)
}
func (m *Argument) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Argument) XXX_DiscardUnknown() {
	xxx_messageInfo_Argument.DiscardUnknown(m)
}

var xxx_messageInfo_Argument proto.InternalMessageInfo

func (m *Argument) GetDist() bool {
	if m != nil {
		return m.Dist
	}
	return false
}

func (m *Argument) GetGroupExpr() []*plan.Expr {
	if m != nil {
		return m.GroupExpr
	}
	return nil
}

func (m *Argument) GetOrderByExpr() []*plan.Expr {
	if m != nil {
		return m.OrderByExpr
	}
	return nil
}

func (m *Argument) GetSeparator() string {
	if m != nil {
		return m.Separator
	}
	return ""
}

func (m *Argument) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *EncodeGroupConcat) Reset()         { *m = EncodeGroupConcat{} }
func (m *EncodeGroupConcat) String() string { return proto.CompactTextString(m) }
func (*EncodeGroupConcat) ProtoMessage()    {}
func (*EncodeGroupConcat) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}
func (m *EncodeGroupConcat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodeGroupConcat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodeGroupConcat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodeGroupConcat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeGroupConcat.Merge(m, src)
}
func (m *EncodeGroupConcat) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodeGroupConcat) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeGroupConcat.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeGroupConcat proto.InternalMessageInfo

func (m *EncodeGroupConcat) GetResStrData() []byte {
	if m != nil {
		return m.ResStrData
	}
	return nil
}

func (m *EncodeGroupConcat) GetInsertsStrData() []byte {
	if m != nil {
		return m.InsertsStrData
	}
	return nil
}

func (m *EncodeGroupConcat) GetArg() *Argument {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *EncodeGroupConcat) GetGroups() int {
	if m != nil {
		return m.Groups
	}
	return 0
}

func init() {
	proto.RegisterType((*Argument)(nil), "group_concat.Argument")
	proto.RegisterType((*EncodeGroupConcat)(nil), "group_concat.EncodeGroupConcat")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x8e, 0xd4, 0x30,
	0x10, 0xc6, 0xe3, 0x4d, 0xee, 0xcf, 0x4e, 0x56, 0x48, 0xb8, 0x40, 0xd1, 0x09, 0x39, 0xd1, 0x15,
	0x28, 0x0d, 0x89, 0xb4, 0x74, 0xd7, 0x5d, 0xb8, 0x13, 0xda, 0x0a, 0xc9, 0x87, 0x68, 0x91, 0x37,
	0x6b, 0x4c, 0x04, 0x6b, 0x5b, 0x8e, 0x23, 0x5d, 0x5e, 0x81, 0x8a, 0x47, 0x80, 0x37, 0xa1, 0xdc,
	0x72, 0x4b, 0x44, 0x11, 0xc1, 0xe6, 0x05, 0xa8, 0xa9, 0xd0, 0x3a, 0xb7, 0x5c, 0x84, 0x44, 0x37,
	0xdf, 0xa7, 0xdf, 0x8c, 0x3d, 0xdf, 0x40, 0x68, 0x5b, 0xcd, 0xeb, 0x4c, 0x1b, 0x65, 0x15, 0x9e,
	0x09, 0xa3, 0x1a, 0xfd, 0xa6, 0x54, 0xb2, 0x64, 0xf6, 0xec, 0xa9, 0xa8, 0xec, 0xbb, 0x66, 0x99,
	0x95, 0x6a, 0x9d, 0x0b, 0x25, 0x54, 0xee, 0xa0, 0x65, 0xf3, 0xd6, 0x29, 0x27, 0x5c, 0x35, 0x34,
	0x9f, 0x81, 0xfe, 0xc0, 0xe4, 0x50, 0x9f, 0x7f, 0x45, 0x70, 0x7a, 0x69, 0x44, 0xb3, 0xe6, 0xd2,
	0x62, 0x0c, 0xc1, 0x55, 0x55, 0xdb, 0x08, 0x25, 0x28, 0x3d, 0xa5, 0xae, 0xc6, 0x19, 0x4c, 0x5f,
	0xec, 0xdf, 0xba, 0xbe, 0xd5, 0x26, 0x9a, 0x24, 0x7e, 0x1a, 0xce, 0x21, 0x73, 0x03, 0xf6, 0x4e,
	0x11, 0x6c, 0xba, 0x18, 0xd1, 0x7b, 0x04, 0xcf, 0x21, 0x7c, 0x69, 0x56, 0xdc, 0x14, 0xad, 0xeb,
	0xf0, 0xff, 0xd3, 0x31, 0x86, 0xf0, 0x63, 0x98, 0xde, 0x70, 0xcd, 0x0c, 0xb3, 0xca, 0x44, 0x41,
	0x82, 0xd2, 0x29, 0xbd, 0x37, 0x70, 0x04, 0x27, 0x0e, 0x5e, 0xac, 0xa2, 0xa3, 0x04, 0xa5, 0x47,
	0xf4, 0x20, 0x2f, 0x82, 0x5f, 0x5f, 0x62, 0xef, 0xfc, 0xe3, 0x04, 0x1e, 0x5e, 0xcb, 0x52, 0xad,
	0xb8, 0xfb, 0xc5, 0x73, 0x97, 0x09, 0x26, 0x00, 0x94, 0xd7, 0x37, 0xd6, 0x5c, 0x31, 0xcb, 0xdc,
	0x46, 0x33, 0x3a, 0x72, 0xf0, 0x13, 0x78, 0xb0, 0x90, 0x35, 0x37, 0xf6, 0x2f, 0x33, 0x71, 0xcc,
	0x3f, 0x2e, 0xce, 0xc0, 0xbf, 0x34, 0x22, 0xf2, 0x13, 0x94, 0x86, 0xf3, 0x47, 0xd9, 0x38, 0xf7,
	0xec, 0x10, 0xdc, 0xdd, 0x4e, 0x7b, 0x10, 0xbf, 0x86, 0x60, 0x61, 0x5b, 0x1d, 0x05, 0x89, 0x9f,
	0xce, 0x8a, 0x62, 0xd3, 0xc5, 0xde, 0xf7, 0x2e, 0xbe, 0x18, 0x5d, 0x68, 0xcd, 0xac, 0xa9, 0x6e,
	0x95, 0xa9, 0x44, 0x25, 0x0f, 0x42, 0xf2, 0x5c, 0xbf, 0x17, 0x79, 0xa9, 0xa4, 0x65, 0x95, 0xe4,
	0x26, 0x1f, 0x8e, 0xfd, 0xaa, 0xd5, 0x9c, 0xba, 0x79, 0x38, 0x86, 0x63, 0xb7, 0x5e, 0x3d, 0x84,
	0x50, 0x9c, 0xfc, 0xee, 0x62, 0xbf, 0x92, 0x96, 0xde, 0xd9, 0x43, 0x18, 0x45, 0xb2, 0xfd, 0x49,
	0xbc, 0xcd, 0x8e, 0xa0, 0xed, 0x8e, 0xa0, 0x1f, 0x3b, 0xe2, 0x7d, 0xea, 0x89, 0xf7, 0xb9, 0x27,
	0x68, 0xdb, 0x13, 0xef, 0x5b, 0x4f, 0xbc, 0xe5, 0xb1, 0x3b, 0xfc, 0xb3, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xc1, 0x1d, 0xd7, 0x3e, 0x50, 0x02, 0x00, 0x00,
}

func (m *Argument) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Argument) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Argument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Separator) > 0 {
		i -= len(m.Separator)
		copy(dAtA[i:], m.Separator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Separator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderByExpr) > 0 {
		for iNdEx := len(m.OrderByExpr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderByExpr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GroupExpr) > 0 {
		for iNdEx := len(m.GroupExpr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupExpr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Dist {
		i--
		if m.Dist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncodeGroupConcat) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodeGroupConcat) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodeGroupConcat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Groups != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Groups))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Ityp) > 0 {
		for iNdEx := len(m.Ityp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Ityp[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Ityp[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Arg != nil {
		{
			size, err := m.Arg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InsertsStrData) > 0 {
		i -= len(m.InsertsStrData)
		copy(dAtA[i:], m.InsertsStrData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InsertsStrData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResStrData) > 0 {
		i -= len(m.ResStrData)
		copy(dAtA[i:], m.ResStrData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResStrData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Argument) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dist {
		n += 2
	}
	if len(m.GroupExpr) > 0 {
		for _, e := range m.GroupExpr {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.OrderByExpr) > 0 {
		for _, e := range m.OrderByExpr {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Separator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovTypes(uint64(m.OrderId))
	}
	return n
}

func (m *EncodeGroupConcat) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResStrData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InsertsStrData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Arg != nil {
		l = m.Arg.ProtoSize()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Ityp) > 0 {
		for _, e := range m.Ityp {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Groups != 0 {
		n += 1 + sovTypes(uint64(m.Groups))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Argument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Argument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Argument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dist = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupExpr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupExpr = append(m.GroupExpr, &plan.Expr{})
			if err := m.GroupExpr[len(m.GroupExpr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderByExpr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderByExpr = append(m.OrderByExpr, &plan.Expr{})
			if err := m.OrderByExpr[len(m.OrderByExpr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Separator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Separator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodeGroupConcat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodeGroupConcat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodeGroupConcat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResStrData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResStrData = append(m.ResStrData[:0], dAtA[iNdEx:postIndex]...)
			if m.ResStrData == nil {
				m.ResStrData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertsStrData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsertsStrData = append(m.InsertsStrData[:0], dAtA[iNdEx:postIndex]...)
			if m.InsertsStrData == nil {
				m.InsertsStrData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arg == nil {
				m.Arg = &Argument{}
			}
			if err := m.Arg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ityp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Type
			m.Ityp = append(m.Ityp, v)
			if err := m.Ityp[len(m.Ityp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			m.Groups = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Groups |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
