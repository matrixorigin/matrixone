// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// cast.go is generated by cast.template and overloadGenerate.go, do not edit it directly.

package overload

import (
    "github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/typecast"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

func init() {
    BinOps[Typecast] = []*BinOp{
    {{range .SameType}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, _ *vector.Vector, _ *process.Process, _, _ bool) (*vector.Vector, error) {
                return lv, nil
            },
        },
    {{end}}

    {{range .LeftToRight}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                defer func() {
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                }()
                rtl := {.RETURN_TYPE_LEN}
                lvs := lv.Col.([]L_GO_TYPE)
                vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), rv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(lvs)]
                if _, err := typecast.{.LTYP}To{.RETTYP}(lvs, rs); err != nil {
                    process.Put(proc, vec)
                    return nil, err
                }
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, rs)
                return vec, nil
            },
        },
    {{end}}

    // LeftType is char or varchar
    {{range .Specials1}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                defer func() {
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                }()
                rtl := {.RETURN_TYPE_LEN}
                col := lv.Col.(*types.Bytes)
                vec, err := process.Get(proc, int64(rtl) * int64(len(col.Offsets)), rv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(col.Offsets)]
                if _, err := typecast.BytesTo{.RETTYP}(col, rs); err != nil {
                    process.Put(proc, vec)
                    return nil, err
                }
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, rs)
                return vec, nil
            },
        },
    {{end}}

    // RightType is char or varchar
    {{range .Specials2}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                var err error

                defer func() {
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                }()
                vs := lv.Col.([]L_GO_TYPE)
                col := &types.Bytes{
                    Data:    make([]byte, 0, len(vs)),
                    Offsets: make([]uint32, 0, len(vs)),
                    Lengths: make([]uint32, 0, len(vs)),
                }
                if col, err = typecast.{.LTYP}ToBytes(vs, col); err != nil {
                    return nil, err
                }
                if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
                    return nil, err
                }
                vec := vector.New(rv.Typ)
                vec.Data = col.Data
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, col)
                return vec, nil
            },
        },
    {{end}}

    // cast between char and varchar
    {{range .Specials3}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                lv.Typ = rv.Typ
                return lv, nil
            },
        },
    {{end}}
    }
}