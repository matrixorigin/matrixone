// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// cast.go is generated by cast.template and overloadGenerate.go, do not edit it directly.

package overload

import (
    "github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/typecast"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

func initCast() {
    BinOps[Typecast] = []*BinOp{
    {{range .SameType}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                if lv.Ref == 0 {
                    return lv, nil
                }
                rtl := {.RETURN_TYPE_LEN}
                lvs := lv.Col.([]L_GO_TYPE)
                vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), rv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(lvs)]
                copy(rs, lvs)
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, rs)
                return vec, nil
            },
        },
    {{end}}

    // left and right is same type, and is date and datetime
    {{range .SameType2}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                if lv.Ref == 0 {
                    return lv, nil
                }
                rtl := {.RETURN_TYPE_LEN}
                lvs := lv.Col.([]types.{.LTYP})
                vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), rv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(lvs)]
                copy(rs, lvs)
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, rs)
                return vec, nil
            },
        },
    {{end}}

    {{range .LeftToRight}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                defer func() {
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                }()
                rtl := {.RETURN_TYPE_LEN}
                lvs := lv.Col.([]L_GO_TYPE)
                vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), rv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(lvs)]
                if _, err := typecast.{.LTYP}To{.RETTYP}(lvs, rs); err != nil {
                    process.Put(proc, vec)
                    return nil, err
                }
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, rs)
                return vec, nil
            },
        },
    {{end}}

    // LeftType is char or varchar
    {{range .Specials1}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                defer func() {
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                }()
                rtl := {.RETURN_TYPE_LEN}
                col := lv.Col.(*types.Bytes)
                vec, err := process.Get(proc, int64(rtl) * int64(len(col.Offsets)), rv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(col.Offsets)]
                if _, err := typecast.BytesTo{.RETTYP}(col, rs); err != nil {
                    process.Put(proc, vec)
                    return nil, err
                }
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, rs)
                return vec, nil
            },
        },
    {{end}}

    // RightType is char or varchar
    {{range .Specials2}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                var err error

                defer func() {
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                }()
                vs := lv.Col.([]L_GO_TYPE)
                col := &types.Bytes{
                    Data:    make([]byte, 0, len(vs)),
                    Offsets: make([]uint32, 0, len(vs)),
                    Lengths: make([]uint32, 0, len(vs)),
                }
                if col, err = typecast.{.LTYP}ToBytes(vs, col); err != nil {
                    return nil, err
                }
                if err = proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
                    return nil, err
                }
                vec := vector.New(rv.Typ)
                vec.Data = col.Data
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, col)
                return vec, nil
            },
        },
    {{end}}

    // cast between char and varchar
    {{range .Specials3}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                if lv.Ref == 0 {
                    lv.Typ = rv.Typ
                    return lv, nil
                }
                lvs := lv.Col.(*types.Bytes)
                col := &types.Bytes{
                    Data:    make([]byte, len(lvs.Data)),
                    Offsets: make([]uint32, len(lvs.Offsets)),
                    Lengths: make([]uint32, len(lvs.Lengths)),
                }
                copy(col.Data, lvs.Data)
                copy(col.Offsets, lvs.Offsets)
                copy(col.Lengths, lvs.Lengths)
                if err := proc.Mp.Gm.Alloc(int64(cap(col.Data))); err != nil {
                    return nil, err
                }
                vec := vector.New(rv.Typ)
                vec.Data = col.Data
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, col)
                return vec, nil
            },
        },
    {{end}}
    // cast ints to decimal128
    {{range .Specials4}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.T_decimal128,
            ReturnType: types.T_decimal128,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                 defer func() {
                      if lv.Ref == 0 {
                          process.Put(proc, lv)
                      }
                 }()
                 resultScale := int32(0)
                 resultTyp := types.Type{Oid: types.T_decimal128, Size: 16, Width: 38, Scale: resultScale}
                 lvs := lv.Col.([]L_GO_TYPE)
                 vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
                 if err != nil {
                      return nil, err
                 }
                 rs := encoding.DecodeDecimal128Slice(vec.Data)
                 rs = rs[:len(lvs)]
                 if _, err := typecast.{.LTYP}ToDecimal128(lvs, rs); err != nil {
                      process.Put(proc, vec)
                      return nil, err
                 }
                 nulls.Set(vec.Nsp, lv.Nsp)
                 vector.SetCol(vec, rs)
                 return vec, nil
             },
        },
    {{end}}
		{
			LeftType:   types.T_varchar,
			RightType:  types.T_date,
			ReturnType: types.T_date,
			Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
				defer func() {
					if lv.Ref == 0 {
						process.Put(proc, lv)
					}
				}()
				vs := lv.Col.(*types.Bytes)
				vec, err := process.Get(proc, int64(rv.Typ.Oid.FixedLength()*len(vs.Lengths)), rv.Typ)
				if err != nil {
					return nil, err
				}
				rs := encoding.DecodeDateSlice(vec.Data)
				rs = rs[:len(vs.Lengths)]
				for i := range vs.Lengths {
					if nulls.Contains(lv.Nsp, uint64(i)) {
						continue
					}
					varcharValue := vs.Get(int64(i))
					data, err2 := types.ParseDate(string(varcharValue))
					if err2 != nil {
						return nil, err2
					}
					rs[i] = data
				}
				nulls.Set(vec.Nsp, lv.Nsp)
				vector.SetCol(vec, rs)
				return vec, nil
			},
		},

        {
            LeftType:   types.T_varchar,
            RightType:  types.T_datetime,
            ReturnType: types.T_datetime,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
				defer func() {
					if lv.Ref == 0 {
						process.Put(proc, lv)
					}
				}()
				vs := lv.Col.(*types.Bytes)
				vec, err := process.Get(proc, int64(rv.Typ.Oid.FixedLength()*len(vs.Lengths)), rv.Typ)
				if err != nil {
					return nil, err
				}
				rs := encoding.DecodeDatetimeSlice(vec.Data)
				rs = rs[:len(vs.Lengths)]
				for i := range vs.Lengths {
					if nulls.Contains(lv.Nsp, uint64(i)) {
						continue
					}
					varcharValue := vs.Get(int64(i))
					data, err2 := types.ParseDatetime(string(varcharValue))
					if err2 != nil {
						return nil, err2
					}
					rs[i] = data
				}
				nulls.Set(vec.Nsp, lv.Nsp)
				vector.SetCol(vec, rs)
				return vec, nil
            },
        },

        {
            LeftType:   types.T_varchar,
            RightType:  types.T_timestamp,
            ReturnType: types.T_timestamp,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                defer func() {
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                }()
                vs := lv.Col.(*types.Bytes)
                col := make([]types.Timestamp, 0, len(vs.Lengths))
                for i := range vs.Lengths {
                    varcharValue := vs.Get(int64(i))
                    data, err := types.ParseTimestamp(string(varcharValue), 6) // default timestamp precision is 6
                    if err != nil {
                        return nil, err
                    }
                    col = append(col, data)
                }
                vec := vector.New(rv.Typ)
                vec.Col = col
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, col)
                return vec, nil
            },
        },

        {
             LeftType:   types.T_decimal64,
             RightType:  types.T_decimal128,
             ReturnType: types.T_decimal128,
             Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                 defer func() {
                      if lv.Ref == 0 {
                          process.Put(proc, lv)
                      }
                 }()
                 lvScale := lv.Typ.Scale
                 resultScale := lvScale
                 resultTyp := types.Type{Oid: types.T_decimal128, Size: 16, Width: 38, Scale: resultScale}
                 lvs := lv.Col.([]types.Decimal64)
                 vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
                 if err != nil {
                      return nil, err
                 }
                 rs := encoding.DecodeDecimal128Slice(vec.Data)
                 rs = rs[:len(lvs)]
                 if _, err := typecast.Decimal64ToDecimal128(lvs, rs); err != nil {
                      process.Put(proc, vec)
                      return nil, err
                 }
                 nulls.Set(vec.Nsp, lv.Nsp)
                 vector.SetCol(vec, rs)
                 return vec, nil
             },
        },

         {
             LeftType:   types.T_decimal64,
             RightType:  types.T_decimal64,
             ReturnType: types.T_decimal64,
             Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                 if lv.Ref == 0 {
                      return lv, nil
                 }
                 resultTyp := lv.Typ
                 lvs := lv.Col.([]types.Decimal64)
                 vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
                 if err != nil {
                      return nil, err
                 }
                 rs := encoding.DecodeDecimal64Slice(vec.Data)
                 rs = rs[:len(lvs)]
                 copy(rs, lvs)
                 nulls.Set(vec.Nsp, lv.Nsp)
                 vector.SetCol(vec, rs)
                 vec.Typ = resultTyp
                 return vec, nil
             },
         },

         {
             LeftType:   types.T_decimal128,
             RightType:  types.T_decimal128,
             ReturnType: types.T_decimal128,
             Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                 if lv.Ref == 0 {
                      return lv, nil
                 }
                 resultTyp := lv.Typ
                 lvs := lv.Col.([]types.Decimal128)
                 vec, err := process.Get(proc, int64(resultTyp.Size)*int64(len(lvs)), resultTyp)
                 if err != nil {
                      return nil, err
                 }
                 rs := encoding.DecodeDecimal128Slice(vec.Data)
                 rs = rs[:len(lvs)]
                 copy(rs, lvs)
                 nulls.Set(vec.Nsp, lv.Nsp)
                 vector.SetCol(vec, rs)
                 vec.Typ = resultTyp
                 return vec, nil
             },
         },

        {
            LeftType:   types.T_timestamp,
            RightType:  types.T_datetime,
            ReturnType: types.T_datetime,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, _, _ bool) (*vector.Vector, error) {
                defer func() {
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                }()
                rtl := 8
                lvs := lv.Col.([]types.Timestamp)
                vec, err := process.Get(proc, int64(rtl)*int64(len(lvs)), rv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.DecodeDatetimeSlice(vec.Data)
                rs = rs[:len(lvs)]
                if _, err := typecast.TimestampToDatetime(lvs, rs); err != nil {
                    process.Put(proc, vec)
                    return nil, err
                }
                nulls.Set(vec.Nsp, lv.Nsp)
                vector.SetCol(vec, rs)
                return vec, nil
            },
        },
    }
}
