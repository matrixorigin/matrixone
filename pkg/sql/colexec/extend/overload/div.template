// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// div.go is generated by div.template and overloadGenerate.go, do not edit it directly.

package overload

import (
	"github.com/matrixorigin/matrixone/pkg/container/nulls"
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/container/vector"
	"github.com/matrixorigin/matrixone/pkg/encoding"
	"github.com/matrixorigin/matrixone/pkg/vectorize/div"
	"github.com/matrixorigin/matrixone/pkg/vm/process"
)

func init() {
    BinOps[Div] = []*BinOp{
        {{range .Div}}
        {
                LeftType:   types.LEFT_TYPE_OID,
                RightType:  types.RIGHT_TYPE_OID,
                ReturnType: types.RETURN_TYPE_OID,
                Fn: func(lv, rv *vector.Vector, proc *process.Process, lc, rc bool) (*vector.Vector, error) {
                    lvs, rvs := lv.Col.([]L_GO_TYPE), rv.Col.([]R_GO_TYPE)
                    rtl := {.RETURN_TYPE_LEN}
                    switch {
                    case lc && !rc:
                        if !nulls.Any(rv.Nsp) {
                            for _, v := range rvs {
                                if v == 0 {
                                    return nil, ErrDivByZero
                                }
                            }
                            if rv.Ref == 1 || rv.Ref == 0 {
                                rv.Ref = 0
                                div.{.RTYP}DivScalar(lvs[0], rvs, rvs)
                                return rv, nil
                            }
                            vec, err := process.Get(proc, int64(rtl) * int64(len(rvs)), lv.Typ)
                            if err != nil {
                                return nil, err
                            }
                            rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                            rs = rs[:len(rvs)]
                            nulls.Set(vec.Nsp, rv.Nsp)
                            vector.SetCol(vec, div.{.RETTYP}DivScalar(lvs[0], rvs, rs))
                            return vec, nil
                        }
                        sels := process.GetSels(proc)
                        defer process.PutSels(sels, proc)
                        for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
                            if nulls.Contains(rv.Nsp, i) {
                                continue
                            }
                            if rvs[i] == 0 {
                                return nil, ErrDivByZero
                            }
                            sels = append(sels, int64(i))
                        }
                        if rv.Ref == 1 || rv.Ref == 0 {
                            rv.Ref = 0
                            div.{.RTYP}DivScalarSels(lvs[0], rvs, rvs, sels)
                            return rv, nil
                        }
                        vec, err := process.Get(proc, int64(rtl) * int64(len(rvs)), lv.Typ)
                        if err != nil {
                            return nil, err
                        }
                        rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                        rs = rs[:len(rvs)]
                        nulls.Set(vec.Nsp, rv.Nsp)
                        vector.SetCol(vec, div.{.RETTYP}DivScalarSels(lvs[0], rvs, rs, sels))
                        return vec, nil
                    case !lc && rc:
                        if rvs[0] == 0 {
                            return nil, ErrDivByZero
                        }
                        if lv.Ref == 1 || lv.Ref == 0 {
                            lv.Ref = 0
                            div.{.LTYP}DivByScalar(rvs[0], lvs, lvs)
                            return lv, nil
                        }
                        vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                        if err != nil {
                            return nil, err
                        }
                        rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                        rs = rs[:len(lvs)]
                        nulls.Set(vec.Nsp, lv.Nsp)
                        vector.SetCol(vec, div.{.RETTYP}DivByScalar(rvs[0], lvs, rs))
                        return vec, nil
                    case lv.Ref == 1 || lv.Ref == 0:
                        if !nulls.Any(rv.Nsp) {
                            for _, v := range rvs {
                                if v == 0 {
                                    return nil, ErrDivByZero
                                }
                            }
                            lv.Ref = 0
                            div.{.LTYP}Div(lvs, rvs, lvs)
                            lv.Nsp = lv.Nsp.Or(rv.Nsp)
                            if rv.Ref == 0 {
                                process.Put(proc, rv)
                            }
                            return lv, nil
                        }
                        sels := process.GetSels(proc)
                        defer process.PutSels(sels, proc)
                        for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
                            if nulls.Contains(rv.Nsp, i) {
                                continue
                            }
                            if rvs[i] == 0 {
                                return nil, ErrDivByZero
                            }
                            sels = append(sels, int64(i))
                        }
                        lv.Ref = 0
                        div.{.LTYP}DivSels(lvs, rvs, lvs, sels)
                        lv.Nsp = lv.Nsp.Or(rv.Nsp)
                        if rv.Ref == 0 {
                            process.Put(proc, rv)
                        }
                        return lv, nil
                    case rv.Ref == 1 || rv.Ref == 0:
                        if !nulls.Any(rv.Nsp) {
                            for _, v := range rvs {
                                if v == 0 {
                                    return nil, ErrDivByZero
                                }
                            }
                            rv.Ref = 0
                            div.{.RTYP}Div(lvs, rvs, rvs)
                            rv.Nsp = rv.Nsp.Or(lv.Nsp)
                            if lv.Ref == 0 {
                                process.Put(proc, lv)
                            }
                            return rv, nil
                        }
                        sels := process.GetSels(proc)
                        defer process.PutSels(sels, proc)
                        for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
                            if nulls.Contains(rv.Nsp, i) {
                                continue
                            }
                            if rvs[i] == 0 {
                                return nil, ErrDivByZero
                            }
                            sels = append(sels, int64(i))
                        }
                        rv.Ref = 0
                        div.{.RTYP}DivSels(lvs, rvs, rvs, sels)
                        rv.Nsp = rv.Nsp.Or(lv.Nsp)
                        if lv.Ref == 0 {
                            process.Put(proc, lv)
                        }
                        return rv, nil
                    }
                    vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                    rs = rs[:len(rvs)]
                    nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
                    if !nulls.Any(rv.Nsp) {
                        for _, v := range rvs {
                            if v == 0 {
                                return nil, ErrDivByZero
                            }
                        }
                        vector.SetCol(vec, div.{.RETTYP}Div(lvs, rvs, rs))
                        if lv.Ref == 0 {
                            process.Put(proc, lv)
                        }
                        if rv.Ref == 0 {
                            process.Put(proc, rv)
                        }
                        return vec, nil
                    }
                    sels := process.GetSels(proc)
                    defer process.PutSels(sels, proc)
                    for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
                        if nulls.Contains(rv.Nsp, i) {
                            continue
                        }
                        if rvs[i] == 0 {
                            return nil, ErrDivByZero
                        }
                        sels = append(sels, int64(i))
                    }
                    vector.SetCol(vec, div.{.RETTYP}DivSels(lvs, rvs, rs, sels))
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                    if rv.Ref == 0 {
                        process.Put(proc, rv)
                    }
                    return vec, nil
                },
        },
        {{end}}
    }

    BinOps[IntegerDiv] = []*BinOp{
        {{range .IntegerDiv}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, lc, rc bool) (*vector.Vector, error) {
                lvs, rvs := lv.Col.([]L_GO_TYPE), rv.Col.([]R_GO_TYPE)
                rtl := {.RETURN_TYPE_LEN}

                // there is no need to check if we can reuse vec because return type is diff to left and right types.
                resultLength := len(lvs)
                if !rc {
                    resultLength = len(rvs)
                }
                vec, err := process.Get(proc, int64(rtl) * int64(resultLength), types.Type{
                     Oid:  types.RETURN_TYPE_OID,
                     Size: {.RETURN_TYPE_LEN},
                })
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:resultLength]

                defer func() {
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                    if rv.Ref == 0 {
                        process.Put(proc, rv)
                    }
                }()

                switch {
                case lc && !rc:
                    if !nulls.Any(rv.Nsp) {
                        for _, v := range rvs {
                            if v == 0 {
                                return nil, ErrDivByZero
                            }
                        }
                        nulls.Set(vec.Nsp, rv.Nsp)
                        vector.SetCol(vec, div.{.LTYP}IntegerDivScalar(lvs[0], rvs, rs))
                        return vec, nil
                    }
                    sels := process.GetSels(proc)
                    defer process.PutSels(sels, proc)
                    for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
                        if nulls.Contains(rv.Nsp, i) {
                            continue
                        }
                        if rvs[i] == 0 {
                            return nil, ErrDivByZero
                        }
                        sels = append(sels, int64(i))
                    }
                    vector.SetCol(vec, div.{.LTYP}IntegerDivSels(lvs, rvs, rs, sels))
                    nulls.Set(vec.Nsp, lv.Nsp.Or(rv.Nsp))
                    return vec, nil
                case !lc && rc:
                    if rvs[0] == 0 {
                        return nil, ErrDivByZero
                    }
                    vector.SetCol(vec, div.{.LTYP}IntegerDivByScalar(rvs[0], lvs, rs))
                    nulls.Set(vec.Nsp, lv.Nsp)
                    return vec, nil
                }
                nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
                if !nulls.Any(rv.Nsp) {
                    for _, v := range rvs {
                        if v == 0 {
                            return nil, ErrDivByZero
                        }
                    }
                    vector.SetCol(vec, div.{.LTYP}IntegerDiv(lvs, rvs, rs))
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                    if rv.Ref == 0 {
                        process.Put(proc, rv)
                    }
                    return vec, nil
                }
                sels := process.GetSels(proc)
                defer process.PutSels(sels, proc)
                for i, j := uint64(0), uint64(len(rvs)); i < j; i++ {
                    if nulls.Contains(rv.Nsp, i) {
                        continue
                    }
                    if rvs[i] == 0 {
                        return nil, ErrDivByZero
                    }
                    sels = append(sels, int64(i))
                }
                vector.SetCol(vec, div.{.LTYP}IntegerDivSels(lvs, rvs, rs, sels))
                return vec, nil
            },
        },
        {{end}}
    }
}