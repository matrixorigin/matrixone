// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// minus.go is generated by minus.template and overloadGenerate.go, do not edit it directly.

package overload

import (
    "github.com/matrixorigin/matrixone/pkg/container/nulls"
    "github.com/matrixorigin/matrixone/pkg/container/types"
    "github.com/matrixorigin/matrixone/pkg/container/vector"
    "github.com/matrixorigin/matrixone/pkg/encoding"
    "github.com/matrixorigin/matrixone/pkg/vectorize/sub"
    "github.com/matrixorigin/matrixone/pkg/vm/process"
    "github.com/matrixorigin/matrixone/pkg/vm/register"
)

func init(){
    BinOps[Minus] = []*BinOp{
        // same type to minus
        {{range .Field1}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, lc, rc bool) (*vector.Vector, error) {
                lvs, rvs := lv.Col.([]L_GO_TYPE), rv.Col.([]R_GO_TYPE)
                rtl := {.RETURN_TYPE_LEN}
                switch {
                case lc && !rc:
                    if rv.Ref == 1 || rv.Ref == 0 {
                        rv.Ref = 0
                        sub.{.RTYP}SubScalar(lvs[0], rvs, rvs)
                        return rv, nil
                    }
                    vec, err := register.Get(proc, int64(rtl) * int64(len(rvs)), lv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RTYP}Slice(vec.Data)
                    rs = rs[:len(rvs)]
                    vec.Nsp.Set(rv.Nsp)
                    vec.SetCol(sub.{.RTYP}SubScalar(lvs[0], rvs, rs))
                    return vec, nil
                case !lc && rc:
                    if lv.Ref == 1 || lv.Ref == 0 {
                        lv.Ref = 0
                        sub.{.LTYP}SubByScalar(rvs[0], lvs, lvs)
                        return lv, nil
                    }
                    vec, err := register.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.LTYP}Slice(vec.Data)
                    rs = rs[:len(lvs)]
                    vec.Nsp.Set(lv.Nsp)
                    vec.SetCol(sub.{.LTYP}SubByScalar(rvs[0], lvs, rs))
                    return vec, nil
                case lv.Ref == 1 || lv.Ref == 0:
                    lv.Ref = 0
                    sub.{.LTYP}Sub(lvs, rvs, lvs)
                    lv.Nsp = lv.Nsp.Or(rv.Nsp)
                    if rv.Ref == 0 {
                        register.Put(proc, rv)
                    }
                    return lv, nil
                case rv.Ref == 1 || rv.Ref == 0:
                    rv.Ref = 0
                    sub.{.RTYP}Sub(lvs, rvs, rvs)
                    rv.Nsp = rv.Nsp.Or(lv.Nsp)
                    if lv.Ref == 0 {
                        register.Put(proc, lv)
                    }
                    return rv, nil
                }
                vec, err := register.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(rvs)]
                nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
                vec.SetCol(sub.{.RETTYP}Sub(lvs, rvs, rs))
                if lv.Ref == 0 {
                    register.Put(proc, lv)
                }
                if rv.Ref == 0 {
                    register.Put(proc, rv)
                }
                return vec, nil
            },
        },
        {{end}}

        // same type family, and left is low precision.
        {{range .Field2}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, lc, rc bool) (*vector.Vector, error) {
                lvs, rvs := lv.Col.([]L_GO_TYPE), rv.Col.([]R_GO_TYPE)
                rtl := {.RETURN_TYPE_LEN}
                switch {
                case lc && !rc:
                    if rv.Ref == 1 || rv.Ref == 0 {
                        rv.Ref = 0
                        sub.{.RETTYP}SubScalar(RETURN_GO_TYPE(lvs[0]), rvs, rvs)
                        return rv, nil
                    }
                    vec, err := register.Get(proc, int64(rtl) * int64(len(rvs)), rv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RTYP}Slice(vec.Data)
                    rs = rs[:len(rvs)]
                    vec.Nsp.Set(rv.Nsp)
                    vec.SetCol(sub.{.RTYP}SubScalar(RETURN_GO_TYPE(lvs[0]), rvs, rs))
                    return vec, nil
                case !lc && rc:
                    vec, err := register.Get(proc, int64(rtl) * int64(len(lvs)), rv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RTYP}Slice(vec.Data)
                    rs = rs[:len(lvs)]
                    for i := range rs {
                        rs[i] = RETURN_GO_TYPE(lvs[i])
                    }
                    vec.Nsp.Set(lv.Nsp)
                    vec.SetCol(sub.{.RTYP}SubByScalar(RETURN_GO_TYPE(lvs[0]), rs, rs))
                    if lv.Ref == 0 {
                        register.Put(proc, lv)
                    }
                    return vec, nil
                case rv.Ref == 1 || rv.Ref == 0:
                    rv.Ref = 0
                    // used rvs to sub lvs, and get neg then.
                    sub.{.LTYP}{.RTYP}Sub(rvs, lvs, rvs)
                    rv.Nsp = rv.Nsp.Or(lv.Nsp)
                    for i, r := range rvs {
                        rvs[i] = -r
                    }
                    if lv.Ref == 0 {
                        register.Put(proc, lv)
                    }
                    return rv, nil
                }
                vec, err := register.Get(proc, int64(rtl) * int64(len(rvs)), rv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(rvs)]
                for i := range rs {
                    rs[i] = RETURN_GO_TYPE(lvs[i])
                }
                nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
                vec.SetCol(sub.{.RETTYP}Sub(rs, rvs, rs))
                if lv.Ref == 0 {
                    register.Put(proc, lv)
                }
                if rv.Ref == 0 {
                    register.Put(proc, rv)
                }
                return vec, nil
            },
        },
        {{end}}

        // same type family, and left is high precision.
        {{range .Field3}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, lc, rc bool) (*vector.Vector, error) {
                lvs, rvs := lv.Col.([]L_GO_TYPE), rv.Col.([]R_GO_TYPE)
                rtl := {.RETURN_TYPE_LEN}
                switch {
                case lc && !rc:
                    vec, err := register.Get(proc, int64(rtl) * int64(len(rvs)), lv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.LTYP}Slice(vec.Data)
                    rs = rs[:len(rvs)]
                    for i := range rs {
                        rs[i] = RETURN_GO_TYPE(rvs[i])
                    }
                    vec.Nsp.Set(rv.Nsp)
                    vec.SetCol(sub.{.LTYP}SubScalar(lvs[0], rs, rs))
                    if rv.Ref == 0 {
                        register.Put(proc, rv)
                    }
                    return vec, nil
                case !lc && rc:
                    if lv.Ref == 1 || lv.Ref == 0 {
                        lv.Ref = 0
                        sub.{.LTYP}SubByScalar(RETURN_GO_TYPE(rvs[0]), lvs, lvs)
                        return lv, nil
                    }
                    vec, err := register.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                    rs = rs[:len(lvs)]
                    vec.Nsp.Set(lv.Nsp)
                    vec.SetCol(sub.{.LTYP}SubByScalar(RETURN_GO_TYPE(rvs[0]), lvs, rs))
                    return vec, nil
                case lv.Ref == 1 || lv.Ref == 0:
                    lv.Ref = 0
                    sub.{.RTYP}{.LTYP}Sub(lvs, rvs, lvs)
                    lv.Nsp = lv.Nsp.Or(rv.Nsp)
                    if rv.Ref == 0 {
                        register.Put(proc, rv)
                    }
                    return lv, nil
                }
                vec, err := register.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(lvs)]
                for i := range rs {
                    rs[i] = RETURN_GO_TYPE(rvs[i])
                }
                nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
                vec.SetCol(sub.{.RETTYP}Sub(lvs, rs, rs))
                if lv.Ref == 0 {
                    register.Put(proc, lv)
                }
                if rv.Ref == 0 {
                    register.Put(proc, rv)
                }
                return vec, nil
            },
        },
        {{end}}
    }
}