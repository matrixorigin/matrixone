// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// plus.go is generated by plus.template and overloadGenerate.go, do not edit it directly.

package overload

import (
    "github.com/matrixorigin/matrixone/pkg/container/nulls"
    "github.com/matrixorigin/matrixone/pkg/container/types"
    "github.com/matrixorigin/matrixone/pkg/container/vector"
    "github.com/matrixorigin/matrixone/pkg/encoding"
    "github.com/matrixorigin/matrixone/pkg/vectorize/add"
    "github.com/matrixorigin/matrixone/pkg/vm/process"
)

func init() {
    BinOps[Plus] = []*BinOp{
    // Same types to plus
    {{range .Field1}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, lc, rc bool) (*vector.Vector, error) {
                lvs, rvs := lv.Col.([]L_GO_TYPE), rv.Col.([]R_GO_TYPE)
                rtl := {.RETURN_TYPE_LEN}
                switch {
                case lc && !rc:
                    if rv.Ref == 1 || rv.Ref == 0 {
                        rv.Ref = 0
                        add.{.RTYP}AddScalar(lvs[0], rvs, rvs)
                        return rv, nil
                    }
                    vec, err := process.Get(proc, int64(rtl) * int64(len(rvs)), lv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RTYP}Slice(vec.Data)
                    rs = rs[:len(rvs)]
                    nulls.Set(vec.Nsp, rv.Nsp)
                    vector.SetCol(vec, add.{.RTYP}AddScalar(lvs[0], rvs, rs))
                    return vec, nil
                case !lc && rc:
                    if lv.Ref == 1 || lv.Ref == 0 {
                        lv.Ref = 0
                        add.{.LTYP}AddScalar(rvs[0], lvs, lvs)
                        return lv, nil
                    }
                    vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.LTYP}Slice(vec.Data)
                    rs = rs[:len(lvs)]
                    nulls.Set(vec.Nsp, lv.Nsp)
                    vector.SetCol(vec, add.{.LTYP}AddScalar(rvs[0], lvs, rs))
                    return vec, nil
                case lv.Ref == 1 || lv.Ref == 0:
                    lv.Ref = 0
                    add.{.LTYP}Add(lvs, rvs, lvs)
                    lv.Nsp = lv.Nsp.Or(rv.Nsp)
                    if rv.Ref == 0 {
                        process.Put(proc, rv)
                    }
                    return lv, nil
                case rv.Ref == 1 || rv.Ref == 0:
                    rv.Ref = 0
                    add.{.RTYP}Add(lvs, rvs, rvs)
                    rv.Nsp = rv.Nsp.Or(lv.Nsp)
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                    return rv, nil
                }
                vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(rvs)]
                nulls.Or(lv.Nsp, rv.Nsp, vec.Nsp)
                vector.SetCol(vec, add.{.RETTYP}Add(lvs, rvs, rs))
                if lv.Ref == 0 {
                    process.Put(proc, lv)
                }
                if rv.Ref == 0 {
                    process.Put(proc, rv)
                }
                return vec, nil
            },
        },
    {{end}}

    // same type family, and left is low precision.
    {{range .Field2}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, lc, rc bool) (*vector.Vector, error) {
                lvs, rvs := lv.Col.([]L_GO_TYPE), rv.Col.([]R_GO_TYPE)
                rtl := {.RETURN_TYPE_LEN}
                switch {
                case lc && !rc:
                    if rv.Ref == 1 || rv.Ref == 0 {
                        rv.Ref = 0
                        add.{.LTYP}{.RTYP}AddScalar(lvs[0], rvs, rvs)
                        return rv, nil
                    }
                    vec, err := process.Get(proc, int64(rtl) * int64(len(rvs)), rv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                    rs = rs[:len(rvs)]
                    nulls.Set(vec.Nsp, rv.Nsp)
                    vector.SetCol(vec, add.{.LTYP}{.RTYP}AddScalar(lvs[0], rvs, rs))
                    return vec, nil
                case !lc && rc:
                    vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), rv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                    rs = rs[:len(lvs)]
                    nulls.Set(vec.Nsp, lv.Nsp)
                    for i := range lvs {
                        rs[i] = R_GO_TYPE(lvs[i])
                    }
                    vector.SetCol(vec, add.{.RETTYP}AddScalar(rvs[0], rs, rs))
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                    return vec, nil
                case rv.Ref == 1 || rv.Ref == 0:
                    rv.Ref = 0
                    add.{.LTYP}{.RTYP}Add(lvs, rvs, rvs)
                    rv.Nsp = rv.Nsp.Or(lv.Nsp)
                    if lv.Ref == 0 {
                        process.Put(proc, lv)
                    }
                    return rv, nil
                }
                vec, err := process.Get(proc, int64(rtl) * int64(len(rvs)), rv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(rvs)]
                nulls.Set(vec.Nsp, rv.Nsp.Or(lv.Nsp))
                vector.SetCol(vec, add.{.LTYP}{.RTYP}Add(lvs, rvs, rs))
                if rv.Ref == 0 {
                    process.Put(proc, rv)
                }
                if lv.Ref == 0 {
                    process.Put(proc, lv)
                }
                return vec, nil
            },
        },
    {{end}}

    // same type family, and left one is high precision.
    {{range .Field3}}
        {
            LeftType:   types.LEFT_TYPE_OID,
            RightType:  types.RIGHT_TYPE_OID,
            ReturnType: types.RETURN_TYPE_OID,
            Fn: func(lv, rv *vector.Vector, proc *process.Process, lc, rc bool) (*vector.Vector, error) {
                lvs, rvs := lv.Col.([]L_GO_TYPE), rv.Col.([]R_GO_TYPE)
                rtl := {.RETURN_TYPE_LEN}
                switch {
                case lc && !rc:
                    vec, err := process.Get(proc, int64(rtl) * int64(len(rvs)), lv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                    rs = rs[:len(rvs)]
                    nulls.Set(vec.Nsp, rv.Nsp)
                    for i := range rvs {
                        rs[i] = L_GO_TYPE(rvs[i])
                    }
                    vector.SetCol(vec, add.{.RETTYP}AddScalar(lvs[0], rs, rs))
                    if rv.Ref == 0 {
                        process.Put(proc, rv)
                    }
                    return vec, nil
                case !lc && rc:
                    if lv.Ref == 1 || lv.Ref == 0 {
                        lv.Ref = 0
                        add.{.RTYP}{.LTYP}AddScalar(rvs[0], lvs, lvs)
                        return lv, nil
                    }
                    vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                    if err != nil {
                        return nil, err
                    }
                    rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                    rs = rs[:len(lvs)]
                    nulls.Set(vec.Nsp, lv.Nsp)
                    vector.SetCol(vec, add.{.RTYP}{.LTYP}AddScalar(rvs[0], lvs, rs))
                    return vec, nil
                case lv.Ref == 1 || lv.Ref == 0:
                    lv.Ref = 0
                    add.{.RTYP}{.LTYP}Add(rvs, lvs, lvs)
                    lv.Nsp = rv.Nsp.Or(lv.Nsp)
                    if rv.Ref == 0 {
                        process.Put(proc, rv)
                    }
                    return lv, nil
                }
                vec, err := process.Get(proc, int64(rtl) * int64(len(lvs)), lv.Typ)
                if err != nil {
                    return nil, err
                }
                rs := encoding.Decode{.RETTYP}Slice(vec.Data)
                rs = rs[:len(lvs)]
                nulls.Set(vec.Nsp, rv.Nsp.Or(lv.Nsp))
                vector.SetCol(vec, add.{.RTYP}{.LTYP}Add(rvs, lvs, rs))
                if rv.Ref == 0 {
                    process.Put(proc, rv)
                }
                if lv.Ref == 0 {
                    process.Put(proc, lv)
                }
                return vec, nil
            },
        },
    {{end}}
    }
}

// init function to init binOpsReturnType from
// plus.go / mult.go / minus.go / div.go / mod.go
func init() {
	for i, op := range binOperators {
		for _, bo := range BinOps[op] {
			binOpsReturnType[i][bo.LeftType][bo.RightType] = bo.ReturnType
		}
	}
}