// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package agg

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_matrixorigin_matrixone_pkg_container_types "github.com/matrixorigin/matrixone/pkg/container/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *EncodeAgg) Reset()         { *m = EncodeAgg{} }
func (m *EncodeAgg) String() string { return proto.CompactTextString(m) }
func (*EncodeAgg) ProtoMessage()    {}
func (*EncodeAgg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}
func (m *EncodeAgg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodeAgg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodeAgg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodeAgg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeAgg.Merge(m, src)
}
func (m *EncodeAgg) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodeAgg) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeAgg.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeAgg proto.InternalMessageInfo

func (m *EncodeAgg) GetOp() int64 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *EncodeAgg) GetPrivate() []byte {
	if m != nil {
		return m.Private
	}
	return nil
}

func (m *EncodeAgg) GetEs() []bool {
	if m != nil {
		return m.Es
	}
	return nil
}

func (m *EncodeAgg) GetDa() []byte {
	if m != nil {
		return m.Da
	}
	return nil
}

func (m *EncodeAgg) GetInputTypes() []byte {
	if m != nil {
		return m.InputTypes
	}
	return nil
}

func (m *EncodeAgg) GetOutputType() []byte {
	if m != nil {
		return m.OutputType
	}
	return nil
}

func (m *EncodeAgg) GetIsCount() bool {
	if m != nil {
		return m.IsCount
	}
	return false
}

type EncodeAggDistinctPB struct {
	Op         int64                                                        `protobuf:"varint,1,opt,name=Op,proto3,casttype=int64" json:"Op,omitempty"`
	Private    []byte                                                       `protobuf:"bytes,2,opt,name=Private,proto3" json:"Private,omitempty"`
	Es         []bool                                                       `protobuf:"varint,3,rep,packed,name=Es,proto3" json:"Es,omitempty"`
	Da         []byte                                                       `protobuf:"bytes,4,opt,name=Da,proto3" json:"Da,omitempty"`
	InputTypes []github_com_matrixorigin_matrixone_pkg_container_types.Type `protobuf:"bytes,5,rep,name=InputTypes,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Type" json:"InputTypes"`
	OutputType github_com_matrixorigin_matrixone_pkg_container_types.Type   `protobuf:"bytes,6,opt,name=OutputType,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Type" json:"OutputType"`
	IsCount    bool                                                         `protobuf:"varint,7,opt,name=IsCount,proto3" json:"IsCount,omitempty"`
}

func (m *EncodeAggDistinctPB) Reset()         { *m = EncodeAggDistinctPB{} }
func (m *EncodeAggDistinctPB) String() string { return proto.CompactTextString(m) }
func (*EncodeAggDistinctPB) ProtoMessage()    {}
func (*EncodeAggDistinctPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}
func (m *EncodeAggDistinctPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodeAggDistinctPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodeAggDistinctPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodeAggDistinctPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeAggDistinctPB.Merge(m, src)
}
func (m *EncodeAggDistinctPB) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodeAggDistinctPB) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeAggDistinctPB.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeAggDistinctPB proto.InternalMessageInfo

func (m *EncodeAggDistinctPB) GetOp() int64 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *EncodeAggDistinctPB) GetPrivate() []byte {
	if m != nil {
		return m.Private
	}
	return nil
}

func (m *EncodeAggDistinctPB) GetEs() []bool {
	if m != nil {
		return m.Es
	}
	return nil
}

func (m *EncodeAggDistinctPB) GetDa() []byte {
	if m != nil {
		return m.Da
	}
	return nil
}

func (m *EncodeAggDistinctPB) GetIsCount() bool {
	if m != nil {
		return m.IsCount
	}
	return false
}

func init() {
	proto.RegisterType((*EncodeAgg)(nil), "agg.EncodeAgg")
	proto.RegisterType((*EncodeAggDistinctPB)(nil), "agg.EncodeAggDistinctPB")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x3d, 0x4e, 0xc3, 0x30,
	0x1c, 0xc5, 0x6d, 0xa7, 0x9f, 0xa6, 0x62, 0x08, 0x8b, 0x61, 0x70, 0xa2, 0x4e, 0x59, 0x68, 0x06,
	0x10, 0x43, 0x37, 0x42, 0x3b, 0x74, 0x6a, 0x15, 0x71, 0x81, 0x24, 0x04, 0x63, 0xa1, 0xda, 0x51,
	0xe2, 0x20, 0xb8, 0x05, 0x47, 0x80, 0x9b, 0x30, 0x76, 0xac, 0x98, 0x10, 0x43, 0x05, 0xcd, 0x05,
	0x98, 0x99, 0x50, 0x5c, 0x02, 0x05, 0x16, 0x06, 0xd8, 0xf2, 0x7b, 0x2f, 0xf6, 0xdf, 0xef, 0xd9,
	0x78, 0x43, 0x5d, 0x25, 0x71, 0xd6, 0x4b, 0x52, 0xa9, 0xa4, 0x69, 0x04, 0x8c, 0xed, 0xec, 0x32,
	0xae, 0xce, 0xf2, 0xb0, 0x17, 0xc9, 0xa9, 0xcb, 0x24, 0x93, 0xae, 0xf6, 0xc2, 0xfc, 0x54, 0x93,
	0x06, 0xfd, 0xb5, 0x5a, 0xd3, 0xbd, 0x83, 0xb8, 0x3d, 0x14, 0x91, 0x3c, 0x89, 0x0f, 0x19, 0x33,
	0xb7, 0x31, 0x1a, 0x27, 0x04, 0xda, 0xd0, 0x31, 0xbc, 0xf6, 0xeb, 0xc2, 0xaa, 0x73, 0xa1, 0x0e,
	0xf6, 0x7d, 0x34, 0x4e, 0x4c, 0x82, 0x9b, 0x93, 0x94, 0x5f, 0x04, 0x2a, 0x26, 0xc8, 0x86, 0x4e,
	0xc7, 0xaf, 0xd0, 0xdc, 0xc4, 0x68, 0x98, 0x11, 0xc3, 0x36, 0x9c, 0x96, 0x8f, 0x86, 0x59, 0xc9,
	0x83, 0x80, 0xd4, 0xf4, 0x4f, 0x68, 0x10, 0x98, 0x14, 0xe3, 0x91, 0x48, 0x72, 0x75, 0x5c, 0x1e,
	0x95, 0xd4, 0xb5, 0xbe, 0xa6, 0x94, 0xfe, 0x38, 0x57, 0xef, 0x48, 0x1a, 0x2b, 0xff, 0x53, 0x29,
	0x27, 0x8f, 0xb2, 0x23, 0x99, 0x0b, 0x45, 0x9a, 0x36, 0x74, 0x5a, 0x7e, 0x85, 0xfd, 0xda, 0xcb,
	0xad, 0x05, 0xba, 0xf7, 0x08, 0x6f, 0x7d, 0x44, 0x18, 0xf0, 0x4c, 0x71, 0x11, 0xa9, 0x89, 0xf7,
	0x3f, 0x61, 0xc2, 0x6f, 0x61, 0x0c, 0xa7, 0xe3, 0x79, 0xb3, 0x85, 0x05, 0x1e, 0x17, 0x56, 0x7f,
	0xad, 0xfa, 0x69, 0xa0, 0x52, 0x7e, 0x29, 0x53, 0xce, 0xb8, 0xa8, 0x40, 0xc4, 0x6e, 0x72, 0xce,
	0xdc, 0x48, 0x0a, 0x15, 0x70, 0x11, 0xa7, 0xee, 0xea, 0xf2, 0xca, 0xad, 0xbe, 0x14, 0x12, 0xfe,
	0x2c, 0xe4, 0x6f, 0x66, 0xfc, 0xba, 0x54, 0xe8, 0xd9, 0xf3, 0x67, 0x0a, 0x66, 0x4b, 0x0a, 0xe7,
	0x4b, 0x0a, 0x9f, 0x96, 0x14, 0x5c, 0x17, 0x14, 0xdc, 0x14, 0x14, 0xce, 0x0b, 0x0a, 0x1e, 0x0a,
	0x0a, 0xc2, 0x86, 0x7e, 0x40, 0x7b, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xa1, 0x27, 0xaa,
	0x83, 0x02, 0x00, 0x00,
}

func (m *EncodeAgg) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodeAgg) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodeAgg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCount {
		i--
		if m.IsCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.OutputType) > 0 {
		i -= len(m.OutputType)
		copy(dAtA[i:], m.OutputType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutputType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InputTypes) > 0 {
		i -= len(m.InputTypes)
		copy(dAtA[i:], m.InputTypes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InputTypes)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Da) > 0 {
		i -= len(m.Da)
		copy(dAtA[i:], m.Da)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Da)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Es) > 0 {
		for iNdEx := len(m.Es) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Es[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Es)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Private) > 0 {
		i -= len(m.Private)
		copy(dAtA[i:], m.Private)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Private)))
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncodeAggDistinctPB) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodeAggDistinctPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodeAggDistinctPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCount {
		i--
		if m.IsCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.OutputType.ProtoSize()
		i -= size
		if _, err := m.OutputType.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.InputTypes) > 0 {
		for iNdEx := len(m.InputTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.InputTypes[iNdEx].ProtoSize()
				i -= size
				if _, err := m.InputTypes[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Da) > 0 {
		i -= len(m.Da)
		copy(dAtA[i:], m.Da)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Da)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Es) > 0 {
		for iNdEx := len(m.Es) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Es[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Es)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Private) > 0 {
		i -= len(m.Private)
		copy(dAtA[i:], m.Private)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Private)))
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EncodeAgg) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovTypes(uint64(m.Op))
	}
	l = len(m.Private)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Es) > 0 {
		n += 1 + sovTypes(uint64(len(m.Es))) + len(m.Es)*1
	}
	l = len(m.Da)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InputTypes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OutputType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IsCount {
		n += 2
	}
	return n
}

func (m *EncodeAggDistinctPB) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovTypes(uint64(m.Op))
	}
	l = len(m.Private)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Es) > 0 {
		n += 1 + sovTypes(uint64(len(m.Es))) + len(m.Es)*1
	}
	l = len(m.Da)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.InputTypes) > 0 {
		for _, e := range m.InputTypes {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = m.OutputType.ProtoSize()
	n += 1 + l + sovTypes(uint64(l))
	if m.IsCount {
		n += 2
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EncodeAgg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodeAgg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodeAgg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Private = append(m.Private[:0], dAtA[iNdEx:postIndex]...)
			if m.Private == nil {
				m.Private = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Es = append(m.Es, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Es) == 0 {
					m.Es = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Es = append(m.Es, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Es", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Da", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Da = append(m.Da[:0], dAtA[iNdEx:postIndex]...)
			if m.Da == nil {
				m.Da = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputTypes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputTypes = append(m.InputTypes[:0], dAtA[iNdEx:postIndex]...)
			if m.InputTypes == nil {
				m.InputTypes = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputType = append(m.OutputType[:0], dAtA[iNdEx:postIndex]...)
			if m.OutputType == nil {
				m.OutputType = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodeAggDistinctPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodeAggDistinctPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodeAggDistinctPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Private = append(m.Private[:0], dAtA[iNdEx:postIndex]...)
			if m.Private == nil {
				m.Private = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Es = append(m.Es, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Es) == 0 {
					m.Es = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Es = append(m.Es, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Es", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Da", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Da = append(m.Da[:0], dAtA[iNdEx:postIndex]...)
			if m.Da == nil {
				m.Da = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputTypes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Type
			m.InputTypes = append(m.InputTypes, v)
			if err := m.InputTypes[len(m.InputTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutputType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
