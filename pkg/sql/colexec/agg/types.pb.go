// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package agg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_matrixorigin_matrixone_pkg_container_types "github.com/matrixorigin/matrixone/pkg/container/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *EncodeVariance) Reset()         { *m = EncodeVariance{} }
func (m *EncodeVariance) String() string { return proto.CompactTextString(m) }
func (*EncodeVariance) ProtoMessage()    {}
func (*EncodeVariance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}
func (m *EncodeVariance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodeVariance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodeVariance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodeVariance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeVariance.Merge(m, src)
}
func (m *EncodeVariance) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodeVariance) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeVariance.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeVariance proto.InternalMessageInfo

func (m *EncodeVariance) GetSum() []float64 {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *EncodeVariance) GetCounts() []float64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

func (m *EncodeDecimalV) Reset()         { *m = EncodeDecimalV{} }
func (m *EncodeDecimalV) String() string { return proto.CompactTextString(m) }
func (*EncodeDecimalV) ProtoMessage()    {}
func (*EncodeDecimalV) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}
func (m *EncodeDecimalV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodeDecimalV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodeDecimalV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodeDecimalV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeDecimalV.Merge(m, src)
}
func (m *EncodeDecimalV) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodeDecimalV) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeDecimalV.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeDecimalV proto.InternalMessageInfo

func (m *EncodeDecimalV) GetCounts() []int64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

type VariancePB struct {
	Sum    []float64 `protobuf:"fixed64,1,rep,packed,name=Sum,proto3" json:"Sum,omitempty"`
	Counts []float64 `protobuf:"fixed64,2,rep,packed,name=Counts,proto3" json:"Counts,omitempty"`
}

func (m *VariancePB) Reset()         { *m = VariancePB{} }
func (m *VariancePB) String() string { return proto.CompactTextString(m) }
func (*VariancePB) ProtoMessage()    {}
func (*VariancePB) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}
func (m *VariancePB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VariancePB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VariancePB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VariancePB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariancePB.Merge(m, src)
}
func (m *VariancePB) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VariancePB) XXX_DiscardUnknown() {
	xxx_messageInfo_VariancePB.DiscardUnknown(m)
}

var xxx_messageInfo_VariancePB proto.InternalMessageInfo

func (m *VariancePB) GetSum() []float64 {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *VariancePB) GetCounts() []float64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

func (m *VD64) Reset()         { *m = VD64{} }
func (m *VD64) String() string { return proto.CompactTextString(m) }
func (*VD64) ProtoMessage()    {}
func (*VD64) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}
func (m *VD64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VD64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VD64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VD64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VD64.Merge(m, src)
}
func (m *VD64) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VD64) XXX_DiscardUnknown() {
	xxx_messageInfo_VD64.DiscardUnknown(m)
}

var xxx_messageInfo_VD64 proto.InternalMessageInfo

func (m *VD64) GetCounts() []int64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

func (m *VD64) GetScaleMul() int32 {
	if m != nil {
		return m.ScaleMul
	}
	return 0
}

func (m *VD64) GetScaleDiv() int32 {
	if m != nil {
		return m.ScaleDiv
	}
	return 0
}

func (m *VD64) GetScaleMulDiv() int32 {
	if m != nil {
		return m.ScaleMulDiv
	}
	return 0
}

func (m *VD64) GetScaleDivMul() int32 {
	if m != nil {
		return m.ScaleDivMul
	}
	return 0
}

func (m *VD128) Reset()         { *m = VD128{} }
func (m *VD128) String() string { return proto.CompactTextString(m) }
func (*VD128) ProtoMessage()    {}
func (*VD128) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}
func (m *VD128) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VD128) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VD128.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VD128) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VD128.Merge(m, src)
}
func (m *VD128) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VD128) XXX_DiscardUnknown() {
	xxx_messageInfo_VD128.DiscardUnknown(m)
}

var xxx_messageInfo_VD128 proto.InternalMessageInfo

func (m *VD128) GetCounts() []int64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

func (m *VD128) GetScaleMul() int32 {
	if m != nil {
		return m.ScaleMul
	}
	return 0
}

func (m *VD128) GetScaleDiv() int32 {
	if m != nil {
		return m.ScaleDiv
	}
	return 0
}

func (m *VD128) GetScaleMulDiv() int32 {
	if m != nil {
		return m.ScaleMulDiv
	}
	return 0
}

func (m *VD128) GetScaleDivMul() int32 {
	if m != nil {
		return m.ScaleDivMul
	}
	return 0
}

func (m *EncodeAgg) Reset()         { *m = EncodeAgg{} }
func (m *EncodeAgg) String() string { return proto.CompactTextString(m) }
func (*EncodeAgg) ProtoMessage()    {}
func (*EncodeAgg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{5}
}
func (m *EncodeAgg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodeAgg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodeAgg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodeAgg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeAgg.Merge(m, src)
}
func (m *EncodeAgg) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodeAgg) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeAgg.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeAgg proto.InternalMessageInfo

func (m *EncodeAgg) GetOp() int {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *EncodeAgg) GetPrivate() []byte {
	if m != nil {
		return m.Private
	}
	return nil
}

func (m *EncodeAgg) GetEs() []bool {
	if m != nil {
		return m.Es
	}
	return nil
}

func (m *EncodeAgg) GetDa() []byte {
	if m != nil {
		return m.Da
	}
	return nil
}

func (m *EncodeAgg) GetInputTypes() []byte {
	if m != nil {
		return m.InputTypes
	}
	return nil
}

func (m *EncodeAgg) GetOutputType() []byte {
	if m != nil {
		return m.OutputType
	}
	return nil
}

func (m *EncodeAgg) GetIsCount() bool {
	if m != nil {
		return m.IsCount
	}
	return false
}

type EncodeAggDistinctPB struct {
	Op         int                                                          `protobuf:"varint,1,opt,name=Op,proto3,casttype=int" json:"Op,omitempty"`
	Private    []byte                                                       `protobuf:"bytes,2,opt,name=Private,proto3" json:"Private,omitempty"`
	Es         []bool                                                       `protobuf:"varint,3,rep,packed,name=Es,proto3" json:"Es,omitempty"`
	Da         []byte                                                       `protobuf:"bytes,4,opt,name=Da,proto3" json:"Da,omitempty"`
	InputTypes []github_com_matrixorigin_matrixone_pkg_container_types.Type `protobuf:"bytes,5,rep,name=InputTypes,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Type" json:"InputTypes"`
	OutputType github_com_matrixorigin_matrixone_pkg_container_types.Type   `protobuf:"bytes,6,opt,name=OutputType,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Type" json:"OutputType"`
	IsCount    bool                                                         `protobuf:"varint,7,opt,name=IsCount,proto3" json:"IsCount,omitempty"`
}

func (m *EncodeAggDistinctPB) Reset()         { *m = EncodeAggDistinctPB{} }
func (m *EncodeAggDistinctPB) String() string { return proto.CompactTextString(m) }
func (*EncodeAggDistinctPB) ProtoMessage()    {}
func (*EncodeAggDistinctPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6}
}
func (m *EncodeAggDistinctPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodeAggDistinctPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodeAggDistinctPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodeAggDistinctPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeAggDistinctPB.Merge(m, src)
}
func (m *EncodeAggDistinctPB) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodeAggDistinctPB) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeAggDistinctPB.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeAggDistinctPB proto.InternalMessageInfo

func (m *EncodeAggDistinctPB) GetOp() int {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *EncodeAggDistinctPB) GetPrivate() []byte {
	if m != nil {
		return m.Private
	}
	return nil
}

func (m *EncodeAggDistinctPB) GetEs() []bool {
	if m != nil {
		return m.Es
	}
	return nil
}

func (m *EncodeAggDistinctPB) GetDa() []byte {
	if m != nil {
		return m.Da
	}
	return nil
}

func (m *EncodeAggDistinctPB) GetIsCount() bool {
	if m != nil {
		return m.IsCount
	}
	return false
}

type Decimal64SlicePB struct {
	Slice []github_com_matrixorigin_matrixone_pkg_container_types.Decimal64 `protobuf:"bytes,1,rep,name=Slice,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Decimal64" json:"Slice"`
}

func (m *Decimal64SlicePB) Reset()         { *m = Decimal64SlicePB{} }
func (m *Decimal64SlicePB) String() string { return proto.CompactTextString(m) }
func (*Decimal64SlicePB) ProtoMessage()    {}
func (*Decimal64SlicePB) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{7}
}
func (m *Decimal64SlicePB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decimal64SlicePB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decimal64SlicePB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decimal64SlicePB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decimal64SlicePB.Merge(m, src)
}
func (m *Decimal64SlicePB) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Decimal64SlicePB) XXX_DiscardUnknown() {
	xxx_messageInfo_Decimal64SlicePB.DiscardUnknown(m)
}

var xxx_messageInfo_Decimal64SlicePB proto.InternalMessageInfo

type Decimal128SlicePB struct {
	Slice []github_com_matrixorigin_matrixone_pkg_container_types.Decimal128 `protobuf:"bytes,1,rep,name=Slice,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Decimal128" json:"Slice"`
}

func (m *Decimal128SlicePB) Reset()         { *m = Decimal128SlicePB{} }
func (m *Decimal128SlicePB) String() string { return proto.CompactTextString(m) }
func (*Decimal128SlicePB) ProtoMessage()    {}
func (*Decimal128SlicePB) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{8}
}
func (m *Decimal128SlicePB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decimal128SlicePB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decimal128SlicePB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decimal128SlicePB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decimal128SlicePB.Merge(m, src)
}
func (m *Decimal128SlicePB) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Decimal128SlicePB) XXX_DiscardUnknown() {
	xxx_messageInfo_Decimal128SlicePB.DiscardUnknown(m)
}

var xxx_messageInfo_Decimal128SlicePB proto.InternalMessageInfo

func (m *Decimal64Median) Reset()         { *m = Decimal64Median{} }
func (m *Decimal64Median) String() string { return proto.CompactTextString(m) }
func (*Decimal64Median) ProtoMessage()    {}
func (*Decimal64Median) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{9}
}
func (m *Decimal64Median) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decimal64Median) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decimal64Median.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decimal64Median) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decimal64Median.Merge(m, src)
}
func (m *Decimal64Median) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Decimal64Median) XXX_DiscardUnknown() {
	xxx_messageInfo_Decimal64Median.DiscardUnknown(m)
}

var xxx_messageInfo_Decimal64Median proto.InternalMessageInfo

func (m *Decimal128Median) Reset()         { *m = Decimal128Median{} }
func (m *Decimal128Median) String() string { return proto.CompactTextString(m) }
func (*Decimal128Median) ProtoMessage()    {}
func (*Decimal128Median) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{10}
}
func (m *Decimal128Median) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decimal128Median) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decimal128Median.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decimal128Median) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decimal128Median.Merge(m, src)
}
func (m *Decimal128Median) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Decimal128Median) XXX_DiscardUnknown() {
	xxx_messageInfo_Decimal128Median.DiscardUnknown(m)
}

var xxx_messageInfo_Decimal128Median proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EncodeVariance)(nil), "agg.EncodeVariance")
	proto.RegisterType((*EncodeDecimalV)(nil), "agg.EncodeDecimalV")
	proto.RegisterType((*VariancePB)(nil), "agg.VariancePB")
	proto.RegisterType((*VD64)(nil), "agg.VD64")
	proto.RegisterType((*VD128)(nil), "agg.VD128")
	proto.RegisterType((*EncodeAgg)(nil), "agg.EncodeAgg")
	proto.RegisterType((*EncodeAggDistinctPB)(nil), "agg.EncodeAggDistinctPB")
	proto.RegisterType((*Decimal64SlicePB)(nil), "agg.Decimal64SlicePB")
	proto.RegisterType((*Decimal128SlicePB)(nil), "agg.Decimal128SlicePB")
	proto.RegisterType((*Decimal64Median)(nil), "agg.Decimal64Median")
	proto.RegisterType((*Decimal128Median)(nil), "agg.Decimal128Median")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xf6, 0xda, 0x49, 0x5b, 0xa6, 0x51, 0x5b, 0x16, 0xa9, 0xb5, 0x7a, 0x70, 0xa2, 0x9c, 0x22,
	0x10, 0x8d, 0x5a, 0xaa, 0xaa, 0xaa, 0x90, 0x28, 0xae, 0x23, 0xe8, 0xa1, 0x6a, 0xb5, 0xa9, 0x7c,
	0x40, 0x02, 0x69, 0xe3, 0x18, 0xb3, 0x22, 0xb1, 0x2d, 0x7b, 0x1d, 0xc8, 0x0b, 0x70, 0xe6, 0x11,
	0xe0, 0x45, 0x38, 0xf7, 0x18, 0xc1, 0x05, 0x71, 0xa8, 0xa0, 0x79, 0x01, 0xce, 0x9c, 0x90, 0x37,
	0x6b, 0xd7, 0x29, 0x42, 0xe2, 0x27, 0xdc, 0xb8, 0xed, 0x37, 0x33, 0xfe, 0xbe, 0xf9, 0x66, 0x77,
	0x12, 0x58, 0xe4, 0xc3, 0xd0, 0x8d, 0x37, 0xc2, 0x28, 0xe0, 0x01, 0xd6, 0xa8, 0xe7, 0xad, 0xdf,
	0xf6, 0x18, 0x7f, 0x96, 0x74, 0x36, 0x9c, 0xa0, 0xdf, 0xf4, 0x02, 0x2f, 0x68, 0x8a, 0x5c, 0x27,
	0x79, 0x2a, 0x90, 0x00, 0xe2, 0x34, 0xf9, 0xa6, 0xbe, 0x0f, 0x4b, 0x2d, 0xdf, 0x09, 0xba, 0xae,
	0x4d, 0x23, 0x46, 0x7d, 0xc7, 0xc5, 0x2b, 0xa0, 0xb5, 0x93, 0xbe, 0x8e, 0x6a, 0x5a, 0x03, 0x91,
	0xf4, 0x88, 0x57, 0x61, 0xee, 0x20, 0x48, 0x7c, 0x1e, 0xeb, 0xaa, 0x08, 0x4a, 0xb4, 0x57, 0xfa,
	0xfa, 0xb6, 0xaa, 0xd4, 0x5f, 0xa1, 0x8c, 0xc2, 0x72, 0x1d, 0xd6, 0xa7, 0x3d, 0x1b, 0xdb, 0xa0,
	0xc5, 0x92, 0xa2, 0x62, 0x5a, 0x9f, 0xce, 0xab, 0xfb, 0x85, 0xa6, 0xfa, 0x94, 0x47, 0xec, 0x65,
	0x10, 0x31, 0x8f, 0xf9, 0x19, 0xf0, 0xdd, 0x66, 0xf8, 0xdc, 0x6b, 0x3a, 0x81, 0xcf, 0x29, 0xf3,
	0xdd, 0xa8, 0x39, 0xb1, 0x25, 0x09, 0x37, 0xb7, 0x76, 0x49, 0x4a, 0x78, 0xa5, 0x11, 0xed, 0x4a,
	0x23, 0x77, 0x01, 0x32, 0x13, 0x27, 0xe6, 0x6f, 0xda, 0x40, 0xf5, 0xf7, 0x2a, 0x94, 0x6c, 0x6b,
	0x67, 0x1b, 0x3f, 0xba, 0xfc, 0xb0, 0x62, 0x3e, 0x3c, 0x3b, 0xaf, 0x2a, 0xb3, 0x31, 0xd0, 0xfe,
	0xb9, 0x01, 0x7c, 0x0a, 0xda, 0xe9, 0x30, 0xd4, 0xb5, 0x1a, 0x6a, 0x54, 0x4c, 0x53, 0x6a, 0xee,
	0xfd, 0x99, 0xe6, 0xe9, 0x30, 0x74, 0x49, 0x4a, 0x87, 0xd7, 0x61, 0xa1, 0xed, 0xd0, 0x9e, 0x7b,
	0x94, 0xf4, 0xf4, 0x52, 0x0d, 0x35, 0xca, 0x24, 0xc7, 0x79, 0xce, 0x62, 0x03, 0xbd, 0x5c, 0xc8,
	0x59, 0x6c, 0x80, 0x6b, 0xb0, 0x98, 0xd5, 0xa5, 0xe9, 0x39, 0x91, 0x2e, 0x86, 0xf2, 0x0a, 0x8b,
	0x0d, 0x52, 0xf2, 0xf9, 0x42, 0xc5, 0x24, 0x24, 0xaf, 0xe4, 0x83, 0x0a, 0x65, 0xdb, 0xda, 0xdc,
	0xda, 0xfd, 0x3f, 0xd5, 0x19, 0x4e, 0xf5, 0x1d, 0x82, 0x6b, 0x93, 0x8d, 0xbb, 0xef, 0x79, 0x78,
	0x0d, 0xd4, 0xe3, 0x50, 0x47, 0x69, 0xb1, 0x39, 0xff, 0xed, 0xbc, 0xaa, 0x31, 0x9f, 0x13, 0xf5,
	0x38, 0xc4, 0x3a, 0xcc, 0x9f, 0x44, 0x6c, 0x40, 0xb9, 0xab, 0xab, 0xe9, 0x08, 0x48, 0x06, 0xf1,
	0x12, 0xa8, 0xad, 0x58, 0xd7, 0x6a, 0x5a, 0x63, 0x81, 0xa8, 0xad, 0x38, 0xc5, 0x16, 0x15, 0x66,
	0x2a, 0x44, 0xb5, 0x28, 0x36, 0x00, 0x0e, 0xfd, 0x30, 0xe1, 0xa9, 0xe9, 0x58, 0x18, 0xa9, 0x90,
	0x42, 0x24, 0xcd, 0x1f, 0x27, 0x5c, 0x42, 0xe1, 0xa4, 0x42, 0x0a, 0x91, 0x54, 0xf9, 0x30, 0x16,
	0x97, 0x20, 0x4c, 0x2c, 0x90, 0x0c, 0x4a, 0x03, 0x23, 0x15, 0x6e, 0xe4, 0x06, 0x2c, 0x16, 0x73,
	0xe6, 0x3b, 0xfc, 0xc4, 0xfc, 0x17, 0x56, 0x3a, 0x57, 0xac, 0x68, 0x33, 0x7a, 0x0a, 0xc5, 0x71,
	0x74, 0x7e, 0x1c, 0xc7, 0x6c, 0x34, 0x7e, 0x79, 0xa4, 0xa8, 0xfe, 0x02, 0x56, 0xe4, 0x5a, 0xec,
	0x6c, 0xb7, 0x7b, 0x4c, 0xfc, 0x04, 0x3e, 0x86, 0xb2, 0x38, 0xca, 0xad, 0x7b, 0x20, 0x5b, 0xba,
	0xf7, 0x57, 0x5b, 0xb7, 0xb3, 0x4d, 0x26, 0xac, 0x52, 0x78, 0x08, 0xd7, 0x2f, 0xf7, 0x31, 0x53,
	0x7e, 0x32, 0xad, 0x3c, 0xbb, 0x7d, 0x9f, 0x92, 0x3e, 0x80, 0xe5, 0xbc, 0xa9, 0x23, 0xb7, 0xcb,
	0xa8, 0x8f, 0x6f, 0x42, 0xc9, 0xa6, 0xbd, 0x58, 0xea, 0xae, 0x4a, 0xdd, 0xa5, 0xee, 0xd4, 0x68,
	0x88, 0xa8, 0x91, 0x6f, 0xb1, 0x95, 0x0f, 0x6e, 0x73, 0x6b, 0x57, 0xb2, 0xdc, 0x9a, 0x62, 0x59,
	0x93, 0x2c, 0xcb, 0xdd, 0x69, 0x9f, 0x45, 0x1a, 0xb3, 0x36, 0xfa, 0x62, 0x28, 0x67, 0x17, 0x06,
	0x1a, 0x5d, 0x18, 0xe8, 0xf3, 0x85, 0xa1, 0xbc, 0x1e, 0x1b, 0xca, 0x9b, 0xb1, 0x81, 0x46, 0x63,
	0x43, 0xf9, 0x38, 0x36, 0x94, 0xce, 0x9c, 0xf8, 0xc3, 0xbd, 0xf3, 0x3d, 0x00, 0x00, 0xff, 0xff,
	0x04, 0x59, 0x52, 0x12, 0xb3, 0x07, 0x00, 0x00,
}

func (m *EncodeVariance) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodeVariance) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodeVariance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for iNdEx := len(m.Counts) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float64bits(float64(m.Counts[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
		}
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Counts)*8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sum) > 0 {
		for iNdEx := len(m.Sum) - 1; iNdEx >= 0; iNdEx-- {
			f2 := math.Float64bits(float64(m.Sum[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f2))
		}
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sum)*8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EncodeDecimalV) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodeDecimalV) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodeDecimalV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counts) > 0 {
		dAtA4 := make([]byte, len(m.Counts)*10)
		var j3 int
		for _, num1 := range m.Counts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sum) > 0 {
		for iNdEx := len(m.Sum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Sum[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Sum[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VariancePB) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VariancePB) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VariancePB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for iNdEx := len(m.Counts) - 1; iNdEx >= 0; iNdEx-- {
			f5 := math.Float64bits(float64(m.Counts[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f5))
		}
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Counts)*8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sum) > 0 {
		for iNdEx := len(m.Sum) - 1; iNdEx >= 0; iNdEx-- {
			f6 := math.Float64bits(float64(m.Sum[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f6))
		}
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sum)*8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VD64) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VD64) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VD64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScaleDivMul != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ScaleDivMul))
		i--
		dAtA[i] = 0x38
	}
	if m.ScaleMulDiv != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ScaleMulDiv))
		i--
		dAtA[i] = 0x30
	}
	if m.ScaleDiv != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ScaleDiv))
		i--
		dAtA[i] = 0x28
	}
	if m.ScaleMul != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ScaleMul))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Typ.ProtoSize()
		i -= size
		if _, err := m.Typ.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Counts) > 0 {
		dAtA8 := make([]byte, len(m.Counts)*10)
		var j7 int
		for _, num1 := range m.Counts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTypes(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sum) > 0 {
		for iNdEx := len(m.Sum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Sum[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Sum[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VD128) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VD128) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VD128) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScaleDivMul != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ScaleDivMul))
		i--
		dAtA[i] = 0x38
	}
	if m.ScaleMulDiv != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ScaleMulDiv))
		i--
		dAtA[i] = 0x30
	}
	if m.ScaleDiv != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ScaleDiv))
		i--
		dAtA[i] = 0x28
	}
	if m.ScaleMul != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ScaleMul))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Typ.ProtoSize()
		i -= size
		if _, err := m.Typ.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Counts) > 0 {
		dAtA10 := make([]byte, len(m.Counts)*10)
		var j9 int
		for _, num1 := range m.Counts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintTypes(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sum) > 0 {
		for iNdEx := len(m.Sum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Sum[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Sum[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EncodeAgg) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodeAgg) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodeAgg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCount {
		i--
		if m.IsCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.OutputType) > 0 {
		i -= len(m.OutputType)
		copy(dAtA[i:], m.OutputType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutputType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InputTypes) > 0 {
		i -= len(m.InputTypes)
		copy(dAtA[i:], m.InputTypes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InputTypes)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Da) > 0 {
		i -= len(m.Da)
		copy(dAtA[i:], m.Da)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Da)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Es) > 0 {
		for iNdEx := len(m.Es) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Es[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Es)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Private) > 0 {
		i -= len(m.Private)
		copy(dAtA[i:], m.Private)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Private)))
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncodeAggDistinctPB) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodeAggDistinctPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodeAggDistinctPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCount {
		i--
		if m.IsCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.OutputType.ProtoSize()
		i -= size
		if _, err := m.OutputType.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.InputTypes) > 0 {
		for iNdEx := len(m.InputTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.InputTypes[iNdEx].ProtoSize()
				i -= size
				if _, err := m.InputTypes[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Da) > 0 {
		i -= len(m.Da)
		copy(dAtA[i:], m.Da)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Da)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Es) > 0 {
		for iNdEx := len(m.Es) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Es[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Es)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Private) > 0 {
		i -= len(m.Private)
		copy(dAtA[i:], m.Private)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Private)))
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Decimal64SlicePB) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decimal64SlicePB) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decimal64SlicePB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slice) > 0 {
		for iNdEx := len(m.Slice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Slice[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Slice[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Decimal128SlicePB) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decimal128SlicePB) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decimal128SlicePB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slice) > 0 {
		for iNdEx := len(m.Slice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Slice[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Slice[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Decimal64Median) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decimal64Median) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decimal64Median) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vals) > 0 {
		for iNdEx := len(m.Vals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Vals[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Vals[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Decimal128Median) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decimal128Median) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decimal128Median) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vals) > 0 {
		for iNdEx := len(m.Vals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Vals[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Vals[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EncodeVariance) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sum) > 0 {
		n += 1 + sovTypes(uint64(len(m.Sum)*8)) + len(m.Sum)*8
	}
	if len(m.Counts) > 0 {
		n += 1 + sovTypes(uint64(len(m.Counts)*8)) + len(m.Counts)*8
	}
	return n
}

func (m *EncodeDecimalV) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sum) > 0 {
		for _, e := range m.Sum {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Counts) > 0 {
		l = 0
		for _, e := range m.Counts {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *VariancePB) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sum) > 0 {
		n += 1 + sovTypes(uint64(len(m.Sum)*8)) + len(m.Sum)*8
	}
	if len(m.Counts) > 0 {
		n += 1 + sovTypes(uint64(len(m.Counts)*8)) + len(m.Counts)*8
	}
	return n
}

func (m *VD64) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sum) > 0 {
		for _, e := range m.Sum {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Counts) > 0 {
		l = 0
		for _, e := range m.Counts {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	l = m.Typ.ProtoSize()
	n += 1 + l + sovTypes(uint64(l))
	if m.ScaleMul != 0 {
		n += 1 + sovTypes(uint64(m.ScaleMul))
	}
	if m.ScaleDiv != 0 {
		n += 1 + sovTypes(uint64(m.ScaleDiv))
	}
	if m.ScaleMulDiv != 0 {
		n += 1 + sovTypes(uint64(m.ScaleMulDiv))
	}
	if m.ScaleDivMul != 0 {
		n += 1 + sovTypes(uint64(m.ScaleDivMul))
	}
	return n
}

func (m *VD128) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sum) > 0 {
		for _, e := range m.Sum {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Counts) > 0 {
		l = 0
		for _, e := range m.Counts {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	l = m.Typ.ProtoSize()
	n += 1 + l + sovTypes(uint64(l))
	if m.ScaleMul != 0 {
		n += 1 + sovTypes(uint64(m.ScaleMul))
	}
	if m.ScaleDiv != 0 {
		n += 1 + sovTypes(uint64(m.ScaleDiv))
	}
	if m.ScaleMulDiv != 0 {
		n += 1 + sovTypes(uint64(m.ScaleMulDiv))
	}
	if m.ScaleDivMul != 0 {
		n += 1 + sovTypes(uint64(m.ScaleDivMul))
	}
	return n
}

func (m *EncodeAgg) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovTypes(uint64(m.Op))
	}
	l = len(m.Private)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Es) > 0 {
		n += 1 + sovTypes(uint64(len(m.Es))) + len(m.Es)*1
	}
	l = len(m.Da)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InputTypes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OutputType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IsCount {
		n += 2
	}
	return n
}

func (m *EncodeAggDistinctPB) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovTypes(uint64(m.Op))
	}
	l = len(m.Private)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Es) > 0 {
		n += 1 + sovTypes(uint64(len(m.Es))) + len(m.Es)*1
	}
	l = len(m.Da)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.InputTypes) > 0 {
		for _, e := range m.InputTypes {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = m.OutputType.ProtoSize()
	n += 1 + l + sovTypes(uint64(l))
	if m.IsCount {
		n += 2
	}
	return n
}

func (m *Decimal64SlicePB) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Slice) > 0 {
		for _, e := range m.Slice {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Decimal128SlicePB) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Slice) > 0 {
		for _, e := range m.Slice {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Decimal64Median) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vals) > 0 {
		for _, e := range m.Vals {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Decimal128Median) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vals) > 0 {
		for _, e := range m.Vals {
			l = e.ProtoSize()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EncodeVariance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodeVariance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodeVariance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Sum = append(m.Sum, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Sum) == 0 {
					m.Sum = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Sum = append(m.Sum, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Counts = append(m.Counts, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Counts) == 0 {
					m.Counts = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Counts = append(m.Counts, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodeDecimalV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodeDecimalV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodeDecimalV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Decimal128
			m.Sum = append(m.Sum, v)
			if err := m.Sum[len(m.Sum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Counts = append(m.Counts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Counts) == 0 {
					m.Counts = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Counts = append(m.Counts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VariancePB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VariancePB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VariancePB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Sum = append(m.Sum, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Sum) == 0 {
					m.Sum = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Sum = append(m.Sum, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Counts = append(m.Counts, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Counts) == 0 {
					m.Counts = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Counts = append(m.Counts, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VD64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VD64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VD64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Decimal128
			m.Sum = append(m.Sum, v)
			if err := m.Sum[len(m.Sum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Counts = append(m.Counts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Counts) == 0 {
					m.Counts = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Counts = append(m.Counts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Typ.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleMul", wireType)
			}
			m.ScaleMul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleMul |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleDiv", wireType)
			}
			m.ScaleDiv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleDiv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleMulDiv", wireType)
			}
			m.ScaleMulDiv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleMulDiv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleDivMul", wireType)
			}
			m.ScaleDivMul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleDivMul |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VD128) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VD128: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VD128: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Decimal128
			m.Sum = append(m.Sum, v)
			if err := m.Sum[len(m.Sum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Counts = append(m.Counts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Counts) == 0 {
					m.Counts = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Counts = append(m.Counts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Typ.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleMul", wireType)
			}
			m.ScaleMul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleMul |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleDiv", wireType)
			}
			m.ScaleDiv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleDiv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleMulDiv", wireType)
			}
			m.ScaleMulDiv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleMulDiv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleDivMul", wireType)
			}
			m.ScaleDivMul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleDivMul |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodeAgg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodeAgg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodeAgg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Private = append(m.Private[:0], dAtA[iNdEx:postIndex]...)
			if m.Private == nil {
				m.Private = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Es = append(m.Es, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Es) == 0 {
					m.Es = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Es = append(m.Es, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Es", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Da", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Da = append(m.Da[:0], dAtA[iNdEx:postIndex]...)
			if m.Da == nil {
				m.Da = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputTypes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputTypes = append(m.InputTypes[:0], dAtA[iNdEx:postIndex]...)
			if m.InputTypes == nil {
				m.InputTypes = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputType = append(m.OutputType[:0], dAtA[iNdEx:postIndex]...)
			if m.OutputType == nil {
				m.OutputType = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodeAggDistinctPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodeAggDistinctPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodeAggDistinctPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Private = append(m.Private[:0], dAtA[iNdEx:postIndex]...)
			if m.Private == nil {
				m.Private = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Es = append(m.Es, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Es) == 0 {
					m.Es = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Es = append(m.Es, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Es", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Da", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Da = append(m.Da[:0], dAtA[iNdEx:postIndex]...)
			if m.Da == nil {
				m.Da = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputTypes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Type
			m.InputTypes = append(m.InputTypes, v)
			if err := m.InputTypes[len(m.InputTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutputType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Decimal64SlicePB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decimal64SlicePB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decimal64SlicePB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Decimal64
			m.Slice = append(m.Slice, v)
			if err := m.Slice[len(m.Slice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Decimal128SlicePB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decimal128SlicePB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decimal128SlicePB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Decimal128
			m.Slice = append(m.Slice, v)
			if err := m.Slice[len(m.Slice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Decimal64Median) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decimal64Median: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decimal64Median: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vals", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v decimal64Slice
			m.Vals = append(m.Vals, v)
			if err := m.Vals[len(m.Vals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Decimal128Median) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decimal128Median: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decimal128Median: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vals", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v decimal128Slice
			m.Vals = append(m.Vals, v)
			if err := m.Vals[len(m.Vals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
