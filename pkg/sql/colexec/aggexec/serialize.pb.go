// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: serialize.proto

package aggexec

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_matrixorigin_matrixone_pkg_container_types "github.com/matrixorigin/matrixone/pkg/container/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EncodeBasicInfo struct {
	Id                   int64                                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsDistinct           bool                                                         `protobuf:"varint,2,opt,name=is_distinct,json=isDistinct,proto3" json:"is_distinct,omitempty"`
	NullEmpty            bool                                                         `protobuf:"varint,3,opt,name=null_empty,json=nullEmpty,proto3" json:"null_empty,omitempty"`
	Args                 []github_com_matrixorigin_matrixone_pkg_container_types.Type `protobuf:"bytes,4,rep,name=args,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Type" json:"args"`
	Ret                  github_com_matrixorigin_matrixone_pkg_container_types.Type   `protobuf:"bytes,5,opt,name=ret,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Type" json:"ret"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *EncodeBasicInfo) Reset()         { *m = EncodeBasicInfo{} }
func (m *EncodeBasicInfo) String() string { return proto.CompactTextString(m) }
func (*EncodeBasicInfo) ProtoMessage()    {}
func (*EncodeBasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a7c2bf0e2dbbf4, []int{0}
}
func (m *EncodeBasicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodeBasicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodeBasicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodeBasicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeBasicInfo.Merge(m, src)
}
func (m *EncodeBasicInfo) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodeBasicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeBasicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeBasicInfo proto.InternalMessageInfo

func (m *EncodeBasicInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EncodeBasicInfo) GetIsDistinct() bool {
	if m != nil {
		return m.IsDistinct
	}
	return false
}

func (m *EncodeBasicInfo) GetNullEmpty() bool {
	if m != nil {
		return m.NullEmpty
	}
	return false
}

type EncodeAgg struct {
	Info                 *EncodeBasicInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Result               []byte           `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Groups               [][]byte         `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EncodeAgg) Reset()         { *m = EncodeAgg{} }
func (m *EncodeAgg) String() string { return proto.CompactTextString(m) }
func (*EncodeAgg) ProtoMessage()    {}
func (*EncodeAgg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a7c2bf0e2dbbf4, []int{1}
}
func (m *EncodeAgg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodeAgg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodeAgg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodeAgg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodeAgg.Merge(m, src)
}
func (m *EncodeAgg) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodeAgg) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodeAgg.DiscardUnknown(m)
}

var xxx_messageInfo_EncodeAgg proto.InternalMessageInfo

func (m *EncodeAgg) GetInfo() *EncodeBasicInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *EncodeAgg) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *EncodeAgg) GetGroups() [][]byte {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*EncodeBasicInfo)(nil), "aggexec.EncodeBasicInfo")
	proto.RegisterType((*EncodeAgg)(nil), "aggexec.EncodeAgg")
}

func init() { proto.RegisterFile("serialize.proto", fileDescriptor_f1a7c2bf0e2dbbf4) }

var fileDescriptor_f1a7c2bf0e2dbbf4 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xeb, 0xa4, 0xb7, 0x97, 0xba, 0x15, 0x45, 0x1e, 0x90, 0x85, 0x44, 0x1a, 0x75, 0xea,
	0x00, 0x89, 0x04, 0x1b, 0x1b, 0x11, 0x1d, 0x58, 0xa3, 0x8a, 0xb5, 0x4a, 0x13, 0xd7, 0x1c, 0x91,
	0xda, 0x96, 0xed, 0x48, 0x2d, 0x2f, 0xc1, 0x2b, 0xf0, 0x38, 0x1d, 0x99, 0x19, 0x2a, 0x54, 0x5e,
	0x04, 0xc5, 0x09, 0x12, 0x62, 0x66, 0xf3, 0xf7, 0x1f, 0xfb, 0x97, 0xf5, 0x1d, 0x3c, 0x32, 0x4c,
	0x43, 0x56, 0xc2, 0x33, 0x8b, 0x94, 0x96, 0x56, 0x92, 0xff, 0x19, 0xe7, 0x6c, 0xc3, 0xf2, 0xb3,
	0x4b, 0x0e, 0xf6, 0xb1, 0x5a, 0x46, 0xb9, 0x5c, 0xc7, 0x5c, 0x72, 0x19, 0xbb, 0xf9, 0xb2, 0x5a,
	0x39, 0x72, 0xe0, 0x4e, 0xcd, 0xbb, 0xc9, 0x8b, 0x87, 0x47, 0x33, 0x91, 0xcb, 0x82, 0x25, 0x99,
	0x81, 0xfc, 0x5e, 0xac, 0x24, 0x39, 0xc6, 0x1e, 0x14, 0x14, 0x85, 0x68, 0xea, 0xa7, 0x1e, 0x14,
	0x64, 0x8c, 0x07, 0x60, 0x16, 0x05, 0x18, 0x0b, 0x22, 0xb7, 0xd4, 0x0b, 0xd1, 0xf4, 0x28, 0xc5,
	0x60, 0xee, 0xda, 0x84, 0x9c, 0x63, 0x2c, 0xaa, 0xb2, 0x5c, 0xb0, 0xb5, 0xb2, 0x5b, 0xea, 0xbb,
	0x79, 0xbf, 0x4e, 0x66, 0x75, 0x40, 0x1e, 0x70, 0x37, 0xd3, 0xdc, 0xd0, 0x6e, 0xe8, 0x4f, 0x87,
	0x49, 0xb2, 0xdb, 0x8f, 0x3b, 0xef, 0xfb, 0xf1, 0xcd, 0x8f, 0x8f, 0xae, 0x33, 0xab, 0x61, 0x23,
	0x35, 0x70, 0x10, 0xdf, 0x20, 0x58, 0xac, 0x9e, 0x78, 0x9c, 0x4b, 0x61, 0x33, 0x10, 0x4c, 0xc7,
	0x76, 0xab, 0x98, 0x89, 0xe6, 0x5b, 0xc5, 0x52, 0xd7, 0x47, 0xe6, 0xd8, 0xd7, 0xcc, 0xd2, 0x7f,
	0x21, 0xfa, 0xa3, 0xda, 0xba, 0x6e, 0x02, 0xb8, 0xdf, 0x08, 0xb9, 0xe5, 0x9c, 0x5c, 0xe0, 0x2e,
	0x88, 0x95, 0x74, 0x32, 0x06, 0x57, 0x34, 0x6a, 0x2d, 0x47, 0xbf, 0x94, 0xa5, 0xee, 0x16, 0x39,
	0xc5, 0x3d, 0xcd, 0x4c, 0x55, 0x36, 0x8e, 0x86, 0x69, 0x4b, 0x75, 0xce, 0xb5, 0xac, 0x94, 0xa1,
	0x7e, 0xad, 0x20, 0x6d, 0x29, 0x39, 0xd9, 0x1d, 0x02, 0xf4, 0x76, 0x08, 0xd0, 0xc7, 0x21, 0xe8,
	0xbc, 0x7e, 0x06, 0x68, 0xd9, 0x73, 0x5b, 0xb9, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x63, 0x22,
	0xea, 0xd5, 0xe0, 0x01, 0x00, 0x00,
}

func (m *EncodeBasicInfo) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodeBasicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodeBasicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size := m.Ret.ProtoSize()
		i -= size
		if _, err := m.Ret.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSerialize(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Args[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Args[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintSerialize(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NullEmpty {
		i--
		if m.NullEmpty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsDistinct {
		i--
		if m.IsDistinct {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSerialize(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncodeAgg) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodeAgg) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodeAgg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Groups[iNdEx])
			copy(dAtA[i:], m.Groups[iNdEx])
			i = encodeVarintSerialize(dAtA, i, uint64(len(m.Groups[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintSerialize(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSerialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSerialize(dAtA []byte, offset int, v uint64) int {
	offset -= sovSerialize(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EncodeBasicInfo) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSerialize(uint64(m.Id))
	}
	if m.IsDistinct {
		n += 2
	}
	if m.NullEmpty {
		n += 2
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.ProtoSize()
			n += 1 + l + sovSerialize(uint64(l))
		}
	}
	l = m.Ret.ProtoSize()
	n += 1 + l + sovSerialize(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EncodeAgg) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.ProtoSize()
		n += 1 + l + sovSerialize(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovSerialize(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, b := range m.Groups {
			l = len(b)
			n += 1 + l + sovSerialize(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSerialize(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSerialize(x uint64) (n int) {
	return sovSerialize(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EncodeBasicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodeBasicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodeBasicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDistinct", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDistinct = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullEmpty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NullEmpty = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Type
			m.Args = append(m.Args, v)
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSerialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSerialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodeAgg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodeAgg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodeAgg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &EncodeBasicInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, make([]byte, postIndex-iNdEx))
			copy(m.Groups[len(m.Groups)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSerialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSerialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSerialize(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSerialize
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSerialize
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSerialize
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSerialize
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSerialize        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSerialize          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSerialize = fmt.Errorf("proto: unexpected end of group")
)
