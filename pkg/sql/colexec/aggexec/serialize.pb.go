// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: serialize.proto

package aggexec

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_matrixorigin_matrixone_pkg_container_types "github.com/matrixorigin/matrixone/pkg/container/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EncodedAggExecType int32

const (
	EncodedAggExecType_single_fixed_fixed     EncodedAggExecType = 0
	EncodedAggExecType_single_fixed_var       EncodedAggExecType = 1
	EncodedAggExecType_single_var_fixed       EncodedAggExecType = 2
	EncodedAggExecType_single_var_var         EncodedAggExecType = 3
	EncodedAggExecType_multi_return_fixed     EncodedAggExecType = 4
	EncodedAggExecType_multi_return_var       EncodedAggExecType = 5
	EncodedAggExecType_special_group_concat   EncodedAggExecType = 6
	EncodedAggExecType_special_count_column   EncodedAggExecType = 7
	EncodedAggExecType_special_count_star     EncodedAggExecType = 8
	EncodedAggExecType_special_approx_count   EncodedAggExecType = 9
	EncodedAggExecType_special_median         EncodedAggExecType = 10
	EncodedAggExecType_special_cluster_center EncodedAggExecType = 11
	EncodedAggExecType_single_window          EncodedAggExecType = 12
)

var EncodedAggExecType_name = map[int32]string{
	0:  "single_fixed_fixed",
	1:  "single_fixed_var",
	2:  "single_var_fixed",
	3:  "single_var_var",
	4:  "multi_return_fixed",
	5:  "multi_return_var",
	6:  "special_group_concat",
	7:  "special_count_column",
	8:  "special_count_star",
	9:  "special_approx_count",
	10: "special_median",
	11: "special_cluster_center",
	12: "single_window",
}

var EncodedAggExecType_value = map[string]int32{
	"single_fixed_fixed":     0,
	"single_fixed_var":       1,
	"single_var_fixed":       2,
	"single_var_var":         3,
	"multi_return_fixed":     4,
	"multi_return_var":       5,
	"special_group_concat":   6,
	"special_count_column":   7,
	"special_count_star":     8,
	"special_approx_count":   9,
	"special_median":         10,
	"special_cluster_center": 11,
	"single_window":          12,
}

func (x EncodedAggExecType) String() string {
	return proto.EnumName(EncodedAggExecType_name, int32(x))
}

func (EncodedAggExecType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1a7c2bf0e2dbbf4, []int{0}
}

type EncodedBasicInfo struct {
	Id                   int64                                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsDistinct           bool                                                         `protobuf:"varint,2,opt,name=is_distinct,json=isDistinct,proto3" json:"is_distinct,omitempty"`
	NullEmpty            bool                                                         `protobuf:"varint,3,opt,name=null_empty,json=nullEmpty,proto3" json:"null_empty,omitempty"`
	Args                 []github_com_matrixorigin_matrixone_pkg_container_types.Type `protobuf:"bytes,4,rep,name=args,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Type" json:"args"`
	Ret                  github_com_matrixorigin_matrixone_pkg_container_types.Type   `protobuf:"bytes,5,opt,name=ret,proto3,customtype=github.com/matrixorigin/matrixone/pkg/container/types.Type" json:"ret"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *EncodedBasicInfo) Reset()         { *m = EncodedBasicInfo{} }
func (m *EncodedBasicInfo) String() string { return proto.CompactTextString(m) }
func (*EncodedBasicInfo) ProtoMessage()    {}
func (*EncodedBasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a7c2bf0e2dbbf4, []int{0}
}
func (m *EncodedBasicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodedBasicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodedBasicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodedBasicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodedBasicInfo.Merge(m, src)
}
func (m *EncodedBasicInfo) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodedBasicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodedBasicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EncodedBasicInfo proto.InternalMessageInfo

func (m *EncodedBasicInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EncodedBasicInfo) GetIsDistinct() bool {
	if m != nil {
		return m.IsDistinct
	}
	return false
}

func (m *EncodedBasicInfo) GetNullEmpty() bool {
	if m != nil {
		return m.NullEmpty
	}
	return false
}

type EncodedAgg struct {
	ExecType             EncodedAggExecType `protobuf:"varint,1,opt,name=exec_type,json=execType,proto3,enum=aggexec.EncodedAggExecType" json:"exec_type,omitempty"`
	Info                 *EncodedBasicInfo  `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Result               []byte             `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Groups               [][]byte           `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EncodedAgg) Reset()         { *m = EncodedAgg{} }
func (m *EncodedAgg) String() string { return proto.CompactTextString(m) }
func (*EncodedAgg) ProtoMessage()    {}
func (*EncodedAgg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a7c2bf0e2dbbf4, []int{1}
}
func (m *EncodedAgg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodedAgg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodedAgg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodedAgg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodedAgg.Merge(m, src)
}
func (m *EncodedAgg) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodedAgg) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodedAgg.DiscardUnknown(m)
}

var xxx_messageInfo_EncodedAgg proto.InternalMessageInfo

func (m *EncodedAgg) GetExecType() EncodedAggExecType {
	if m != nil {
		return m.ExecType
	}
	return EncodedAggExecType_single_fixed_fixed
}

func (m *EncodedAgg) GetInfo() *EncodedBasicInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *EncodedAgg) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *EncodedAgg) GetGroups() [][]byte {
	if m != nil {
		return m.Groups
	}
	return nil
}

type EncodedAggContext struct {
	HasCommonContext     bool     `protobuf:"varint,1,opt,name=hasCommonContext,proto3" json:"hasCommonContext,omitempty"`
	HasGroupContext      bool     `protobuf:"varint,2,opt,name=hasGroupContext,proto3" json:"hasGroupContext,omitempty"`
	CommonContext        []byte   `protobuf:"bytes,3,opt,name=commonContext,proto3" json:"commonContext,omitempty"`
	GroupContext         [][]byte `protobuf:"bytes,4,rep,name=groupContext,proto3" json:"groupContext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncodedAggContext) Reset()         { *m = EncodedAggContext{} }
func (m *EncodedAggContext) String() string { return proto.CompactTextString(m) }
func (*EncodedAggContext) ProtoMessage()    {}
func (*EncodedAggContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a7c2bf0e2dbbf4, []int{2}
}
func (m *EncodedAggContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodedAggContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodedAggContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodedAggContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodedAggContext.Merge(m, src)
}
func (m *EncodedAggContext) XXX_Size() int {
	return m.ProtoSize()
}
func (m *EncodedAggContext) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodedAggContext.DiscardUnknown(m)
}

var xxx_messageInfo_EncodedAggContext proto.InternalMessageInfo

func (m *EncodedAggContext) GetHasCommonContext() bool {
	if m != nil {
		return m.HasCommonContext
	}
	return false
}

func (m *EncodedAggContext) GetHasGroupContext() bool {
	if m != nil {
		return m.HasGroupContext
	}
	return false
}

func (m *EncodedAggContext) GetCommonContext() []byte {
	if m != nil {
		return m.CommonContext
	}
	return nil
}

func (m *EncodedAggContext) GetGroupContext() [][]byte {
	if m != nil {
		return m.GroupContext
	}
	return nil
}

func init() {
	proto.RegisterEnum("aggexec.EncodedAggExecType", EncodedAggExecType_name, EncodedAggExecType_value)
	proto.RegisterType((*EncodedBasicInfo)(nil), "aggexec.EncodedBasicInfo")
	proto.RegisterType((*EncodedAgg)(nil), "aggexec.EncodedAgg")
	proto.RegisterType((*EncodedAggContext)(nil), "aggexec.EncodedAggContext")
}

func init() { proto.RegisterFile("serialize.proto", fileDescriptor_f1a7c2bf0e2dbbf4) }

var fileDescriptor_f1a7c2bf0e2dbbf4 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x41, 0x4f, 0xdb, 0x3e,
	0x18, 0xc6, 0x49, 0x5b, 0xa0, 0xbc, 0x14, 0x30, 0x16, 0x42, 0xf9, 0xf3, 0xd7, 0x4a, 0x55, 0xed,
	0x50, 0x21, 0xd1, 0x4a, 0xec, 0x32, 0xed, 0xb6, 0x32, 0x34, 0xed, 0x1a, 0xa1, 0x5d, 0x23, 0xe3,
	0xb8, 0xc6, 0x5a, 0x62, 0x47, 0xb6, 0x03, 0x61, 0x9f, 0x62, 0x1f, 0x61, 0x97, 0x7d, 0x82, 0x7d,
	0x84, 0x5d, 0x38, 0xee, 0xbc, 0x03, 0x9a, 0xba, 0x2f, 0x32, 0xc5, 0x31, 0x90, 0xc0, 0x75, 0x97,
	0xca, 0xef, 0xef, 0x7d, 0xfc, 0xf4, 0xc9, 0x13, 0x05, 0x76, 0x0c, 0xd3, 0x82, 0xa4, 0xe2, 0x33,
	0x9b, 0xe6, 0x5a, 0x59, 0x85, 0xd7, 0x09, 0xe7, 0xac, 0x64, 0xf4, 0xe0, 0x98, 0x0b, 0x7b, 0x59,
	0x5c, 0x4c, 0xa9, 0xca, 0x66, 0x5c, 0x71, 0x35, 0x73, 0xfb, 0x8b, 0x62, 0xe1, 0x26, 0x37, 0xb8,
	0x53, 0x7d, 0x6f, 0xfc, 0xa5, 0x03, 0xe8, 0x4c, 0x52, 0x95, 0xb0, 0x64, 0x4e, 0x8c, 0xa0, 0x1f,
	0xe4, 0x42, 0xe1, 0x6d, 0xe8, 0x88, 0x24, 0x0c, 0x46, 0xc1, 0xa4, 0x1b, 0x75, 0x44, 0x82, 0x0f,
	0x61, 0x53, 0x98, 0x38, 0x11, 0xc6, 0x0a, 0x49, 0x6d, 0xd8, 0x19, 0x05, 0x93, 0x7e, 0x04, 0xc2,
	0xbc, 0xf3, 0x04, 0xbf, 0x00, 0x90, 0x45, 0x9a, 0xc6, 0x2c, 0xcb, 0xed, 0x4d, 0xd8, 0x75, 0xfb,
	0x8d, 0x8a, 0x9c, 0x55, 0x00, 0x7f, 0x84, 0x1e, 0xd1, 0xdc, 0x84, 0xbd, 0x51, 0x77, 0x32, 0x98,
	0xcf, 0x6f, 0xef, 0x0e, 0x57, 0x7e, 0xdd, 0x1d, 0xbe, 0x69, 0x24, 0xcd, 0x88, 0xd5, 0xa2, 0x54,
	0x5a, 0x70, 0x21, 0xef, 0x07, 0xc9, 0x66, 0xf9, 0x27, 0x3e, 0xa3, 0x4a, 0x5a, 0x22, 0x24, 0xd3,
	0x33, 0x7b, 0x93, 0x33, 0x33, 0x3d, 0xbf, 0xc9, 0x59, 0xe4, 0xfc, 0xf0, 0x39, 0x74, 0x35, 0xb3,
	0xe1, 0xea, 0x28, 0xf8, 0x47, 0xb6, 0x95, 0xdd, 0xf8, 0x5b, 0x00, 0xe0, 0x2b, 0x79, 0xcb, 0x39,
	0x7e, 0x0d, 0x1b, 0x55, 0xb1, 0x71, 0x25, 0x73, 0x9d, 0x6c, 0x9f, 0xfc, 0x3f, 0xf5, 0x6d, 0x4f,
	0x1f, 0x75, 0x67, 0x25, 0xa3, 0xce, 0xa3, 0xcf, 0xfc, 0x09, 0x1f, 0x43, 0x4f, 0xc8, 0x85, 0x72,
	0x7d, 0x6d, 0x9e, 0xfc, 0xf7, 0xf4, 0xd2, 0x43, 0xdf, 0x91, 0x93, 0xe1, 0x7d, 0x58, 0xd3, 0xcc,
	0x14, 0xa9, 0x75, 0x05, 0x0e, 0x22, 0x3f, 0x55, 0x9c, 0x6b, 0x55, 0xe4, 0xbe, 0xbf, 0xc8, 0x4f,
	0xe3, 0xef, 0x01, 0xec, 0x3e, 0xfe, 0xff, 0xa9, 0x92, 0x96, 0x95, 0x16, 0x1f, 0x01, 0xba, 0x24,
	0xe6, 0x54, 0x65, 0x99, 0x92, 0x9e, 0xb9, 0xd4, 0xfd, 0xe8, 0x19, 0xc7, 0x13, 0xd8, 0xb9, 0x24,
	0xe6, 0x7d, 0x65, 0x77, 0x2f, 0xad, 0xdf, 0xed, 0x53, 0x8c, 0x5f, 0xc2, 0x16, 0x6d, 0x59, 0xd6,
	0x11, 0xdb, 0x10, 0x8f, 0x61, 0xc0, 0x9b, 0x66, 0x75, 0xde, 0x16, 0x3b, 0xfa, 0xd1, 0x01, 0xfc,
	0xbc, 0x35, 0xbc, 0x0f, 0xd8, 0x08, 0xc9, 0x53, 0x16, 0x2f, 0x44, 0xc9, 0x92, 0xfa, 0x17, 0xad,
	0xe0, 0x3d, 0x40, 0x2d, 0x7e, 0x45, 0x34, 0x0a, 0x1a, 0xf4, 0x8a, 0x68, 0xaf, 0xed, 0x60, 0x0c,
	0xdb, 0x0d, 0x5a, 0x29, 0xbb, 0x95, 0x6f, 0x56, 0xa4, 0x56, 0xc4, 0x9a, 0xd9, 0x42, 0x4b, 0xaf,
	0xed, 0x55, 0x0e, 0x2d, 0x5e, 0xa9, 0x57, 0x71, 0x08, 0x7b, 0x26, 0x67, 0x54, 0x90, 0x34, 0x76,
	0xa1, 0x63, 0xaa, 0x24, 0x25, 0x16, 0xad, 0x35, 0x37, 0x54, 0x15, 0xd2, 0xc6, 0x54, 0xa5, 0x45,
	0x26, 0xd1, 0xba, 0x4b, 0xde, 0xda, 0x18, 0x4b, 0x34, 0xea, 0x37, 0x6f, 0x90, 0x3c, 0xd7, 0xaa,
	0xac, 0xd7, 0x68, 0xc3, 0xe5, 0xf4, 0x9b, 0x8c, 0x25, 0x82, 0x48, 0x04, 0xf8, 0x00, 0xf6, 0x1f,
	0x5c, 0xd2, 0xc2, 0x58, 0xa6, 0x63, 0xca, 0xa4, 0x65, 0x1a, 0x6d, 0xe2, 0x5d, 0xd8, 0xf2, 0xcf,
	0x75, 0x2d, 0x64, 0xa2, 0xae, 0xd1, 0x60, 0x8e, 0x6e, 0x97, 0xc3, 0xe0, 0xe7, 0x72, 0x18, 0xfc,
	0x5e, 0x0e, 0x57, 0xbe, 0xfe, 0x19, 0x06, 0x17, 0x6b, 0xee, 0x7b, 0x7e, 0xf5, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x54, 0x72, 0xa2, 0x29, 0x1a, 0x04, 0x00, 0x00,
}

func (m *EncodedBasicInfo) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodedBasicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodedBasicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size := m.Ret.ProtoSize()
		i -= size
		if _, err := m.Ret.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSerialize(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Args[iNdEx].ProtoSize()
				i -= size
				if _, err := m.Args[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintSerialize(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NullEmpty {
		i--
		if m.NullEmpty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsDistinct {
		i--
		if m.IsDistinct {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSerialize(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncodedAgg) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodedAgg) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodedAgg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Groups[iNdEx])
			copy(dAtA[i:], m.Groups[iNdEx])
			i = encodeVarintSerialize(dAtA, i, uint64(len(m.Groups[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintSerialize(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSerialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExecType != 0 {
		i = encodeVarintSerialize(dAtA, i, uint64(m.ExecType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncodedAggContext) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodedAggContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodedAggContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupContext) > 0 {
		for iNdEx := len(m.GroupContext) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GroupContext[iNdEx])
			copy(dAtA[i:], m.GroupContext[iNdEx])
			i = encodeVarintSerialize(dAtA, i, uint64(len(m.GroupContext[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CommonContext) > 0 {
		i -= len(m.CommonContext)
		copy(dAtA[i:], m.CommonContext)
		i = encodeVarintSerialize(dAtA, i, uint64(len(m.CommonContext)))
		i--
		dAtA[i] = 0x1a
	}
	if m.HasGroupContext {
		i--
		if m.HasGroupContext {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HasCommonContext {
		i--
		if m.HasCommonContext {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSerialize(dAtA []byte, offset int, v uint64) int {
	offset -= sovSerialize(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EncodedBasicInfo) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSerialize(uint64(m.Id))
	}
	if m.IsDistinct {
		n += 2
	}
	if m.NullEmpty {
		n += 2
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.ProtoSize()
			n += 1 + l + sovSerialize(uint64(l))
		}
	}
	l = m.Ret.ProtoSize()
	n += 1 + l + sovSerialize(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EncodedAgg) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecType != 0 {
		n += 1 + sovSerialize(uint64(m.ExecType))
	}
	if m.Info != nil {
		l = m.Info.ProtoSize()
		n += 1 + l + sovSerialize(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovSerialize(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, b := range m.Groups {
			l = len(b)
			n += 1 + l + sovSerialize(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EncodedAggContext) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasCommonContext {
		n += 2
	}
	if m.HasGroupContext {
		n += 2
	}
	l = len(m.CommonContext)
	if l > 0 {
		n += 1 + l + sovSerialize(uint64(l))
	}
	if len(m.GroupContext) > 0 {
		for _, b := range m.GroupContext {
			l = len(b)
			n += 1 + l + sovSerialize(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSerialize(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSerialize(x uint64) (n int) {
	return sovSerialize(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EncodedBasicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodedBasicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodedBasicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDistinct", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDistinct = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullEmpty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NullEmpty = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_matrixorigin_matrixone_pkg_container_types.Type
			m.Args = append(m.Args, v)
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSerialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSerialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodedAgg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodedAgg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodedAgg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecType", wireType)
			}
			m.ExecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecType |= EncodedAggExecType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &EncodedBasicInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, make([]byte, postIndex-iNdEx))
			copy(m.Groups[len(m.Groups)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSerialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSerialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodedAggContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodedAggContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodedAggContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasCommonContext", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasCommonContext = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasGroupContext", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasGroupContext = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonContext = append(m.CommonContext[:0], dAtA[iNdEx:postIndex]...)
			if m.CommonContext == nil {
				m.CommonContext = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSerialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSerialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupContext = append(m.GroupContext, make([]byte, postIndex-iNdEx))
			copy(m.GroupContext[len(m.GroupContext)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSerialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSerialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSerialize(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSerialize
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSerialize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSerialize
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSerialize
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSerialize
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSerialize        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSerialize          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSerialize = fmt.Errorf("proto: unexpected end of group")
)
