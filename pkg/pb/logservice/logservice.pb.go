// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logservice.proto

package logservice

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MethodType int32

const (
	MethodType_CREATE       MethodType = 0
	MethodType_DESTROY      MethodType = 1
	MethodType_APPEND       MethodType = 2
	MethodType_READ         MethodType = 3
	MethodType_TRUNCATE     MethodType = 4
	MethodType_GET_TRUNCATE MethodType = 5
	MethodType_CONNECT      MethodType = 6
	MethodType_CONNECT_RO   MethodType = 7
)

var MethodType_name = map[int32]string{
	0: "CREATE",
	1: "DESTROY",
	2: "APPEND",
	3: "READ",
	4: "TRUNCATE",
	5: "GET_TRUNCATE",
	6: "CONNECT",
	7: "CONNECT_RO",
}

var MethodType_value = map[string]int32{
	"CREATE":       0,
	"DESTROY":      1,
	"APPEND":       2,
	"READ":         3,
	"TRUNCATE":     4,
	"GET_TRUNCATE": 5,
	"CONNECT":      6,
	"CONNECT_RO":   7,
}

func (x MethodType) String() string {
	return proto.EnumName(MethodType_name, int32(x))
}

func (MethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{0}
}

type ErrorCode int32

const (
	ErrorCode_NoError               ErrorCode = 0
	ErrorCode_Timeout               ErrorCode = 1
	ErrorCode_Canceled              ErrorCode = 2
	ErrorCode_InvalidShard          ErrorCode = 3
	ErrorCode_InvalidTimeout        ErrorCode = 4
	ErrorCode_InvalidPayload        ErrorCode = 5
	ErrorCode_InvalidPayloadSize    ErrorCode = 6
	ErrorCode_Rejected              ErrorCode = 7
	ErrorCode_ShardNotReady         ErrorCode = 8
	ErrorCode_SystemClosed          ErrorCode = 9
	ErrorCode_IndexAlreadyTruncated ErrorCode = 100
	ErrorCode_OutOfRange            ErrorCode = 101
	ErrorCode_NotLeaseHolder        ErrorCode = 102
	ErrorCode_OtherSystemError      ErrorCode = 1000
)

var ErrorCode_name = map[int32]string{
	0:    "NoError",
	1:    "Timeout",
	2:    "Canceled",
	3:    "InvalidShard",
	4:    "InvalidTimeout",
	5:    "InvalidPayload",
	6:    "InvalidPayloadSize",
	7:    "Rejected",
	8:    "ShardNotReady",
	9:    "SystemClosed",
	100:  "IndexAlreadyTruncated",
	101:  "OutOfRange",
	102:  "NotLeaseHolder",
	1000: "OtherSystemError",
}

var ErrorCode_value = map[string]int32{
	"NoError":               0,
	"Timeout":               1,
	"Canceled":              2,
	"InvalidShard":          3,
	"InvalidTimeout":        4,
	"InvalidPayload":        5,
	"InvalidPayloadSize":    6,
	"Rejected":              7,
	"ShardNotReady":         8,
	"SystemClosed":          9,
	"IndexAlreadyTruncated": 100,
	"OutOfRange":            101,
	"NotLeaseHolder":        102,
	"OtherSystemError":      1000,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{1}
}

// LogShardInfo contains information of a launched shard.
type LogShardInfo struct {
	ShardID uint64 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	// Replicas is a map of ReplicaID to LogStore UUID, it describe the member
	// replicas of the shard at the given Epoch.
	Replicas map[uint64]string `protobuf:"bytes,2,rep,name=Replicas,proto3" json:"Replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Epoch is the epoch value of the Shard, member replicas of the Shard can
	// change across epochs.
	Epoch uint64 `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	// LeaderID is the ReplicaID of the leader replica at the given term. When
	// LeaderID is 0, it means there is no leader or the leader is unknown.
	LeaderID uint64 `protobuf:"varint,4,opt,name=LeaderID,proto3" json:"LeaderID,omitempty"`
	// Term is the Raft term value.
	Term                 uint64   `protobuf:"varint,5,opt,name=Term,proto3" json:"Term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogShardInfo) Reset()         { *m = LogShardInfo{} }
func (m *LogShardInfo) String() string { return proto.CompactTextString(m) }
func (*LogShardInfo) ProtoMessage()    {}
func (*LogShardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{0}
}
func (m *LogShardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogShardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogShardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogShardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogShardInfo.Merge(m, src)
}
func (m *LogShardInfo) XXX_Size() int {
	return m.Size()
}
func (m *LogShardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogShardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogShardInfo proto.InternalMessageInfo

func (m *LogShardInfo) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *LogShardInfo) GetReplicas() map[uint64]string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *LogShardInfo) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *LogShardInfo) GetLeaderID() uint64 {
	if m != nil {
		return m.LeaderID
	}
	return 0
}

func (m *LogShardInfo) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// LogStoreHeartbeat is the periodic message sent to the HAKeeper by Log Stores.
type LogStoreHeartbeat struct {
	// UUID is the uuid of the Log Store.
	UUID           string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	RaftAddress    string `protobuf:"bytes,2,opt,name=RaftAddress,proto3" json:"RaftAddress,omitempty"`
	ServiceAddress string `protobuf:"bytes,3,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	GossipAddress  string `protobuf:"bytes,4,opt,name=GossipAddress,proto3" json:"GossipAddress,omitempty"`
	// Shards is a list of LogShardInfo instances collected on the specified
	// LogStore. Details in Shards are based on the local knowledge of each
	// replica running on the current LogStore, it may not be accurate or
	// update to date due to various reasons.
	Shards               []LogShardInfo `protobuf:"bytes,5,rep,name=Shards,proto3" json:"Shards"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LogStoreHeartbeat) Reset()         { *m = LogStoreHeartbeat{} }
func (m *LogStoreHeartbeat) String() string { return proto.CompactTextString(m) }
func (*LogStoreHeartbeat) ProtoMessage()    {}
func (*LogStoreHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{1}
}
func (m *LogStoreHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStoreHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStoreHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStoreHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStoreHeartbeat.Merge(m, src)
}
func (m *LogStoreHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *LogStoreHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStoreHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_LogStoreHeartbeat proto.InternalMessageInfo

func (m *LogStoreHeartbeat) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogStoreHeartbeat) GetRaftAddress() string {
	if m != nil {
		return m.RaftAddress
	}
	return ""
}

func (m *LogStoreHeartbeat) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *LogStoreHeartbeat) GetGossipAddress() string {
	if m != nil {
		return m.GossipAddress
	}
	return ""
}

func (m *LogStoreHeartbeat) GetShards() []LogShardInfo {
	if m != nil {
		return m.Shards
	}
	return nil
}

// DNShardInfo contains information of a launched DN shard.
type DNShardInfo struct {
	// ShardID uniquely identifies a DN shard. Each DN shard manages a Primary
	// Key range or hashed Primary Key value range.
	ShardID uint64 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	// ReplicaID uniquely identifies a DN shard instance. After repairing a
	// failed DN shard, a new DN shard instance is created with a new ReplicaID
	// value.
	ReplicaID            uint64   `protobuf:"varint,2,opt,name=ReplicaID,proto3" json:"ReplicaID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNShardInfo) Reset()         { *m = DNShardInfo{} }
func (m *DNShardInfo) String() string { return proto.CompactTextString(m) }
func (*DNShardInfo) ProtoMessage()    {}
func (*DNShardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{2}
}
func (m *DNShardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNShardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNShardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNShardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNShardInfo.Merge(m, src)
}
func (m *DNShardInfo) XXX_Size() int {
	return m.Size()
}
func (m *DNShardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DNShardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DNShardInfo proto.InternalMessageInfo

func (m *DNShardInfo) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *DNShardInfo) GetReplicaID() uint64 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

// DNStoreHeartbeat is the periodic message sent to the HAKeeper by DN stores.
type DNStoreHeartbeat struct {
	// UUID is the uuid of the DN Store.
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Shards is a list of DNShardInfo instances collected on the specified
	// DN store.
	Shards               []DNShardInfo `protobuf:"bytes,2,rep,name=Shards,proto3" json:"Shards"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DNStoreHeartbeat) Reset()         { *m = DNStoreHeartbeat{} }
func (m *DNStoreHeartbeat) String() string { return proto.CompactTextString(m) }
func (*DNStoreHeartbeat) ProtoMessage()    {}
func (*DNStoreHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{3}
}
func (m *DNStoreHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNStoreHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNStoreHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNStoreHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNStoreHeartbeat.Merge(m, src)
}
func (m *DNStoreHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *DNStoreHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_DNStoreHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_DNStoreHeartbeat proto.InternalMessageInfo

func (m *DNStoreHeartbeat) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DNStoreHeartbeat) GetShards() []DNShardInfo {
	if m != nil {
		return m.Shards
	}
	return nil
}

type LogRecord struct {
	Index                uint64   `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRecord) Reset()         { *m = LogRecord{} }
func (m *LogRecord) String() string { return proto.CompactTextString(m) }
func (*LogRecord) ProtoMessage()    {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{4}
}
func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return m.Size()
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Request struct {
	Method               MethodType `protobuf:"varint,1,opt,name=Method,proto3,enum=logservice.MethodType" json:"Method,omitempty"`
	Name                 string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ShardID              uint64     `protobuf:"varint,3,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Index                uint64     `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	MaxSize              uint64     `protobuf:"varint,5,opt,name=MaxSize,proto3" json:"MaxSize,omitempty"`
	Timeout              int64      `protobuf:"varint,6,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	DNShardID            uint64     `protobuf:"varint,7,opt,name=DNShardID,proto3" json:"DNShardID,omitempty"`
	DNID                 uint64     `protobuf:"varint,8,opt,name=DNID,proto3" json:"DNID,omitempty"`
	PayloadSize          uint64     `protobuf:"varint,9,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{5}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMethod() MethodType {
	if m != nil {
		return m.Method
	}
	return MethodType_CREATE
}

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Request) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Request) GetMaxSize() uint64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *Request) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Request) GetDNShardID() uint64 {
	if m != nil {
		return m.DNShardID
	}
	return 0
}

func (m *Request) GetDNID() uint64 {
	if m != nil {
		return m.DNID
	}
	return 0
}

func (m *Request) GetPayloadSize() uint64 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type Response struct {
	Method               MethodType `protobuf:"varint,1,opt,name=Method,proto3,enum=logservice.MethodType" json:"Method,omitempty"`
	ErrorCode            ErrorCode  `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=logservice.ErrorCode" json:"ErrorCode,omitempty"`
	ErrorMessage         string     `protobuf:"bytes,3,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	ShardID              uint64     `protobuf:"varint,4,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Index                uint64     `protobuf:"varint,5,opt,name=Index,proto3" json:"Index,omitempty"`
	LastIndex            uint64     `protobuf:"varint,6,opt,name=LastIndex,proto3" json:"LastIndex,omitempty"`
	PayloadSize          uint64     `protobuf:"varint,7,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{6}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMethod() MethodType {
	if m != nil {
		return m.Method
	}
	return MethodType_CREATE
}

func (m *Response) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ErrorCode_NoError
}

func (m *Response) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *Response) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Response) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Response) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

func (m *Response) GetPayloadSize() uint64 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type LogRecordResponse struct {
	Records              []LogRecord `protobuf:"bytes,1,rep,name=Records,proto3" json:"Records"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LogRecordResponse) Reset()         { *m = LogRecordResponse{} }
func (m *LogRecordResponse) String() string { return proto.CompactTextString(m) }
func (*LogRecordResponse) ProtoMessage()    {}
func (*LogRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{7}
}
func (m *LogRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecordResponse.Merge(m, src)
}
func (m *LogRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *LogRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecordResponse proto.InternalMessageInfo

func (m *LogRecordResponse) GetRecords() []LogRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterEnum("logservice.MethodType", MethodType_name, MethodType_value)
	proto.RegisterEnum("logservice.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*LogShardInfo)(nil), "logservice.LogShardInfo")
	proto.RegisterMapType((map[uint64]string)(nil), "logservice.LogShardInfo.ReplicasEntry")
	proto.RegisterType((*LogStoreHeartbeat)(nil), "logservice.LogStoreHeartbeat")
	proto.RegisterType((*DNShardInfo)(nil), "logservice.DNShardInfo")
	proto.RegisterType((*DNStoreHeartbeat)(nil), "logservice.DNStoreHeartbeat")
	proto.RegisterType((*LogRecord)(nil), "logservice.LogRecord")
	proto.RegisterType((*Request)(nil), "logservice.Request")
	proto.RegisterType((*Response)(nil), "logservice.Response")
	proto.RegisterType((*LogRecordResponse)(nil), "logservice.LogRecordResponse")
}

func init() { proto.RegisterFile("logservice.proto", fileDescriptor_fd1040c5381ab5a7) }

var fileDescriptor_fd1040c5381ab5a7 = []byte{
	// 858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6b, 0xe3, 0xc6,
	0x1b, 0x5e, 0xd9, 0xb2, 0x65, 0xbf, 0x71, 0xcc, 0xec, 0xf0, 0xcb, 0xfe, 0xd4, 0xb0, 0xa4, 0xc6,
	0x94, 0x25, 0x2c, 0xd4, 0x0b, 0x59, 0x52, 0x4a, 0x7b, 0x72, 0x2c, 0xb1, 0xeb, 0xe2, 0xc8, 0x61,
	0xac, 0x1c, 0x7a, 0x28, 0xcb, 0xc4, 0x7a, 0xfd, 0xa7, 0x95, 0x3d, 0xae, 0x34, 0x0e, 0x71, 0xaf,
	0xa5, 0xd7, 0x7e, 0xae, 0xbd, 0xb5, 0x9f, 0xa0, 0x94, 0x9c, 0x7a, 0xeb, 0x57, 0x28, 0x33, 0x23,
	0x29, 0x72, 0xca, 0xc2, 0xf6, 0xf6, 0x3e, 0xcf, 0xfb, 0xff, 0x99, 0x57, 0x08, 0x48, 0x2c, 0xe6,
	0x29, 0x26, 0xb7, 0xcb, 0x29, 0xf6, 0x36, 0x89, 0x90, 0x82, 0xc2, 0x03, 0x73, 0xfc, 0xf9, 0x7c,
	0x29, 0x17, 0xdb, 0x9b, 0xde, 0x54, 0xac, 0x5e, 0xcd, 0xc5, 0x5c, 0xbc, 0xd2, 0x21, 0x37, 0xdb,
	0x99, 0x46, 0x1a, 0x68, 0xcb, 0xa4, 0x76, 0xff, 0xb6, 0xa0, 0x35, 0x12, 0xf3, 0xc9, 0x82, 0x27,
	0xd1, 0x70, 0x3d, 0x13, 0xd4, 0x05, 0xc7, 0x00, 0xcf, 0xb5, 0x3a, 0xd6, 0xa9, 0xcd, 0x72, 0x48,
	0x2f, 0xa0, 0xc1, 0x70, 0x13, 0x2f, 0xa7, 0x3c, 0x75, 0x2b, 0x9d, 0xea, 0xe9, 0xc1, 0xd9, 0x8b,
	0x5e, 0x69, 0x94, 0x72, 0x95, 0x5e, 0x1e, 0xe8, 0xaf, 0x65, 0xb2, 0x63, 0x45, 0x1e, 0xfd, 0x1f,
	0xd4, 0xfc, 0x8d, 0x98, 0x2e, 0xdc, 0xaa, 0xae, 0x6d, 0x00, 0x3d, 0x86, 0xc6, 0x08, 0x79, 0x84,
	0xc9, 0xd0, 0x73, 0x6d, 0xed, 0x28, 0x30, 0xa5, 0x60, 0x87, 0x98, 0xac, 0xdc, 0x9a, 0xe6, 0xb5,
	0x7d, 0xfc, 0x35, 0x1c, 0xee, 0x35, 0xa0, 0x04, 0xaa, 0x3f, 0xe0, 0x2e, 0x1b, 0x58, 0x99, 0xaa,
	0xd1, 0x2d, 0x8f, 0xb7, 0xe8, 0x56, 0x3a, 0xd6, 0x69, 0x93, 0x19, 0xf0, 0x55, 0xe5, 0x4b, 0xab,
	0xfb, 0x9b, 0x05, 0x4f, 0xd5, 0xac, 0x52, 0x24, 0xf8, 0x16, 0x79, 0x22, 0x6f, 0x90, 0x4b, 0xd5,
	0xe6, 0xfa, 0x3a, 0xdb, 0xb9, 0xc9, 0xb4, 0x4d, 0x3b, 0x70, 0xc0, 0xf8, 0x4c, 0xf6, 0xa3, 0x28,
	0xc1, 0x34, 0xcd, 0x2a, 0x95, 0x29, 0xfa, 0x02, 0xda, 0x13, 0xb3, 0x7e, 0x1e, 0x54, 0xd5, 0x41,
	0x8f, 0x58, 0xfa, 0x19, 0x1c, 0xbe, 0x11, 0x69, 0xba, 0xdc, 0xe4, 0x61, 0xb6, 0x0e, 0xdb, 0x27,
	0xe9, 0x17, 0x50, 0xd7, 0x0a, 0xa6, 0x6e, 0x4d, 0xcb, 0xeb, 0x7e, 0x48, 0xde, 0x0b, 0xfb, 0xfd,
	0x1f, 0x9f, 0x3e, 0x61, 0x59, 0x74, 0xd7, 0x87, 0x03, 0x2f, 0xf8, 0x98, 0x17, 0x7c, 0x0e, 0xcd,
	0x4c, 0xb7, 0xa1, 0xa7, 0xd7, 0xb1, 0xd9, 0x03, 0xd1, 0xfd, 0x0e, 0x88, 0x17, 0x7c, 0x84, 0x2c,
	0xe7, 0xc5, 0x98, 0xe6, 0x0a, 0xfe, 0x5f, 0x1e, 0xb3, 0x34, 0xc8, 0xa3, 0x29, 0xcf, 0xa1, 0x39,
	0x12, 0x73, 0x86, 0x53, 0x91, 0x44, 0xea, 0x79, 0x86, 0xeb, 0x08, 0xef, 0xb2, 0x09, 0x0d, 0x50,
	0xdd, 0x3c, 0x2e, 0xb9, 0x1e, 0xad, 0xc5, 0xb4, 0xdd, 0xfd, 0xa5, 0x02, 0x0e, 0xc3, 0x1f, 0xb7,
	0x98, 0x4a, 0xda, 0x83, 0xfa, 0x25, 0xca, 0x85, 0x88, 0x74, 0x5a, 0xfb, 0xec, 0x59, 0xb9, 0xb3,
	0xf1, 0x84, 0xbb, 0x0d, 0xb2, 0x2c, 0x4a, 0xd5, 0x0b, 0xf8, 0x2a, 0xbf, 0x01, 0x6d, 0x97, 0xd5,
	0xa9, 0xee, 0xab, 0x53, 0xcc, 0x64, 0x97, 0x67, 0x72, 0xc1, 0xb9, 0xe4, 0x77, 0x93, 0xe5, 0x4f,
	0x98, 0x9d, 0x60, 0x0e, 0x95, 0x27, 0x5c, 0xae, 0x50, 0x6c, 0xa5, 0x5b, 0xef, 0x58, 0xa7, 0x55,
	0x96, 0x43, 0xa5, 0x73, 0xae, 0x83, 0xe7, 0x3a, 0x46, 0xe7, 0x82, 0xd0, 0x5b, 0x06, 0x43, 0xcf,
	0x6d, 0x98, 0x8b, 0x56, 0xb6, 0x3a, 0xb5, 0x2b, 0xbe, 0x8b, 0x05, 0x8f, 0x74, 0xa7, 0xa6, 0x76,
	0x95, 0xa9, 0xee, 0xcf, 0x15, 0xf5, 0xf9, 0xa5, 0x1b, 0xb1, 0x4e, 0xf1, 0x3f, 0x0b, 0xf1, 0x1a,
	0x9a, 0x7e, 0x92, 0x88, 0x64, 0x20, 0x22, 0xa3, 0x46, 0xfb, 0xec, 0xa8, 0x9c, 0x52, 0x38, 0xd9,
	0x43, 0x1c, 0xed, 0x42, 0x4b, 0x83, 0x4b, 0x4c, 0x53, 0x3e, 0xc7, 0xec, 0xb4, 0xf7, 0xb8, 0xb2,
	0x9a, 0xf6, 0x07, 0xd4, 0xac, 0x95, 0xd5, 0x7c, 0x0e, 0xcd, 0x11, 0x4f, 0xa5, 0xf1, 0xd4, 0x8d,
	0x32, 0x05, 0xf1, 0x58, 0x05, 0xe7, 0xdf, 0x2a, 0x7c, 0xa3, 0xbf, 0x5d, 0x73, 0x44, 0x85, 0x1a,
	0xe7, 0xea, 0x42, 0x14, 0x93, 0xba, 0x96, 0xbe, 0xc8, 0xa3, 0x47, 0x1f, 0x8e, 0xf1, 0x66, 0xf7,
	0x98, 0xc7, 0xbe, 0xbc, 0x03, 0x78, 0x90, 0x8a, 0x02, 0xd4, 0x07, 0xcc, 0xef, 0x87, 0x3e, 0x79,
	0x42, 0x0f, 0xc0, 0xf1, 0xfc, 0x49, 0xc8, 0xc6, 0xdf, 0x12, 0x4b, 0x39, 0xfa, 0x57, 0x57, 0x7e,
	0xe0, 0x91, 0x0a, 0x6d, 0x80, 0xcd, 0xfc, 0xbe, 0x47, 0xaa, 0xb4, 0x05, 0x8d, 0x90, 0x5d, 0x07,
	0x03, 0x95, 0x60, 0x53, 0x02, 0xad, 0x37, 0x7e, 0xf8, 0xae, 0x60, 0x6a, 0xaa, 0xc4, 0x60, 0x1c,
	0x04, 0xfe, 0x20, 0x24, 0x75, 0xda, 0x06, 0xc8, 0xc0, 0x3b, 0x36, 0x26, 0xce, 0xcb, 0x5f, 0x2b,
	0xa5, 0xf7, 0x50, 0xa1, 0x81, 0xd0, 0xd0, 0xb4, 0xce, 0xae, 0x88, 0x58, 0xaa, 0xc9, 0x80, 0xaf,
	0xa7, 0x18, 0x63, 0x44, 0x2a, 0xaa, 0xc9, 0x70, 0x7d, 0xcb, 0xe3, 0x65, 0xa4, 0x35, 0x26, 0x55,
	0x4a, 0xa1, 0x9d, 0x31, 0x79, 0x8e, 0x5d, 0xe2, 0x32, 0xdd, 0x48, 0x8d, 0x3e, 0x03, 0xba, 0xcf,
	0x29, 0x2d, 0x49, 0x5d, 0xd5, 0x67, 0xf8, 0x3d, 0x4e, 0x25, 0x46, 0xc4, 0xa1, 0x4f, 0xe1, 0x50,
	0x17, 0x0e, 0x84, 0x64, 0xc8, 0xa3, 0x1d, 0x69, 0xa8, 0x96, 0x93, 0x5d, 0x2a, 0x71, 0x35, 0x88,
	0x45, 0x8a, 0x11, 0x69, 0xd2, 0x4f, 0xe0, 0x48, 0xbf, 0x55, 0x3f, 0x4e, 0x54, 0x4c, 0x98, 0x6c,
	0xd7, 0x53, 0xae, 0xf2, 0x23, 0xb5, 0xe5, 0x78, 0x2b, 0xc7, 0x33, 0xc6, 0xd7, 0x73, 0x24, 0xa8,
	0x26, 0x09, 0x84, 0x1c, 0x21, 0x4f, 0xf1, 0xad, 0x88, 0x23, 0x4c, 0xc8, 0x8c, 0x1e, 0x01, 0x19,
	0xcb, 0x05, 0x26, 0xa6, 0xaa, 0x59, 0xfa, 0x2f, 0xe7, 0xa2, 0xf5, 0xfe, 0xfe, 0xc4, 0xfa, 0xfd,
	0xfe, 0xc4, 0xfa, 0xf3, 0xfe, 0xc4, 0xba, 0xa9, 0xeb, 0x5f, 0xd3, 0xeb, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x37, 0x40, 0x45, 0x10, 0xe9, 0x06, 0x00, 0x00,
}

func (m *LogShardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogShardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogShardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Term != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x28
	}
	if m.LeaderID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.LeaderID))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Replicas) > 0 {
		for k := range m.Replicas {
			v := m.Replicas[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintLogservice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintLogservice(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogStoreHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStoreHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStoreHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.GossipAddress) > 0 {
		i -= len(m.GossipAddress)
		copy(dAtA[i:], m.GossipAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.GossipAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RaftAddress) > 0 {
		i -= len(m.RaftAddress)
		copy(dAtA[i:], m.RaftAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.RaftAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNShardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNShardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNShardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReplicaID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DNStoreHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNStoreHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNStoreHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PayloadSize != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.PayloadSize))
		i--
		dAtA[i] = 0x48
	}
	if m.DNID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.DNID))
		i--
		dAtA[i] = 0x40
	}
	if m.DNShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.DNShardID))
		i--
		dAtA[i] = 0x38
	}
	if m.Timeout != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxSize != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x28
	}
	if m.Index != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Method != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PayloadSize != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.PayloadSize))
		i--
		dAtA[i] = 0x38
	}
	if m.LastIndex != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.LastIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.Index != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x28
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Method != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogShardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if len(m.Replicas) > 0 {
		for k, v := range m.Replicas {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLogservice(uint64(k)) + 1 + len(v) + sovLogservice(uint64(len(v)))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.Epoch != 0 {
		n += 1 + sovLogservice(uint64(m.Epoch))
	}
	if m.LeaderID != 0 {
		n += 1 + sovLogservice(uint64(m.LeaderID))
	}
	if m.Term != 0 {
		n += 1 + sovLogservice(uint64(m.Term))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogStoreHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.RaftAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.GossipAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DNShardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if m.ReplicaID != 0 {
		n += 1 + sovLogservice(uint64(m.ReplicaID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DNStoreHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovLogservice(uint64(m.Index))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovLogservice(uint64(m.Method))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if m.Index != 0 {
		n += 1 + sovLogservice(uint64(m.Index))
	}
	if m.MaxSize != 0 {
		n += 1 + sovLogservice(uint64(m.MaxSize))
	}
	if m.Timeout != 0 {
		n += 1 + sovLogservice(uint64(m.Timeout))
	}
	if m.DNShardID != 0 {
		n += 1 + sovLogservice(uint64(m.DNShardID))
	}
	if m.DNID != 0 {
		n += 1 + sovLogservice(uint64(m.DNID))
	}
	if m.PayloadSize != 0 {
		n += 1 + sovLogservice(uint64(m.PayloadSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovLogservice(uint64(m.Method))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovLogservice(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if m.Index != 0 {
		n += 1 + sovLogservice(uint64(m.Index))
	}
	if m.LastIndex != 0 {
		n += 1 + sovLogservice(uint64(m.LastIndex))
	}
	if m.PayloadSize != 0 {
		n += 1 + sovLogservice(uint64(m.PayloadSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLogservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogservice(x uint64) (n int) {
	return sovLogservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogShardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogShardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogShardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replicas == nil {
				m.Replicas = make(map[uint64]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Replicas[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			m.LeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStoreHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStoreHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStoreHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GossipAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GossipAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, LogShardInfo{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNShardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNShardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNShardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNStoreHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNStoreHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNStoreHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, DNShardInfo{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= MethodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNShardID", wireType)
			}
			m.DNShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DNShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNID", wireType)
			}
			m.DNID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DNID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSize", wireType)
			}
			m.PayloadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= MethodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSize", wireType)
			}
			m.PayloadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, LogRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogservice = fmt.Errorf("proto: unexpected end of group")
)
