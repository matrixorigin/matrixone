// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logservice.proto

package logservice

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	metadata "github.com/matrixorigin/matrixone/pkg/pb/metadata"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateType int32

const (
	LeaseHolderIDUpdate UpdateType = 0
	TruncateLSNUpdate   UpdateType = 1
	UserEntryUpdate     UpdateType = 2
	TSOUpdate           UpdateType = 3
)

var UpdateType_name = map[int32]string{
	0: "LeaseHolderIDUpdate",
	1: "TruncateLSNUpdate",
	2: "UserEntryUpdate",
	3: "TSOUpdate",
}

var UpdateType_value = map[string]int32{
	"LeaseHolderIDUpdate": 0,
	"TruncateLSNUpdate":   1,
	"UserEntryUpdate":     2,
	"TSOUpdate":           3,
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}

func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{0}
}

type NodeState int32

const (
	NormalState  NodeState = 0
	TimeoutState NodeState = 1
)

var NodeState_name = map[int32]string{
	0: "NormalState",
	1: "TimeoutState",
}

var NodeState_value = map[string]int32{
	"NormalState":  0,
	"TimeoutState": 1,
}

func (x NodeState) String() string {
	return proto.EnumName(NodeState_name, int32(x))
}

func (NodeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{1}
}

type MethodType int32

const (
	TSO_UPDATE           MethodType = 0
	APPEND               MethodType = 1
	READ                 MethodType = 2
	TRUNCATE             MethodType = 3
	GET_TRUNCATE         MethodType = 4
	CONNECT              MethodType = 5
	CONNECT_RO           MethodType = 6
	LOG_HEARTBEAT        MethodType = 7
	CN_HEARTBEAT         MethodType = 8
	DN_HEARTBEAT         MethodType = 9
	CHECK_HAKEEPER       MethodType = 10
	GET_CLUSTER_DETAILS  MethodType = 11
	GET_SHARD_INFO       MethodType = 12
	CN_ALLOCATE_ID       MethodType = 13
	GET_CLUSTER_STATE    MethodType = 14
	UPDATE_CN_LABEL      MethodType = 15
	UPDATE_CN_WORK_STATE MethodType = 16
	PATCH_CN_STORE       MethodType = 17
	DELETE_CN_STORE      MethodType = 18
)

var MethodType_name = map[int32]string{
	0:  "TSO_UPDATE",
	1:  "APPEND",
	2:  "READ",
	3:  "TRUNCATE",
	4:  "GET_TRUNCATE",
	5:  "CONNECT",
	6:  "CONNECT_RO",
	7:  "LOG_HEARTBEAT",
	8:  "CN_HEARTBEAT",
	9:  "DN_HEARTBEAT",
	10: "CHECK_HAKEEPER",
	11: "GET_CLUSTER_DETAILS",
	12: "GET_SHARD_INFO",
	13: "CN_ALLOCATE_ID",
	14: "GET_CLUSTER_STATE",
	15: "UPDATE_CN_LABEL",
	16: "UPDATE_CN_WORK_STATE",
	17: "PATCH_CN_STORE",
	18: "DELETE_CN_STORE",
}

var MethodType_value = map[string]int32{
	"TSO_UPDATE":           0,
	"APPEND":               1,
	"READ":                 2,
	"TRUNCATE":             3,
	"GET_TRUNCATE":         4,
	"CONNECT":              5,
	"CONNECT_RO":           6,
	"LOG_HEARTBEAT":        7,
	"CN_HEARTBEAT":         8,
	"DN_HEARTBEAT":         9,
	"CHECK_HAKEEPER":       10,
	"GET_CLUSTER_DETAILS":  11,
	"GET_SHARD_INFO":       12,
	"CN_ALLOCATE_ID":       13,
	"GET_CLUSTER_STATE":    14,
	"UPDATE_CN_LABEL":      15,
	"UPDATE_CN_WORK_STATE": 16,
	"PATCH_CN_STORE":       17,
	"DELETE_CN_STORE":      18,
}

func (x MethodType) String() string {
	return proto.EnumName(MethodType_name, int32(x))
}

func (MethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{2}
}

type RecordType int32

const (
	UserRecord    RecordType = 0
	Internal      RecordType = 1
	LeaseUpdate   RecordType = 2
	LeaseRejected RecordType = 3
)

var RecordType_name = map[int32]string{
	0: "UserRecord",
	1: "Internal",
	2: "LeaseUpdate",
	3: "LeaseRejected",
}

var RecordType_value = map[string]int32{
	"UserRecord":    0,
	"Internal":      1,
	"LeaseUpdate":   2,
	"LeaseRejected": 3,
}

func (x RecordType) String() string {
	return proto.EnumName(RecordType_name, int32(x))
}

func (RecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{3}
}

type CNLabelOp int32

const (
	SetLabel    CNLabelOp = 0
	DeleteLabel CNLabelOp = 1
)

var CNLabelOp_name = map[int32]string{
	0: "SetLabel",
	1: "DeleteLabel",
}

var CNLabelOp_value = map[string]int32{
	"SetLabel":    0,
	"DeleteLabel": 1,
}

func (x CNLabelOp) String() string {
	return proto.EnumName(CNLabelOp_name, int32(x))
}

func (CNLabelOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{4}
}

type HAKeeperUpdateType int32

const (
	TickUpdate                  HAKeeperUpdateType = 0
	CNHeartbeatUpdate           HAKeeperUpdateType = 1
	DNHeartbeatUpdate           HAKeeperUpdateType = 2
	LogHeartbeatUpdate          HAKeeperUpdateType = 3
	GetIDUpdate                 HAKeeperUpdateType = 4
	ScheduleCommandUpdate       HAKeeperUpdateType = 5
	SetStateUpdate              HAKeeperUpdateType = 6
	InitialClusterUpdate        HAKeeperUpdateType = 7
	SetTaskSchedulerStateUpdate HAKeeperUpdateType = 8
	SetTaskTableUserUpdate      HAKeeperUpdateType = 9
	UpdateCNLabel               HAKeeperUpdateType = 10
	UpdateCNWorkState           HAKeeperUpdateType = 11
	PatchCNStore                HAKeeperUpdateType = 12
	RemoveCNStore               HAKeeperUpdateType = 13
)

var HAKeeperUpdateType_name = map[int32]string{
	0:  "TickUpdate",
	1:  "CNHeartbeatUpdate",
	2:  "DNHeartbeatUpdate",
	3:  "LogHeartbeatUpdate",
	4:  "GetIDUpdate",
	5:  "ScheduleCommandUpdate",
	6:  "SetStateUpdate",
	7:  "InitialClusterUpdate",
	8:  "SetTaskSchedulerStateUpdate",
	9:  "SetTaskTableUserUpdate",
	10: "UpdateCNLabel",
	11: "UpdateCNWorkState",
	12: "PatchCNStore",
	13: "RemoveCNStore",
}

var HAKeeperUpdateType_value = map[string]int32{
	"TickUpdate":                  0,
	"CNHeartbeatUpdate":           1,
	"DNHeartbeatUpdate":           2,
	"LogHeartbeatUpdate":          3,
	"GetIDUpdate":                 4,
	"ScheduleCommandUpdate":       5,
	"SetStateUpdate":              6,
	"InitialClusterUpdate":        7,
	"SetTaskSchedulerStateUpdate": 8,
	"SetTaskTableUserUpdate":      9,
	"UpdateCNLabel":               10,
	"UpdateCNWorkState":           11,
	"PatchCNStore":                12,
	"RemoveCNStore":               13,
}

func (x HAKeeperUpdateType) String() string {
	return proto.EnumName(HAKeeperUpdateType_name, int32(x))
}

func (HAKeeperUpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{5}
}

// HAKeeperState state transition diagram
//
//	          HAKeeperCreated
//	                │
//	                │ cluster init info set
//	                ▼
//	      HAKeeperBootstrapping
//	                │
//	                │ init schedule commands received
//	                ▼
//	HAKeeperBootstrapCommandsReceived
//	                │
//	                │
//	    ┌───────────┴───────────┐
//	    │ time out              │ bootstrap successfully
//	    ▼                       ▼
//
// HAKeeperBootstrapFailed     HAKeeperRunning
type HAKeeperState int32

const (
	HAKeeperCreated                   HAKeeperState = 0
	HAKeeperBootstrapping             HAKeeperState = 1
	HAKeeperBootstrapCommandsReceived HAKeeperState = 2
	HAKeeperBootstrapFailed           HAKeeperState = 3
	HAKeeperRunning                   HAKeeperState = 4
)

var HAKeeperState_name = map[int32]string{
	0: "HAKeeperCreated",
	1: "HAKeeperBootstrapping",
	2: "HAKeeperBootstrapCommandsReceived",
	3: "HAKeeperBootstrapFailed",
	4: "HAKeeperRunning",
}

var HAKeeperState_value = map[string]int32{
	"HAKeeperCreated":                   0,
	"HAKeeperBootstrapping":             1,
	"HAKeeperBootstrapCommandsReceived": 2,
	"HAKeeperBootstrapFailed":           3,
	"HAKeeperRunning":                   4,
}

func (x HAKeeperState) String() string {
	return proto.EnumName(HAKeeperState_name, int32(x))
}

func (HAKeeperState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{6}
}

// TaskSchedulerState state transition diagram
//
//	TaskSchedulerCreated
//	         │
//	         │  setTaskTableUser()
//	         ▼
//	TaskSchedulerStarted
//	        │ ▲
//	        │ │
//	        ▼ │
//	 TaskSchedulerStopped
type TaskSchedulerState int32

const (
	TaskSchedulerCreated TaskSchedulerState = 0
	TaskSchedulerRunning TaskSchedulerState = 1
	TaskSchedulerStopped TaskSchedulerState = 2
)

var TaskSchedulerState_name = map[int32]string{
	0: "TaskSchedulerCreated",
	1: "TaskSchedulerRunning",
	2: "TaskSchedulerStopped",
}

var TaskSchedulerState_value = map[string]int32{
	"TaskSchedulerCreated": 0,
	"TaskSchedulerRunning": 1,
	"TaskSchedulerStopped": 2,
}

func (x TaskSchedulerState) String() string {
	return proto.EnumName(TaskSchedulerState_name, int32(x))
}

func (TaskSchedulerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{7}
}

// ConfigChangeType indicates config change command type.
type ConfigChangeType int32

const (
	AddReplica    ConfigChangeType = 0
	RemoveReplica ConfigChangeType = 1
	StartReplica  ConfigChangeType = 2
	StopReplica   ConfigChangeType = 3
	KillZombie    ConfigChangeType = 4
)

var ConfigChangeType_name = map[int32]string{
	0: "AddReplica",
	1: "RemoveReplica",
	2: "StartReplica",
	3: "StopReplica",
	4: "KillZombie",
}

var ConfigChangeType_value = map[string]int32{
	"AddReplica":    0,
	"RemoveReplica": 1,
	"StartReplica":  2,
	"StopReplica":   3,
	"KillZombie":    4,
}

func (x ConfigChangeType) String() string {
	return proto.EnumName(ConfigChangeType_name, int32(x))
}

func (ConfigChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{8}
}

// ServiceType specifies type of service
type ServiceType int32

const (
	LogService ServiceType = 0
	DNService  ServiceType = 1
	CNService  ServiceType = 2
)

var ServiceType_name = map[int32]string{
	0: "LogService",
	1: "DNService",
	2: "CNService",
}

var ServiceType_value = map[string]int32{
	"LogService": 0,
	"DNService":  1,
	"CNService":  2,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{9}
}

type CNStore struct {
	UUID                 string                        `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ServiceAddress       string                        `protobuf:"bytes,2,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	SQLAddress           string                        `protobuf:"bytes,3,opt,name=SQLAddress,proto3" json:"SQLAddress,omitempty"`
	LockServiceAddress   string                        `protobuf:"bytes,4,opt,name=LockServiceAddress,proto3" json:"LockServiceAddress,omitempty"`
	CtlAddress           string                        `protobuf:"bytes,5,opt,name=CtlAddress,proto3" json:"CtlAddress,omitempty"`
	Role                 metadata.CNRole               `protobuf:"varint,6,opt,name=Role,proto3,enum=metadata.CNRole" json:"Role,omitempty"`
	Tick                 uint64                        `protobuf:"varint,7,opt,name=Tick,proto3" json:"Tick,omitempty"`
	State                NodeState                     `protobuf:"varint,8,opt,name=State,proto3,enum=logservice.NodeState" json:"State,omitempty"`
	Labels               map[string]metadata.LabelList `protobuf:"bytes,9,rep,name=Labels,proto3" json:"Labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkState            metadata.WorkState            `protobuf:"varint,10,opt,name=WorkState,proto3,enum=metadata.WorkState" json:"WorkState,omitempty"`
	QueryAddress         string                        `protobuf:"bytes,11,opt,name=QueryAddress,proto3" json:"QueryAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CNStore) Reset()         { *m = CNStore{} }
func (m *CNStore) String() string { return proto.CompactTextString(m) }
func (*CNStore) ProtoMessage()    {}
func (*CNStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{0}
}
func (m *CNStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNStore.Merge(m, src)
}
func (m *CNStore) XXX_Size() int {
	return m.Size()
}
func (m *CNStore) XXX_DiscardUnknown() {
	xxx_messageInfo_CNStore.DiscardUnknown(m)
}

var xxx_messageInfo_CNStore proto.InternalMessageInfo

func (m *CNStore) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CNStore) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *CNStore) GetSQLAddress() string {
	if m != nil {
		return m.SQLAddress
	}
	return ""
}

func (m *CNStore) GetLockServiceAddress() string {
	if m != nil {
		return m.LockServiceAddress
	}
	return ""
}

func (m *CNStore) GetCtlAddress() string {
	if m != nil {
		return m.CtlAddress
	}
	return ""
}

func (m *CNStore) GetRole() metadata.CNRole {
	if m != nil {
		return m.Role
	}
	return metadata.CNRole_TP
}

func (m *CNStore) GetTick() uint64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *CNStore) GetState() NodeState {
	if m != nil {
		return m.State
	}
	return NormalState
}

func (m *CNStore) GetLabels() map[string]metadata.LabelList {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CNStore) GetWorkState() metadata.WorkState {
	if m != nil {
		return m.WorkState
	}
	return metadata.WorkState_Unknown
}

func (m *CNStore) GetQueryAddress() string {
	if m != nil {
		return m.QueryAddress
	}
	return ""
}

type DNStore struct {
	UUID           string        `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ServiceAddress string        `protobuf:"bytes,2,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	Tick           uint64        `protobuf:"varint,3,opt,name=Tick,proto3" json:"Tick,omitempty"`
	State          NodeState     `protobuf:"varint,4,opt,name=State,proto3,enum=logservice.NodeState" json:"State,omitempty"`
	Shards         []DNShardInfo `protobuf:"bytes,5,rep,name=Shards,proto3" json:"Shards"`
	// Server address for logtail push model
	LogtailServerAddress string `protobuf:"bytes,6,opt,name=LogtailServerAddress,proto3" json:"LogtailServerAddress,omitempty"`
	// LockServiceAddress lock service address for lock table allocator
	LockServiceAddress   string   `protobuf:"bytes,7,opt,name=LockServiceAddress,proto3" json:"LockServiceAddress,omitempty"`
	CtlAddress           string   `protobuf:"bytes,8,opt,name=CtlAddress,proto3" json:"CtlAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNStore) Reset()         { *m = DNStore{} }
func (m *DNStore) String() string { return proto.CompactTextString(m) }
func (*DNStore) ProtoMessage()    {}
func (*DNStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{1}
}
func (m *DNStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNStore.Merge(m, src)
}
func (m *DNStore) XXX_Size() int {
	return m.Size()
}
func (m *DNStore) XXX_DiscardUnknown() {
	xxx_messageInfo_DNStore.DiscardUnknown(m)
}

var xxx_messageInfo_DNStore proto.InternalMessageInfo

func (m *DNStore) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DNStore) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *DNStore) GetTick() uint64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *DNStore) GetState() NodeState {
	if m != nil {
		return m.State
	}
	return NormalState
}

func (m *DNStore) GetShards() []DNShardInfo {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *DNStore) GetLogtailServerAddress() string {
	if m != nil {
		return m.LogtailServerAddress
	}
	return ""
}

func (m *DNStore) GetLockServiceAddress() string {
	if m != nil {
		return m.LockServiceAddress
	}
	return ""
}

func (m *DNStore) GetCtlAddress() string {
	if m != nil {
		return m.CtlAddress
	}
	return ""
}

type LogStore struct {
	UUID                 string           `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ServiceAddress       string           `protobuf:"bytes,2,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	Tick                 uint64           `protobuf:"varint,3,opt,name=Tick,proto3" json:"Tick,omitempty"`
	State                NodeState        `protobuf:"varint,4,opt,name=State,proto3,enum=logservice.NodeState" json:"State,omitempty"`
	Replicas             []LogReplicaInfo `protobuf:"bytes,5,rep,name=Replicas,proto3" json:"Replicas"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LogStore) Reset()         { *m = LogStore{} }
func (m *LogStore) String() string { return proto.CompactTextString(m) }
func (*LogStore) ProtoMessage()    {}
func (*LogStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{2}
}
func (m *LogStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStore.Merge(m, src)
}
func (m *LogStore) XXX_Size() int {
	return m.Size()
}
func (m *LogStore) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStore.DiscardUnknown(m)
}

var xxx_messageInfo_LogStore proto.InternalMessageInfo

func (m *LogStore) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogStore) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *LogStore) GetTick() uint64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *LogStore) GetState() NodeState {
	if m != nil {
		return m.State
	}
	return NormalState
}

func (m *LogStore) GetReplicas() []LogReplicaInfo {
	if m != nil {
		return m.Replicas
	}
	return nil
}

// LogShardInfo contains information a log shard.
type LogShardInfo struct {
	// ShardID is the ID of a Log shard.
	ShardID uint64 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	// Replicas is a map of ReplicaID to LogStore UUID, it describe the member
	// replicas of the shard at the given Epoch.
	Replicas map[uint64]string `protobuf:"bytes,2,rep,name=Replicas,proto3" json:"Replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Epoch is the epoch value of the Shard, member replicas of the Shard can
	// change across epochs.
	Epoch uint64 `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	// LeaderID is the ReplicaID of the leader replica at the given term. When
	// LeaderID is 0, it means there is no leader or the leader is unknown.
	LeaderID uint64 `protobuf:"varint,4,opt,name=LeaderID,proto3" json:"LeaderID,omitempty"`
	// Term is the Raft term value.
	Term                 uint64   `protobuf:"varint,5,opt,name=Term,proto3" json:"Term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogShardInfo) Reset()         { *m = LogShardInfo{} }
func (m *LogShardInfo) String() string { return proto.CompactTextString(m) }
func (*LogShardInfo) ProtoMessage()    {}
func (*LogShardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{3}
}
func (m *LogShardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogShardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogShardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogShardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogShardInfo.Merge(m, src)
}
func (m *LogShardInfo) XXX_Size() int {
	return m.Size()
}
func (m *LogShardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogShardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogShardInfo proto.InternalMessageInfo

func (m *LogShardInfo) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *LogShardInfo) GetReplicas() map[uint64]string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *LogShardInfo) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *LogShardInfo) GetLeaderID() uint64 {
	if m != nil {
		return m.LeaderID
	}
	return 0
}

func (m *LogShardInfo) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// LogReplicaInfo contains information of a log replica.
type LogReplicaInfo struct {
	LogShardInfo `protobuf:"bytes,1,opt,name=LogShardInfo,proto3,embedded=LogShardInfo" json:"LogShardInfo"`
	// ReplicaID is the ID of a replica within the Log shard.
	ReplicaID            uint64   `protobuf:"varint,2,opt,name=ReplicaID,proto3" json:"ReplicaID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogReplicaInfo) Reset()         { *m = LogReplicaInfo{} }
func (m *LogReplicaInfo) String() string { return proto.CompactTextString(m) }
func (*LogReplicaInfo) ProtoMessage()    {}
func (*LogReplicaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{4}
}
func (m *LogReplicaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogReplicaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogReplicaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogReplicaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogReplicaInfo.Merge(m, src)
}
func (m *LogReplicaInfo) XXX_Size() int {
	return m.Size()
}
func (m *LogReplicaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogReplicaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogReplicaInfo proto.InternalMessageInfo

func (m *LogReplicaInfo) GetReplicaID() uint64 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

// CNStoreHeartbeat is the periodic message sent tp the HAKeeper by CN stores.
type CNStoreHeartbeat struct {
	UUID                 string          `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ServiceAddress       string          `protobuf:"bytes,2,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	SQLAddress           string          `protobuf:"bytes,3,opt,name=SQLAddress,proto3" json:"SQLAddress,omitempty"`
	LockServiceAddress   string          `protobuf:"bytes,4,opt,name=LockServiceAddress,proto3" json:"LockServiceAddress,omitempty"`
	CtlAddress           string          `protobuf:"bytes,5,opt,name=CtlAddress,proto3" json:"CtlAddress,omitempty"`
	Role                 metadata.CNRole `protobuf:"varint,6,opt,name=Role,proto3,enum=metadata.CNRole" json:"Role,omitempty"`
	TaskServiceCreated   bool            `protobuf:"varint,7,opt,name=TaskServiceCreated,proto3" json:"TaskServiceCreated,omitempty"`
	QueryAddress         string          `protobuf:"bytes,8,opt,name=QueryAddress,proto3" json:"QueryAddress,omitempty"`
	InitWorkState        string          `protobuf:"bytes,9,opt,name=InitWorkState,proto3" json:"InitWorkState,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CNStoreHeartbeat) Reset()         { *m = CNStoreHeartbeat{} }
func (m *CNStoreHeartbeat) String() string { return proto.CompactTextString(m) }
func (*CNStoreHeartbeat) ProtoMessage()    {}
func (*CNStoreHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{5}
}
func (m *CNStoreHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNStoreHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNStoreHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNStoreHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNStoreHeartbeat.Merge(m, src)
}
func (m *CNStoreHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *CNStoreHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_CNStoreHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_CNStoreHeartbeat proto.InternalMessageInfo

func (m *CNStoreHeartbeat) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CNStoreHeartbeat) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *CNStoreHeartbeat) GetSQLAddress() string {
	if m != nil {
		return m.SQLAddress
	}
	return ""
}

func (m *CNStoreHeartbeat) GetLockServiceAddress() string {
	if m != nil {
		return m.LockServiceAddress
	}
	return ""
}

func (m *CNStoreHeartbeat) GetCtlAddress() string {
	if m != nil {
		return m.CtlAddress
	}
	return ""
}

func (m *CNStoreHeartbeat) GetRole() metadata.CNRole {
	if m != nil {
		return m.Role
	}
	return metadata.CNRole_TP
}

func (m *CNStoreHeartbeat) GetTaskServiceCreated() bool {
	if m != nil {
		return m.TaskServiceCreated
	}
	return false
}

func (m *CNStoreHeartbeat) GetQueryAddress() string {
	if m != nil {
		return m.QueryAddress
	}
	return ""
}

func (m *CNStoreHeartbeat) GetInitWorkState() string {
	if m != nil {
		return m.InitWorkState
	}
	return ""
}

// CNAllocateID is the periodic message sent tp the HAKeeper by CN stores.
type CNAllocateID struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Batch                uint64   `protobuf:"varint,2,opt,name=Batch,proto3" json:"Batch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CNAllocateID) Reset()         { *m = CNAllocateID{} }
func (m *CNAllocateID) String() string { return proto.CompactTextString(m) }
func (*CNAllocateID) ProtoMessage()    {}
func (*CNAllocateID) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{6}
}
func (m *CNAllocateID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNAllocateID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNAllocateID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNAllocateID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNAllocateID.Merge(m, src)
}
func (m *CNAllocateID) XXX_Size() int {
	return m.Size()
}
func (m *CNAllocateID) XXX_DiscardUnknown() {
	xxx_messageInfo_CNAllocateID.DiscardUnknown(m)
}

var xxx_messageInfo_CNAllocateID proto.InternalMessageInfo

func (m *CNAllocateID) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CNAllocateID) GetBatch() uint64 {
	if m != nil {
		return m.Batch
	}
	return 0
}

// LogStoreHeartbeat is the periodic message sent to the HAKeeper by Log Stores.
type LogStoreHeartbeat struct {
	// UUID is the uuid of the Log Store.
	UUID           string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	RaftAddress    string `protobuf:"bytes,2,opt,name=RaftAddress,proto3" json:"RaftAddress,omitempty"`
	ServiceAddress string `protobuf:"bytes,3,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	GossipAddress  string `protobuf:"bytes,4,opt,name=GossipAddress,proto3" json:"GossipAddress,omitempty"`
	// Replicas is a list of LogReplicaInfo instances collected on the specified
	// LogStore. Details in Shards are based on the local knowledge of each
	// replica running on the current LogStore, it may not be accurate or
	// update to date due to various reasons.
	Replicas []LogReplicaInfo `protobuf:"bytes,5,rep,name=Replicas,proto3" json:"Replicas"`
	// TaskServiceCreated task service is created at the current log node
	TaskServiceCreated   bool     `protobuf:"varint,6,opt,name=TaskServiceCreated,proto3" json:"TaskServiceCreated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogStoreHeartbeat) Reset()         { *m = LogStoreHeartbeat{} }
func (m *LogStoreHeartbeat) String() string { return proto.CompactTextString(m) }
func (*LogStoreHeartbeat) ProtoMessage()    {}
func (*LogStoreHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{7}
}
func (m *LogStoreHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStoreHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStoreHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStoreHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStoreHeartbeat.Merge(m, src)
}
func (m *LogStoreHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *LogStoreHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStoreHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_LogStoreHeartbeat proto.InternalMessageInfo

func (m *LogStoreHeartbeat) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogStoreHeartbeat) GetRaftAddress() string {
	if m != nil {
		return m.RaftAddress
	}
	return ""
}

func (m *LogStoreHeartbeat) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *LogStoreHeartbeat) GetGossipAddress() string {
	if m != nil {
		return m.GossipAddress
	}
	return ""
}

func (m *LogStoreHeartbeat) GetReplicas() []LogReplicaInfo {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *LogStoreHeartbeat) GetTaskServiceCreated() bool {
	if m != nil {
		return m.TaskServiceCreated
	}
	return false
}

// DNShardInfo contains information of a launched DN shard.
type DNShardInfo struct {
	// ShardID uniquely identifies a DN shard. Each DN shard manages a Primary
	// Key range or hashed Primary Key value range.
	ShardID uint64 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	// ReplicaID uniquely identifies a DN shard instance. After repairing a
	// failed DN shard, a new DN shard instance is created with a new ReplicaID
	// value.
	ReplicaID            uint64   `protobuf:"varint,2,opt,name=ReplicaID,proto3" json:"ReplicaID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNShardInfo) Reset()         { *m = DNShardInfo{} }
func (m *DNShardInfo) String() string { return proto.CompactTextString(m) }
func (*DNShardInfo) ProtoMessage()    {}
func (*DNShardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{8}
}
func (m *DNShardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNShardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNShardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNShardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNShardInfo.Merge(m, src)
}
func (m *DNShardInfo) XXX_Size() int {
	return m.Size()
}
func (m *DNShardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DNShardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DNShardInfo proto.InternalMessageInfo

func (m *DNShardInfo) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *DNShardInfo) GetReplicaID() uint64 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

// DNStoreHeartbeat is the periodic message sent to the HAKeeper by DN stores.
type DNStoreHeartbeat struct {
	// UUID is the uuid of the DN Store.
	UUID           string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ServiceAddress string `protobuf:"bytes,2,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	// Shards is a list of DNShardInfo instances collected on the specified
	// DN store.
	Shards             []DNShardInfo `protobuf:"bytes,3,rep,name=Shards,proto3" json:"Shards"`
	TaskServiceCreated bool          `protobuf:"varint,4,opt,name=TaskServiceCreated,proto3" json:"TaskServiceCreated,omitempty"`
	// Server address for logtail push model
	LogtailServerAddress string `protobuf:"bytes,5,opt,name=LogtailServerAddress,proto3" json:"LogtailServerAddress,omitempty"`
	// LockServiceAddress lock service address for lock table allocator
	LockServiceAddress   string   `protobuf:"bytes,6,opt,name=LockServiceAddress,proto3" json:"LockServiceAddress,omitempty"`
	CtlAddress           string   `protobuf:"bytes,7,opt,name=CtlAddress,proto3" json:"CtlAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNStoreHeartbeat) Reset()         { *m = DNStoreHeartbeat{} }
func (m *DNStoreHeartbeat) String() string { return proto.CompactTextString(m) }
func (*DNStoreHeartbeat) ProtoMessage()    {}
func (*DNStoreHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{9}
}
func (m *DNStoreHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNStoreHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNStoreHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNStoreHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNStoreHeartbeat.Merge(m, src)
}
func (m *DNStoreHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *DNStoreHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_DNStoreHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_DNStoreHeartbeat proto.InternalMessageInfo

func (m *DNStoreHeartbeat) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DNStoreHeartbeat) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *DNStoreHeartbeat) GetShards() []DNShardInfo {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *DNStoreHeartbeat) GetTaskServiceCreated() bool {
	if m != nil {
		return m.TaskServiceCreated
	}
	return false
}

func (m *DNStoreHeartbeat) GetLogtailServerAddress() string {
	if m != nil {
		return m.LogtailServerAddress
	}
	return ""
}

func (m *DNStoreHeartbeat) GetLockServiceAddress() string {
	if m != nil {
		return m.LockServiceAddress
	}
	return ""
}

func (m *DNStoreHeartbeat) GetCtlAddress() string {
	if m != nil {
		return m.CtlAddress
	}
	return ""
}

type RSMState struct {
	Tso                  uint64            `protobuf:"varint,1,opt,name=Tso,proto3" json:"Tso,omitempty"`
	Index                uint64            `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	LeaseHolderID        uint64            `protobuf:"varint,3,opt,name=LeaseHolderID,proto3" json:"LeaseHolderID,omitempty"`
	TruncatedLsn         uint64            `protobuf:"varint,4,opt,name=TruncatedLsn,proto3" json:"TruncatedLsn,omitempty"`
	LeaseHistory         map[uint64]uint64 `protobuf:"bytes,5,rep,name=LeaseHistory,proto3" json:"LeaseHistory,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RSMState) Reset()         { *m = RSMState{} }
func (m *RSMState) String() string { return proto.CompactTextString(m) }
func (*RSMState) ProtoMessage()    {}
func (*RSMState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{10}
}
func (m *RSMState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSMState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RSMState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RSMState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSMState.Merge(m, src)
}
func (m *RSMState) XXX_Size() int {
	return m.Size()
}
func (m *RSMState) XXX_DiscardUnknown() {
	xxx_messageInfo_RSMState.DiscardUnknown(m)
}

var xxx_messageInfo_RSMState proto.InternalMessageInfo

func (m *RSMState) GetTso() uint64 {
	if m != nil {
		return m.Tso
	}
	return 0
}

func (m *RSMState) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RSMState) GetLeaseHolderID() uint64 {
	if m != nil {
		return m.LeaseHolderID
	}
	return 0
}

func (m *RSMState) GetTruncatedLsn() uint64 {
	if m != nil {
		return m.TruncatedLsn
	}
	return 0
}

func (m *RSMState) GetLeaseHistory() map[uint64]uint64 {
	if m != nil {
		return m.LeaseHistory
	}
	return nil
}

// LogRecord is what we store into the LogService.
type LogRecord struct {
	Lsn                  uint64     `protobuf:"varint,1,opt,name=Lsn,proto3" json:"Lsn,omitempty"`
	Type                 RecordType `protobuf:"varint,2,opt,name=Type,proto3,enum=logservice.RecordType" json:"Type,omitempty"`
	Data                 []byte     `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LogRecord) Reset()         { *m = LogRecord{} }
func (m *LogRecord) String() string { return proto.CompactTextString(m) }
func (*LogRecord) ProtoMessage()    {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{11}
}
func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return m.Size()
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetLsn() uint64 {
	if m != nil {
		return m.Lsn
	}
	return 0
}

func (m *LogRecord) GetType() RecordType {
	if m != nil {
		return m.Type
	}
	return UserRecord
}

func (m *LogRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LogRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ShardID              uint64   `protobuf:"varint,2,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Lsn                  uint64   `protobuf:"varint,3,opt,name=Lsn,proto3" json:"Lsn,omitempty"`
	MaxSize              uint64   `protobuf:"varint,4,opt,name=MaxSize,proto3" json:"MaxSize,omitempty"`
	DNShardID            uint64   `protobuf:"varint,5,opt,name=DNShardID,proto3" json:"DNShardID,omitempty"`
	DNID                 uint64   `protobuf:"varint,6,opt,name=DNID,proto3" json:"DNID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{12}
}
func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(m, src)
}
func (m *LogRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LogRequest) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *LogRequest) GetLsn() uint64 {
	if m != nil {
		return m.Lsn
	}
	return 0
}

func (m *LogRequest) GetMaxSize() uint64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *LogRequest) GetDNShardID() uint64 {
	if m != nil {
		return m.DNShardID
	}
	return 0
}

func (m *LogRequest) GetDNID() uint64 {
	if m != nil {
		return m.DNID
	}
	return 0
}

type TsoRequest struct {
	Count                uint64   `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TsoRequest) Reset()         { *m = TsoRequest{} }
func (m *TsoRequest) String() string { return proto.CompactTextString(m) }
func (*TsoRequest) ProtoMessage()    {}
func (*TsoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{13}
}
func (m *TsoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TsoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TsoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TsoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TsoRequest.Merge(m, src)
}
func (m *TsoRequest) XXX_Size() int {
	return m.Size()
}
func (m *TsoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TsoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TsoRequest proto.InternalMessageInfo

func (m *TsoRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CNStoreLabel struct {
	// UUID is the uuid of the CN store.
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Operation is the CN label operation.
	// TODO(volgariver6): Unused field.
	Operation CNLabelOp `protobuf:"varint,2,opt,name=Operation,proto3,enum=logservice.CNLabelOp" json:"Operation,omitempty"`
	// Labels is the labels of the CN store.
	Labels               map[string]metadata.LabelList `protobuf:"bytes,3,rep,name=Labels,proto3" json:"Labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CNStoreLabel) Reset()         { *m = CNStoreLabel{} }
func (m *CNStoreLabel) String() string { return proto.CompactTextString(m) }
func (*CNStoreLabel) ProtoMessage()    {}
func (*CNStoreLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{14}
}
func (m *CNStoreLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNStoreLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNStoreLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNStoreLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNStoreLabel.Merge(m, src)
}
func (m *CNStoreLabel) XXX_Size() int {
	return m.Size()
}
func (m *CNStoreLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_CNStoreLabel.DiscardUnknown(m)
}

var xxx_messageInfo_CNStoreLabel proto.InternalMessageInfo

func (m *CNStoreLabel) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CNStoreLabel) GetOperation() CNLabelOp {
	if m != nil {
		return m.Operation
	}
	return SetLabel
}

func (m *CNStoreLabel) GetLabels() map[string]metadata.LabelList {
	if m != nil {
		return m.Labels
	}
	return nil
}

type CNWorkState struct {
	// UUID is the uuid of the CN store.
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// State is the CN work state.
	State                metadata.WorkState `protobuf:"varint,2,opt,name=State,proto3,enum=metadata.WorkState" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CNWorkState) Reset()         { *m = CNWorkState{} }
func (m *CNWorkState) String() string { return proto.CompactTextString(m) }
func (*CNWorkState) ProtoMessage()    {}
func (*CNWorkState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{15}
}
func (m *CNWorkState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNWorkState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNWorkState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNWorkState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNWorkState.Merge(m, src)
}
func (m *CNWorkState) XXX_Size() int {
	return m.Size()
}
func (m *CNWorkState) XXX_DiscardUnknown() {
	xxx_messageInfo_CNWorkState.DiscardUnknown(m)
}

var xxx_messageInfo_CNWorkState proto.InternalMessageInfo

func (m *CNWorkState) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CNWorkState) GetState() metadata.WorkState {
	if m != nil {
		return m.State
	}
	return metadata.WorkState_Unknown
}

type CNStateLabel struct {
	// UUID is the uuid of the CN store.
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// State is the CN work state.
	State metadata.WorkState `protobuf:"varint,2,opt,name=State,proto3,enum=metadata.WorkState" json:"State,omitempty"`
	// Labels is the labels of the CN store.
	Labels               map[string]metadata.LabelList `protobuf:"bytes,3,rep,name=Labels,proto3" json:"Labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CNStateLabel) Reset()         { *m = CNStateLabel{} }
func (m *CNStateLabel) String() string { return proto.CompactTextString(m) }
func (*CNStateLabel) ProtoMessage()    {}
func (*CNStateLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{16}
}
func (m *CNStateLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNStateLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNStateLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNStateLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNStateLabel.Merge(m, src)
}
func (m *CNStateLabel) XXX_Size() int {
	return m.Size()
}
func (m *CNStateLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_CNStateLabel.DiscardUnknown(m)
}

var xxx_messageInfo_CNStateLabel proto.InternalMessageInfo

func (m *CNStateLabel) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CNStateLabel) GetState() metadata.WorkState {
	if m != nil {
		return m.State
	}
	return metadata.WorkState_Unknown
}

func (m *CNStateLabel) GetLabels() map[string]metadata.LabelList {
	if m != nil {
		return m.Labels
	}
	return nil
}

type Request struct {
	RequestID            uint64             `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Method               MethodType         `protobuf:"varint,2,opt,name=Method,proto3,enum=logservice.MethodType" json:"Method,omitempty"`
	LogRequest           LogRequest         `protobuf:"bytes,3,opt,name=LogRequest,proto3" json:"LogRequest"`
	LogHeartbeat         *LogStoreHeartbeat `protobuf:"bytes,4,opt,name=LogHeartbeat,proto3" json:"LogHeartbeat,omitempty"`
	CNHeartbeat          *CNStoreHeartbeat  `protobuf:"bytes,5,opt,name=CNHeartbeat,proto3" json:"CNHeartbeat,omitempty"`
	DNHeartbeat          *DNStoreHeartbeat  `protobuf:"bytes,6,opt,name=DNHeartbeat,proto3" json:"DNHeartbeat,omitempty"`
	TsoRequest           *TsoRequest        `protobuf:"bytes,7,opt,name=TsoRequest,proto3" json:"TsoRequest,omitempty"`
	CNAllocateID         *CNAllocateID      `protobuf:"bytes,8,opt,name=CNAllocateID,proto3" json:"CNAllocateID,omitempty"`
	CNStoreLabel         *CNStoreLabel      `protobuf:"bytes,9,opt,name=CNStoreLabel,proto3" json:"CNStoreLabel,omitempty"`
	CNWorkState          *CNWorkState       `protobuf:"bytes,10,opt,name=CNWorkState,proto3" json:"CNWorkState,omitempty"`
	CNStateLabel         *CNStateLabel      `protobuf:"bytes,11,opt,name=CNStateLabel,proto3" json:"CNStateLabel,omitempty"`
	DeleteCNStore        *DeleteCNStore     `protobuf:"bytes,12,opt,name=DeleteCNStore,proto3" json:"DeleteCNStore,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{17}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *Request) GetMethod() MethodType {
	if m != nil {
		return m.Method
	}
	return TSO_UPDATE
}

func (m *Request) GetLogRequest() LogRequest {
	if m != nil {
		return m.LogRequest
	}
	return LogRequest{}
}

func (m *Request) GetLogHeartbeat() *LogStoreHeartbeat {
	if m != nil {
		return m.LogHeartbeat
	}
	return nil
}

func (m *Request) GetCNHeartbeat() *CNStoreHeartbeat {
	if m != nil {
		return m.CNHeartbeat
	}
	return nil
}

func (m *Request) GetDNHeartbeat() *DNStoreHeartbeat {
	if m != nil {
		return m.DNHeartbeat
	}
	return nil
}

func (m *Request) GetTsoRequest() *TsoRequest {
	if m != nil {
		return m.TsoRequest
	}
	return nil
}

func (m *Request) GetCNAllocateID() *CNAllocateID {
	if m != nil {
		return m.CNAllocateID
	}
	return nil
}

func (m *Request) GetCNStoreLabel() *CNStoreLabel {
	if m != nil {
		return m.CNStoreLabel
	}
	return nil
}

func (m *Request) GetCNWorkState() *CNWorkState {
	if m != nil {
		return m.CNWorkState
	}
	return nil
}

func (m *Request) GetCNStateLabel() *CNStateLabel {
	if m != nil {
		return m.CNStateLabel
	}
	return nil
}

func (m *Request) GetDeleteCNStore() *DeleteCNStore {
	if m != nil {
		return m.DeleteCNStore
	}
	return nil
}

type LogResponse struct {
	ShardID              uint64   `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Lsn                  uint64   `protobuf:"varint,2,opt,name=Lsn,proto3" json:"Lsn,omitempty"`
	LastLsn              uint64   `protobuf:"varint,3,opt,name=LastLsn,proto3" json:"LastLsn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResponse) Reset()         { *m = LogResponse{} }
func (m *LogResponse) String() string { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()    {}
func (*LogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{18}
}
func (m *LogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponse.Merge(m, src)
}
func (m *LogResponse) XXX_Size() int {
	return m.Size()
}
func (m *LogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponse proto.InternalMessageInfo

func (m *LogResponse) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *LogResponse) GetLsn() uint64 {
	if m != nil {
		return m.Lsn
	}
	return 0
}

func (m *LogResponse) GetLastLsn() uint64 {
	if m != nil {
		return m.LastLsn
	}
	return 0
}

type AllocateIDResponse struct {
	FirstID              uint64   `protobuf:"varint,1,opt,name=FirstID,proto3" json:"FirstID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateIDResponse) Reset()         { *m = AllocateIDResponse{} }
func (m *AllocateIDResponse) String() string { return proto.CompactTextString(m) }
func (*AllocateIDResponse) ProtoMessage()    {}
func (*AllocateIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{19}
}
func (m *AllocateIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocateIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocateIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIDResponse.Merge(m, src)
}
func (m *AllocateIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllocateIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIDResponse proto.InternalMessageInfo

func (m *AllocateIDResponse) GetFirstID() uint64 {
	if m != nil {
		return m.FirstID
	}
	return 0
}

type Response struct {
	RequestID            uint64                `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Method               MethodType            `protobuf:"varint,2,opt,name=Method,proto3,enum=logservice.MethodType" json:"Method,omitempty"`
	ErrorCode            uint32                `protobuf:"varint,3,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	ErrorMessage         string                `protobuf:"bytes,4,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	IsHAKeeper           bool                  `protobuf:"varint,5,opt,name=IsHAKeeper,proto3" json:"IsHAKeeper,omitempty"`
	LogResponse          LogResponse           `protobuf:"bytes,6,opt,name=LogResponse,proto3" json:"LogResponse"`
	CommandBatch         *CommandBatch         `protobuf:"bytes,7,opt,name=CommandBatch,proto3" json:"CommandBatch,omitempty"`
	TsoResponse          *TsoResponse          `protobuf:"bytes,8,opt,name=TsoResponse,proto3" json:"TsoResponse,omitempty"`
	ClusterDetails       *ClusterDetails       `protobuf:"bytes,9,opt,name=ClusterDetails,proto3" json:"ClusterDetails,omitempty"`
	ShardInfo            *ShardInfoQueryResult `protobuf:"bytes,10,opt,name=ShardInfo,proto3" json:"ShardInfo,omitempty"`
	AllocateID           *AllocateIDResponse   `protobuf:"bytes,11,opt,name=AllocateID,proto3" json:"AllocateID,omitempty"`
	CheckerState         *CheckerState         `protobuf:"bytes,12,opt,name=CheckerState,proto3" json:"CheckerState,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{20}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *Response) GetMethod() MethodType {
	if m != nil {
		return m.Method
	}
	return TSO_UPDATE
}

func (m *Response) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *Response) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *Response) GetIsHAKeeper() bool {
	if m != nil {
		return m.IsHAKeeper
	}
	return false
}

func (m *Response) GetLogResponse() LogResponse {
	if m != nil {
		return m.LogResponse
	}
	return LogResponse{}
}

func (m *Response) GetCommandBatch() *CommandBatch {
	if m != nil {
		return m.CommandBatch
	}
	return nil
}

func (m *Response) GetTsoResponse() *TsoResponse {
	if m != nil {
		return m.TsoResponse
	}
	return nil
}

func (m *Response) GetClusterDetails() *ClusterDetails {
	if m != nil {
		return m.ClusterDetails
	}
	return nil
}

func (m *Response) GetShardInfo() *ShardInfoQueryResult {
	if m != nil {
		return m.ShardInfo
	}
	return nil
}

func (m *Response) GetAllocateID() *AllocateIDResponse {
	if m != nil {
		return m.AllocateID
	}
	return nil
}

func (m *Response) GetCheckerState() *CheckerState {
	if m != nil {
		return m.CheckerState
	}
	return nil
}

type LogRecordResponse struct {
	Records              []LogRecord `protobuf:"bytes,1,rep,name=Records,proto3" json:"Records"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LogRecordResponse) Reset()         { *m = LogRecordResponse{} }
func (m *LogRecordResponse) String() string { return proto.CompactTextString(m) }
func (*LogRecordResponse) ProtoMessage()    {}
func (*LogRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{21}
}
func (m *LogRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecordResponse.Merge(m, src)
}
func (m *LogRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *LogRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecordResponse proto.InternalMessageInfo

func (m *LogRecordResponse) GetRecords() []LogRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type TsoResponse struct {
	Value                uint64   `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TsoResponse) Reset()         { *m = TsoResponse{} }
func (m *TsoResponse) String() string { return proto.CompactTextString(m) }
func (*TsoResponse) ProtoMessage()    {}
func (*TsoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{22}
}
func (m *TsoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TsoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TsoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TsoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TsoResponse.Merge(m, src)
}
func (m *TsoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TsoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TsoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TsoResponse proto.InternalMessageInfo

func (m *TsoResponse) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TaskTableUser struct {
	// Username for task table user
	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	// Password for task table user
	Password             string   `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskTableUser) Reset()         { *m = TaskTableUser{} }
func (m *TaskTableUser) String() string { return proto.CompactTextString(m) }
func (*TaskTableUser) ProtoMessage()    {}
func (*TaskTableUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{23}
}
func (m *TaskTableUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskTableUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskTableUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskTableUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskTableUser.Merge(m, src)
}
func (m *TaskTableUser) XXX_Size() int {
	return m.Size()
}
func (m *TaskTableUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskTableUser.DiscardUnknown(m)
}

var xxx_messageInfo_TaskTableUser proto.InternalMessageInfo

func (m *TaskTableUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TaskTableUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Replica of the shard
type Replica struct {
	// UUID which store the Replica is located in
	UUID      string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ShardID   uint64 `protobuf:"varint,2,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	ReplicaID uint64 `protobuf:"varint,3,opt,name=ReplicaID,proto3" json:"ReplicaID,omitempty"`
	Epoch     uint64 `protobuf:"varint,4,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	// LogShardID only used for DNShard.
	LogShardID           uint64   `protobuf:"varint,5,opt,name=LogShardID,proto3" json:"LogShardID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Replica) Reset()         { *m = Replica{} }
func (m *Replica) String() string { return proto.CompactTextString(m) }
func (*Replica) ProtoMessage()    {}
func (*Replica) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{24}
}
func (m *Replica) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Replica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Replica.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Replica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Replica.Merge(m, src)
}
func (m *Replica) XXX_Size() int {
	return m.Size()
}
func (m *Replica) XXX_DiscardUnknown() {
	xxx_messageInfo_Replica.DiscardUnknown(m)
}

var xxx_messageInfo_Replica proto.InternalMessageInfo

func (m *Replica) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Replica) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Replica) GetReplicaID() uint64 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

func (m *Replica) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Replica) GetLogShardID() uint64 {
	if m != nil {
		return m.LogShardID
	}
	return 0
}

// ConfigChange is the detail of a config change.
type ConfigChange struct {
	Replica    Replica          `protobuf:"bytes,1,opt,name=Replica,proto3" json:"Replica"`
	ChangeType ConfigChangeType `protobuf:"varint,2,opt,name=ChangeType,proto3,enum=logservice.ConfigChangeType" json:"ChangeType,omitempty"`
	// only used for bootstrap
	InitialMembers       map[uint64]string `protobuf:"bytes,3,rep,name=InitialMembers,proto3" json:"InitialMembers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConfigChange) Reset()         { *m = ConfigChange{} }
func (m *ConfigChange) String() string { return proto.CompactTextString(m) }
func (*ConfigChange) ProtoMessage()    {}
func (*ConfigChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{25}
}
func (m *ConfigChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigChange.Merge(m, src)
}
func (m *ConfigChange) XXX_Size() int {
	return m.Size()
}
func (m *ConfigChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigChange.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigChange proto.InternalMessageInfo

func (m *ConfigChange) GetReplica() Replica {
	if m != nil {
		return m.Replica
	}
	return Replica{}
}

func (m *ConfigChange) GetChangeType() ConfigChangeType {
	if m != nil {
		return m.ChangeType
	}
	return AddReplica
}

func (m *ConfigChange) GetInitialMembers() map[uint64]string {
	if m != nil {
		return m.InitialMembers
	}
	return nil
}

// ShutdownStore would stop store.
type ShutdownStore struct {
	StoreID              string   `protobuf:"bytes,1,opt,name=StoreID,proto3" json:"StoreID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutdownStore) Reset()         { *m = ShutdownStore{} }
func (m *ShutdownStore) String() string { return proto.CompactTextString(m) }
func (*ShutdownStore) ProtoMessage()    {}
func (*ShutdownStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{26}
}
func (m *ShutdownStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutdownStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutdownStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutdownStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownStore.Merge(m, src)
}
func (m *ShutdownStore) XXX_Size() int {
	return m.Size()
}
func (m *ShutdownStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownStore.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownStore proto.InternalMessageInfo

func (m *ShutdownStore) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

// ScheduleCommand contains a shard schedule command.
type ScheduleCommand struct {
	// UUID which store the ScheduleCommand is sent to
	UUID                 string             `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Bootstrapping        bool               `protobuf:"varint,2,opt,name=Bootstrapping,proto3" json:"Bootstrapping,omitempty"`
	ServiceType          ServiceType        `protobuf:"varint,3,opt,name=ServiceType,proto3,enum=logservice.ServiceType" json:"ServiceType,omitempty"`
	ConfigChange         *ConfigChange      `protobuf:"bytes,4,opt,name=ConfigChange,proto3" json:"ConfigChange,omitempty"`
	ShutdownStore        *ShutdownStore     `protobuf:"bytes,5,opt,name=ShutdownStore,proto3" json:"ShutdownStore,omitempty"`
	CreateTaskService    *CreateTaskService `protobuf:"bytes,6,opt,name=CreateTaskService,proto3" json:"CreateTaskService,omitempty"`
	DeleteCNStore        *DeleteCNStore     `protobuf:"bytes,7,opt,name=DeleteCNStore,proto3" json:"DeleteCNStore,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ScheduleCommand) Reset()         { *m = ScheduleCommand{} }
func (m *ScheduleCommand) String() string { return proto.CompactTextString(m) }
func (*ScheduleCommand) ProtoMessage()    {}
func (*ScheduleCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{27}
}
func (m *ScheduleCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleCommand.Merge(m, src)
}
func (m *ScheduleCommand) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleCommand proto.InternalMessageInfo

func (m *ScheduleCommand) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ScheduleCommand) GetBootstrapping() bool {
	if m != nil {
		return m.Bootstrapping
	}
	return false
}

func (m *ScheduleCommand) GetServiceType() ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return LogService
}

func (m *ScheduleCommand) GetConfigChange() *ConfigChange {
	if m != nil {
		return m.ConfigChange
	}
	return nil
}

func (m *ScheduleCommand) GetShutdownStore() *ShutdownStore {
	if m != nil {
		return m.ShutdownStore
	}
	return nil
}

func (m *ScheduleCommand) GetCreateTaskService() *CreateTaskService {
	if m != nil {
		return m.CreateTaskService
	}
	return nil
}

func (m *ScheduleCommand) GetDeleteCNStore() *DeleteCNStore {
	if m != nil {
		return m.DeleteCNStore
	}
	return nil
}

// CreateTaskService start task service at current node
type CreateTaskService struct {
	// User used to connect to the task database.
	User TaskTableUser `protobuf:"bytes,1,opt,name=User,proto3" json:"User"`
	// TaskDatabase task framework database.
	TaskDatabase         string   `protobuf:"bytes,2,opt,name=TaskDatabase,proto3" json:"TaskDatabase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTaskService) Reset()         { *m = CreateTaskService{} }
func (m *CreateTaskService) String() string { return proto.CompactTextString(m) }
func (*CreateTaskService) ProtoMessage()    {}
func (*CreateTaskService) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{28}
}
func (m *CreateTaskService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTaskService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTaskService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTaskService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTaskService.Merge(m, src)
}
func (m *CreateTaskService) XXX_Size() int {
	return m.Size()
}
func (m *CreateTaskService) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTaskService.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTaskService proto.InternalMessageInfo

func (m *CreateTaskService) GetUser() TaskTableUser {
	if m != nil {
		return m.User
	}
	return TaskTableUser{}
}

func (m *CreateTaskService) GetTaskDatabase() string {
	if m != nil {
		return m.TaskDatabase
	}
	return ""
}

// DeleteCNStore deletes CN store from CNState to save hakeeper's memory.
type DeleteCNStore struct {
	StoreID              string   `protobuf:"bytes,1,opt,name=StoreID,proto3" json:"StoreID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCNStore) Reset()         { *m = DeleteCNStore{} }
func (m *DeleteCNStore) String() string { return proto.CompactTextString(m) }
func (*DeleteCNStore) ProtoMessage()    {}
func (*DeleteCNStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{29}
}
func (m *DeleteCNStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCNStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCNStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCNStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCNStore.Merge(m, src)
}
func (m *DeleteCNStore) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCNStore) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCNStore.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCNStore proto.InternalMessageInfo

func (m *DeleteCNStore) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

type CommandBatch struct {
	Term                 uint64            `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Commands             []ScheduleCommand `protobuf:"bytes,2,rep,name=Commands,proto3" json:"Commands"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CommandBatch) Reset()         { *m = CommandBatch{} }
func (m *CommandBatch) String() string { return proto.CompactTextString(m) }
func (*CommandBatch) ProtoMessage()    {}
func (*CommandBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{30}
}
func (m *CommandBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandBatch.Merge(m, src)
}
func (m *CommandBatch) XXX_Size() int {
	return m.Size()
}
func (m *CommandBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandBatch.DiscardUnknown(m)
}

var xxx_messageInfo_CommandBatch proto.InternalMessageInfo

func (m *CommandBatch) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *CommandBatch) GetCommands() []ScheduleCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

// CNStoreInfo contains information on a CN store.
type CNStoreInfo struct {
	Tick                 uint64                        `protobuf:"varint,1,opt,name=Tick,proto3" json:"Tick,omitempty"`
	ServiceAddress       string                        `protobuf:"bytes,2,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	SQLAddress           string                        `protobuf:"bytes,3,opt,name=SQLAddress,proto3" json:"SQLAddress,omitempty"`
	LockServiceAddress   string                        `protobuf:"bytes,4,opt,name=LockServiceAddress,proto3" json:"LockServiceAddress,omitempty"`
	CtlAddress           string                        `protobuf:"bytes,5,opt,name=CtlAddress,proto3" json:"CtlAddress,omitempty"`
	Role                 metadata.CNRole               `protobuf:"varint,6,opt,name=Role,proto3,enum=metadata.CNRole" json:"Role,omitempty"`
	TaskServiceCreated   bool                          `protobuf:"varint,7,opt,name=TaskServiceCreated,proto3" json:"TaskServiceCreated,omitempty"`
	Labels               map[string]metadata.LabelList `protobuf:"bytes,8,rep,name=Labels,proto3" json:"Labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkState            metadata.WorkState            `protobuf:"varint,9,opt,name=WorkState,proto3,enum=metadata.WorkState" json:"WorkState,omitempty"`
	QueryAddress         string                        `protobuf:"bytes,10,opt,name=QueryAddress,proto3" json:"QueryAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CNStoreInfo) Reset()         { *m = CNStoreInfo{} }
func (m *CNStoreInfo) String() string { return proto.CompactTextString(m) }
func (*CNStoreInfo) ProtoMessage()    {}
func (*CNStoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{31}
}
func (m *CNStoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNStoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNStoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNStoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNStoreInfo.Merge(m, src)
}
func (m *CNStoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *CNStoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CNStoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CNStoreInfo proto.InternalMessageInfo

func (m *CNStoreInfo) GetTick() uint64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *CNStoreInfo) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *CNStoreInfo) GetSQLAddress() string {
	if m != nil {
		return m.SQLAddress
	}
	return ""
}

func (m *CNStoreInfo) GetLockServiceAddress() string {
	if m != nil {
		return m.LockServiceAddress
	}
	return ""
}

func (m *CNStoreInfo) GetCtlAddress() string {
	if m != nil {
		return m.CtlAddress
	}
	return ""
}

func (m *CNStoreInfo) GetRole() metadata.CNRole {
	if m != nil {
		return m.Role
	}
	return metadata.CNRole_TP
}

func (m *CNStoreInfo) GetTaskServiceCreated() bool {
	if m != nil {
		return m.TaskServiceCreated
	}
	return false
}

func (m *CNStoreInfo) GetLabels() map[string]metadata.LabelList {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CNStoreInfo) GetWorkState() metadata.WorkState {
	if m != nil {
		return m.WorkState
	}
	return metadata.WorkState_Unknown
}

func (m *CNStoreInfo) GetQueryAddress() string {
	if m != nil {
		return m.QueryAddress
	}
	return ""
}

// CNState contains all CN details known to the HAKeeper.
type CNState struct {
	// Stores is keyed by CN store UUID.
	Stores               map[string]CNStoreInfo `protobuf:"bytes,1,rep,name=Stores,proto3" json:"Stores" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CNState) Reset()         { *m = CNState{} }
func (m *CNState) String() string { return proto.CompactTextString(m) }
func (*CNState) ProtoMessage()    {}
func (*CNState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{32}
}
func (m *CNState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNState.Merge(m, src)
}
func (m *CNState) XXX_Size() int {
	return m.Size()
}
func (m *CNState) XXX_DiscardUnknown() {
	xxx_messageInfo_CNState.DiscardUnknown(m)
}

var xxx_messageInfo_CNState proto.InternalMessageInfo

func (m *CNState) GetStores() map[string]CNStoreInfo {
	if m != nil {
		return m.Stores
	}
	return nil
}

// DNStoreInfo contains information on a DN store.
type DNStoreInfo struct {
	Tick               uint64        `protobuf:"varint,1,opt,name=Tick,proto3" json:"Tick,omitempty"`
	ServiceAddress     string        `protobuf:"bytes,2,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	Shards             []DNShardInfo `protobuf:"bytes,3,rep,name=Shards,proto3" json:"Shards"`
	TaskServiceCreated bool          `protobuf:"varint,4,opt,name=TaskServiceCreated,proto3" json:"TaskServiceCreated,omitempty"`
	// Server address for logtail push model
	LogtailServerAddress string `protobuf:"bytes,5,opt,name=LogtailServerAddress,proto3" json:"LogtailServerAddress,omitempty"`
	// LockServiceAddress lock service address for lock table allocator
	LockServiceAddress   string   `protobuf:"bytes,6,opt,name=LockServiceAddress,proto3" json:"LockServiceAddress,omitempty"`
	CtlAddress           string   `protobuf:"bytes,7,opt,name=CtlAddress,proto3" json:"CtlAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNStoreInfo) Reset()         { *m = DNStoreInfo{} }
func (m *DNStoreInfo) String() string { return proto.CompactTextString(m) }
func (*DNStoreInfo) ProtoMessage()    {}
func (*DNStoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{33}
}
func (m *DNStoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNStoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNStoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNStoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNStoreInfo.Merge(m, src)
}
func (m *DNStoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *DNStoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DNStoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DNStoreInfo proto.InternalMessageInfo

func (m *DNStoreInfo) GetTick() uint64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *DNStoreInfo) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *DNStoreInfo) GetShards() []DNShardInfo {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *DNStoreInfo) GetTaskServiceCreated() bool {
	if m != nil {
		return m.TaskServiceCreated
	}
	return false
}

func (m *DNStoreInfo) GetLogtailServerAddress() string {
	if m != nil {
		return m.LogtailServerAddress
	}
	return ""
}

func (m *DNStoreInfo) GetLockServiceAddress() string {
	if m != nil {
		return m.LockServiceAddress
	}
	return ""
}

func (m *DNStoreInfo) GetCtlAddress() string {
	if m != nil {
		return m.CtlAddress
	}
	return ""
}

// DNState contains all DN details known to the HAKeeper.
type DNState struct {
	// Stores is keyed by DN store UUID.
	Stores               map[string]DNStoreInfo `protobuf:"bytes,1,rep,name=Stores,proto3" json:"Stores" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DNState) Reset()         { *m = DNState{} }
func (m *DNState) String() string { return proto.CompactTextString(m) }
func (*DNState) ProtoMessage()    {}
func (*DNState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{34}
}
func (m *DNState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNState.Merge(m, src)
}
func (m *DNState) XXX_Size() int {
	return m.Size()
}
func (m *DNState) XXX_DiscardUnknown() {
	xxx_messageInfo_DNState.DiscardUnknown(m)
}

var xxx_messageInfo_DNState proto.InternalMessageInfo

func (m *DNState) GetStores() map[string]DNStoreInfo {
	if m != nil {
		return m.Stores
	}
	return nil
}

type ClusterDetails struct {
	DNStores             []DNStore  `protobuf:"bytes,1,rep,name=DNStores,proto3" json:"DNStores"`
	CNStores             []CNStore  `protobuf:"bytes,2,rep,name=CNStores,proto3" json:"CNStores"`
	LogStores            []LogStore `protobuf:"bytes,3,rep,name=LogStores,proto3" json:"LogStores"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ClusterDetails) Reset()         { *m = ClusterDetails{} }
func (m *ClusterDetails) String() string { return proto.CompactTextString(m) }
func (*ClusterDetails) ProtoMessage()    {}
func (*ClusterDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{35}
}
func (m *ClusterDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterDetails.Merge(m, src)
}
func (m *ClusterDetails) XXX_Size() int {
	return m.Size()
}
func (m *ClusterDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterDetails proto.InternalMessageInfo

func (m *ClusterDetails) GetDNStores() []DNStore {
	if m != nil {
		return m.DNStores
	}
	return nil
}

func (m *ClusterDetails) GetCNStores() []CNStore {
	if m != nil {
		return m.CNStores
	}
	return nil
}

func (m *ClusterDetails) GetLogStores() []LogStore {
	if m != nil {
		return m.LogStores
	}
	return nil
}

// ClusterInfo provides a global view of all shards in the cluster. It
// describes the logical sharding of the system, rather than physical
// distribution of all replicas that belong to those shards.
type ClusterInfo struct {
	DNShards             []metadata.DNShardRecord  `protobuf:"bytes,1,rep,name=DNShards,proto3" json:"DNShards"`
	LogShards            []metadata.LogShardRecord `protobuf:"bytes,2,rep,name=LogShards,proto3" json:"LogShards"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ClusterInfo) Reset()         { *m = ClusterInfo{} }
func (m *ClusterInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterInfo) ProtoMessage()    {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{36}
}
func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetDNShards() []metadata.DNShardRecord {
	if m != nil {
		return m.DNShards
	}
	return nil
}

func (m *ClusterInfo) GetLogShards() []metadata.LogShardRecord {
	if m != nil {
		return m.LogShards
	}
	return nil
}

type InitialClusterRequest struct {
	NumOfLogShards       uint64   `protobuf:"varint,1,opt,name=NumOfLogShards,proto3" json:"NumOfLogShards,omitempty"`
	NumOfDNShards        uint64   `protobuf:"varint,2,opt,name=NumOfDNShards,proto3" json:"NumOfDNShards,omitempty"`
	NumOfLogReplicas     uint64   `protobuf:"varint,3,opt,name=NumOfLogReplicas,proto3" json:"NumOfLogReplicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitialClusterRequest) Reset()         { *m = InitialClusterRequest{} }
func (m *InitialClusterRequest) String() string { return proto.CompactTextString(m) }
func (*InitialClusterRequest) ProtoMessage()    {}
func (*InitialClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{37}
}
func (m *InitialClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitialClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitialClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitialClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitialClusterRequest.Merge(m, src)
}
func (m *InitialClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitialClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitialClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitialClusterRequest proto.InternalMessageInfo

func (m *InitialClusterRequest) GetNumOfLogShards() uint64 {
	if m != nil {
		return m.NumOfLogShards
	}
	return 0
}

func (m *InitialClusterRequest) GetNumOfDNShards() uint64 {
	if m != nil {
		return m.NumOfDNShards
	}
	return 0
}

func (m *InitialClusterRequest) GetNumOfLogReplicas() uint64 {
	if m != nil {
		return m.NumOfLogReplicas
	}
	return 0
}

// LogStoreInfo contains information of all replicas found on a Log store.
type LogStoreInfo struct {
	Tick                 uint64           `protobuf:"varint,1,opt,name=Tick,proto3" json:"Tick,omitempty"`
	RaftAddress          string           `protobuf:"bytes,2,opt,name=RaftAddress,proto3" json:"RaftAddress,omitempty"`
	ServiceAddress       string           `protobuf:"bytes,3,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	GossipAddress        string           `protobuf:"bytes,4,opt,name=GossipAddress,proto3" json:"GossipAddress,omitempty"`
	Replicas             []LogReplicaInfo `protobuf:"bytes,5,rep,name=Replicas,proto3" json:"Replicas"`
	TaskServiceCreated   bool             `protobuf:"varint,6,opt,name=TaskServiceCreated,proto3" json:"TaskServiceCreated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LogStoreInfo) Reset()         { *m = LogStoreInfo{} }
func (m *LogStoreInfo) String() string { return proto.CompactTextString(m) }
func (*LogStoreInfo) ProtoMessage()    {}
func (*LogStoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{38}
}
func (m *LogStoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStoreInfo.Merge(m, src)
}
func (m *LogStoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *LogStoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogStoreInfo proto.InternalMessageInfo

func (m *LogStoreInfo) GetTick() uint64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *LogStoreInfo) GetRaftAddress() string {
	if m != nil {
		return m.RaftAddress
	}
	return ""
}

func (m *LogStoreInfo) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *LogStoreInfo) GetGossipAddress() string {
	if m != nil {
		return m.GossipAddress
	}
	return ""
}

func (m *LogStoreInfo) GetReplicas() []LogReplicaInfo {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *LogStoreInfo) GetTaskServiceCreated() bool {
	if m != nil {
		return m.TaskServiceCreated
	}
	return false
}

type LogState struct {
	// Shards is keyed by ShardID, it contains details aggregated from all Log
	// stores. Each pb.LogShardInfo here contains data aggregated from
	// different replicas and thus reflect a more accurate description on each
	// shard.
	Shards map[uint64]LogShardInfo `protobuf:"bytes,1,rep,name=Shards,proto3" json:"Shards" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Stores is keyed by log store UUID, it contains details found on each
	// store. Each LogStoreInfo here reflects what was last reported by each Log
	// store.
	Stores               map[string]LogStoreInfo `protobuf:"bytes,2,rep,name=Stores,proto3" json:"Stores" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LogState) Reset()         { *m = LogState{} }
func (m *LogState) String() string { return proto.CompactTextString(m) }
func (*LogState) ProtoMessage()    {}
func (*LogState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{39}
}
func (m *LogState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogState.Merge(m, src)
}
func (m *LogState) XXX_Size() int {
	return m.Size()
}
func (m *LogState) XXX_DiscardUnknown() {
	xxx_messageInfo_LogState.DiscardUnknown(m)
}

var xxx_messageInfo_LogState proto.InternalMessageInfo

func (m *LogState) GetShards() map[uint64]LogShardInfo {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *LogState) GetStores() map[string]LogStoreInfo {
	if m != nil {
		return m.Stores
	}
	return nil
}

// CheckerState contains all HAKeeper state required for making schedule
// commands.
type CheckerState struct {
	Tick                 uint64             `protobuf:"varint,1,opt,name=Tick,proto3" json:"Tick,omitempty"`
	ClusterInfo          ClusterInfo        `protobuf:"bytes,2,opt,name=ClusterInfo,proto3" json:"ClusterInfo"`
	DNState              DNState            `protobuf:"bytes,3,opt,name=DNState,proto3" json:"DNState"`
	LogState             LogState           `protobuf:"bytes,4,opt,name=LogState,proto3" json:"LogState"`
	CNState              CNState            `protobuf:"bytes,5,opt,name=CNState,proto3" json:"CNState"`
	State                HAKeeperState      `protobuf:"varint,6,opt,name=State,proto3,enum=logservice.HAKeeperState" json:"State,omitempty"`
	TaskSchedulerState   TaskSchedulerState `protobuf:"varint,7,opt,name=TaskSchedulerState,proto3,enum=logservice.TaskSchedulerState" json:"TaskSchedulerState,omitempty"`
	TaskTableUser        TaskTableUser      `protobuf:"bytes,8,opt,name=TaskTableUser,proto3" json:"TaskTableUser"`
	NextId               uint64             `protobuf:"varint,9,opt,name=NextId,proto3" json:"NextId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CheckerState) Reset()         { *m = CheckerState{} }
func (m *CheckerState) String() string { return proto.CompactTextString(m) }
func (*CheckerState) ProtoMessage()    {}
func (*CheckerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{40}
}
func (m *CheckerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckerState.Merge(m, src)
}
func (m *CheckerState) XXX_Size() int {
	return m.Size()
}
func (m *CheckerState) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckerState.DiscardUnknown(m)
}

var xxx_messageInfo_CheckerState proto.InternalMessageInfo

func (m *CheckerState) GetTick() uint64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *CheckerState) GetClusterInfo() ClusterInfo {
	if m != nil {
		return m.ClusterInfo
	}
	return ClusterInfo{}
}

func (m *CheckerState) GetDNState() DNState {
	if m != nil {
		return m.DNState
	}
	return DNState{}
}

func (m *CheckerState) GetLogState() LogState {
	if m != nil {
		return m.LogState
	}
	return LogState{}
}

func (m *CheckerState) GetCNState() CNState {
	if m != nil {
		return m.CNState
	}
	return CNState{}
}

func (m *CheckerState) GetState() HAKeeperState {
	if m != nil {
		return m.State
	}
	return HAKeeperCreated
}

func (m *CheckerState) GetTaskSchedulerState() TaskSchedulerState {
	if m != nil {
		return m.TaskSchedulerState
	}
	return TaskSchedulerCreated
}

func (m *CheckerState) GetTaskTableUser() TaskTableUser {
	if m != nil {
		return m.TaskTableUser
	}
	return TaskTableUser{}
}

func (m *CheckerState) GetNextId() uint64 {
	if m != nil {
		return m.NextId
	}
	return 0
}

// HAKeeperRSMState contains state maintained by HAKeeper's RSM.
type HAKeeperRSMState struct {
	Index uint64 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Tick  uint64 `protobuf:"varint,2,opt,name=Tick,proto3" json:"Tick,omitempty"`
	// NextID is a shared, global ID.
	NextID uint64 `protobuf:"varint,3,opt,name=NextID,proto3" json:"NextID,omitempty"`
	// NextIDByKey is IDs isolated by keys.
	NextIDByKey          map[string]uint64       `protobuf:"bytes,4,rep,name=NextIDByKey,proto3" json:"NextIDByKey,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Term                 uint64                  `protobuf:"varint,5,opt,name=Term,proto3" json:"Term,omitempty"`
	State                HAKeeperState           `protobuf:"varint,6,opt,name=State,proto3,enum=logservice.HAKeeperState" json:"State,omitempty"`
	TaskSchedulerState   TaskSchedulerState      `protobuf:"varint,7,opt,name=TaskSchedulerState,proto3,enum=logservice.TaskSchedulerState" json:"TaskSchedulerState,omitempty"`
	ScheduleCommands     map[string]CommandBatch `protobuf:"bytes,8,rep,name=ScheduleCommands,proto3" json:"ScheduleCommands" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LogShards            map[string]uint64       `protobuf:"bytes,9,rep,name=LogShards,proto3" json:"LogShards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CNState              CNState                 `protobuf:"bytes,10,opt,name=CNState,proto3" json:"CNState"`
	DNState              DNState                 `protobuf:"bytes,11,opt,name=DNState,proto3" json:"DNState"`
	LogState             LogState                `protobuf:"bytes,12,opt,name=LogState,proto3" json:"LogState"`
	ClusterInfo          ClusterInfo             `protobuf:"bytes,13,opt,name=ClusterInfo,proto3" json:"ClusterInfo"`
	TaskTableUser        TaskTableUser           `protobuf:"bytes,14,opt,name=TaskTableUser,proto3" json:"TaskTableUser"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HAKeeperRSMState) Reset()         { *m = HAKeeperRSMState{} }
func (m *HAKeeperRSMState) String() string { return proto.CompactTextString(m) }
func (*HAKeeperRSMState) ProtoMessage()    {}
func (*HAKeeperRSMState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{41}
}
func (m *HAKeeperRSMState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HAKeeperRSMState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HAKeeperRSMState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HAKeeperRSMState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HAKeeperRSMState.Merge(m, src)
}
func (m *HAKeeperRSMState) XXX_Size() int {
	return m.Size()
}
func (m *HAKeeperRSMState) XXX_DiscardUnknown() {
	xxx_messageInfo_HAKeeperRSMState.DiscardUnknown(m)
}

var xxx_messageInfo_HAKeeperRSMState proto.InternalMessageInfo

func (m *HAKeeperRSMState) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *HAKeeperRSMState) GetTick() uint64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *HAKeeperRSMState) GetNextID() uint64 {
	if m != nil {
		return m.NextID
	}
	return 0
}

func (m *HAKeeperRSMState) GetNextIDByKey() map[string]uint64 {
	if m != nil {
		return m.NextIDByKey
	}
	return nil
}

func (m *HAKeeperRSMState) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *HAKeeperRSMState) GetState() HAKeeperState {
	if m != nil {
		return m.State
	}
	return HAKeeperCreated
}

func (m *HAKeeperRSMState) GetTaskSchedulerState() TaskSchedulerState {
	if m != nil {
		return m.TaskSchedulerState
	}
	return TaskSchedulerCreated
}

func (m *HAKeeperRSMState) GetScheduleCommands() map[string]CommandBatch {
	if m != nil {
		return m.ScheduleCommands
	}
	return nil
}

func (m *HAKeeperRSMState) GetLogShards() map[string]uint64 {
	if m != nil {
		return m.LogShards
	}
	return nil
}

func (m *HAKeeperRSMState) GetCNState() CNState {
	if m != nil {
		return m.CNState
	}
	return CNState{}
}

func (m *HAKeeperRSMState) GetDNState() DNState {
	if m != nil {
		return m.DNState
	}
	return DNState{}
}

func (m *HAKeeperRSMState) GetLogState() LogState {
	if m != nil {
		return m.LogState
	}
	return LogState{}
}

func (m *HAKeeperRSMState) GetClusterInfo() ClusterInfo {
	if m != nil {
		return m.ClusterInfo
	}
	return ClusterInfo{}
}

func (m *HAKeeperRSMState) GetTaskTableUser() TaskTableUser {
	if m != nil {
		return m.TaskTableUser
	}
	return TaskTableUser{}
}

// ReplicaInfo contains details of a replica
type ReplicaInfo struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ServiceAddress       string   `protobuf:"bytes,2,opt,name=ServiceAddress,proto3" json:"ServiceAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicaInfo) Reset()         { *m = ReplicaInfo{} }
func (m *ReplicaInfo) String() string { return proto.CompactTextString(m) }
func (*ReplicaInfo) ProtoMessage()    {}
func (*ReplicaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{42}
}
func (m *ReplicaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaInfo.Merge(m, src)
}
func (m *ReplicaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaInfo proto.InternalMessageInfo

func (m *ReplicaInfo) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ReplicaInfo) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

// ShardInfoQueryResult contains the result of the shard info query.
type ShardInfoQueryResult struct {
	ShardID              uint64                 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Replicas             map[uint64]ReplicaInfo `protobuf:"bytes,2,rep,name=Replicas,proto3" json:"Replicas" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Epoch                uint64                 `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	LeaderID             uint64                 `protobuf:"varint,4,opt,name=LeaderID,proto3" json:"LeaderID,omitempty"`
	Term                 uint64                 `protobuf:"varint,5,opt,name=Term,proto3" json:"Term,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ShardInfoQueryResult) Reset()         { *m = ShardInfoQueryResult{} }
func (m *ShardInfoQueryResult) String() string { return proto.CompactTextString(m) }
func (*ShardInfoQueryResult) ProtoMessage()    {}
func (*ShardInfoQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1040c5381ab5a7, []int{43}
}
func (m *ShardInfoQueryResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardInfoQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardInfoQueryResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardInfoQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardInfoQueryResult.Merge(m, src)
}
func (m *ShardInfoQueryResult) XXX_Size() int {
	return m.Size()
}
func (m *ShardInfoQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardInfoQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_ShardInfoQueryResult proto.InternalMessageInfo

func (m *ShardInfoQueryResult) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *ShardInfoQueryResult) GetReplicas() map[uint64]ReplicaInfo {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *ShardInfoQueryResult) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ShardInfoQueryResult) GetLeaderID() uint64 {
	if m != nil {
		return m.LeaderID
	}
	return 0
}

func (m *ShardInfoQueryResult) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func init() {
	proto.RegisterEnum("logservice.UpdateType", UpdateType_name, UpdateType_value)
	proto.RegisterEnum("logservice.NodeState", NodeState_name, NodeState_value)
	proto.RegisterEnum("logservice.MethodType", MethodType_name, MethodType_value)
	proto.RegisterEnum("logservice.RecordType", RecordType_name, RecordType_value)
	proto.RegisterEnum("logservice.CNLabelOp", CNLabelOp_name, CNLabelOp_value)
	proto.RegisterEnum("logservice.HAKeeperUpdateType", HAKeeperUpdateType_name, HAKeeperUpdateType_value)
	proto.RegisterEnum("logservice.HAKeeperState", HAKeeperState_name, HAKeeperState_value)
	proto.RegisterEnum("logservice.TaskSchedulerState", TaskSchedulerState_name, TaskSchedulerState_value)
	proto.RegisterEnum("logservice.ConfigChangeType", ConfigChangeType_name, ConfigChangeType_value)
	proto.RegisterEnum("logservice.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterType((*CNStore)(nil), "logservice.CNStore")
	proto.RegisterMapType((map[string]metadata.LabelList)(nil), "logservice.CNStore.LabelsEntry")
	proto.RegisterType((*DNStore)(nil), "logservice.DNStore")
	proto.RegisterType((*LogStore)(nil), "logservice.LogStore")
	proto.RegisterType((*LogShardInfo)(nil), "logservice.LogShardInfo")
	proto.RegisterMapType((map[uint64]string)(nil), "logservice.LogShardInfo.ReplicasEntry")
	proto.RegisterType((*LogReplicaInfo)(nil), "logservice.LogReplicaInfo")
	proto.RegisterType((*CNStoreHeartbeat)(nil), "logservice.CNStoreHeartbeat")
	proto.RegisterType((*CNAllocateID)(nil), "logservice.CNAllocateID")
	proto.RegisterType((*LogStoreHeartbeat)(nil), "logservice.LogStoreHeartbeat")
	proto.RegisterType((*DNShardInfo)(nil), "logservice.DNShardInfo")
	proto.RegisterType((*DNStoreHeartbeat)(nil), "logservice.DNStoreHeartbeat")
	proto.RegisterType((*RSMState)(nil), "logservice.RSMState")
	proto.RegisterMapType((map[uint64]uint64)(nil), "logservice.RSMState.LeaseHistoryEntry")
	proto.RegisterType((*LogRecord)(nil), "logservice.LogRecord")
	proto.RegisterType((*LogRequest)(nil), "logservice.LogRequest")
	proto.RegisterType((*TsoRequest)(nil), "logservice.TsoRequest")
	proto.RegisterType((*CNStoreLabel)(nil), "logservice.CNStoreLabel")
	proto.RegisterMapType((map[string]metadata.LabelList)(nil), "logservice.CNStoreLabel.LabelsEntry")
	proto.RegisterType((*CNWorkState)(nil), "logservice.CNWorkState")
	proto.RegisterType((*CNStateLabel)(nil), "logservice.CNStateLabel")
	proto.RegisterMapType((map[string]metadata.LabelList)(nil), "logservice.CNStateLabel.LabelsEntry")
	proto.RegisterType((*Request)(nil), "logservice.Request")
	proto.RegisterType((*LogResponse)(nil), "logservice.LogResponse")
	proto.RegisterType((*AllocateIDResponse)(nil), "logservice.AllocateIDResponse")
	proto.RegisterType((*Response)(nil), "logservice.Response")
	proto.RegisterType((*LogRecordResponse)(nil), "logservice.LogRecordResponse")
	proto.RegisterType((*TsoResponse)(nil), "logservice.TsoResponse")
	proto.RegisterType((*TaskTableUser)(nil), "logservice.TaskTableUser")
	proto.RegisterType((*Replica)(nil), "logservice.Replica")
	proto.RegisterType((*ConfigChange)(nil), "logservice.ConfigChange")
	proto.RegisterMapType((map[uint64]string)(nil), "logservice.ConfigChange.InitialMembersEntry")
	proto.RegisterType((*ShutdownStore)(nil), "logservice.ShutdownStore")
	proto.RegisterType((*ScheduleCommand)(nil), "logservice.ScheduleCommand")
	proto.RegisterType((*CreateTaskService)(nil), "logservice.CreateTaskService")
	proto.RegisterType((*DeleteCNStore)(nil), "logservice.DeleteCNStore")
	proto.RegisterType((*CommandBatch)(nil), "logservice.CommandBatch")
	proto.RegisterType((*CNStoreInfo)(nil), "logservice.CNStoreInfo")
	proto.RegisterMapType((map[string]metadata.LabelList)(nil), "logservice.CNStoreInfo.LabelsEntry")
	proto.RegisterType((*CNState)(nil), "logservice.CNState")
	proto.RegisterMapType((map[string]CNStoreInfo)(nil), "logservice.CNState.StoresEntry")
	proto.RegisterType((*DNStoreInfo)(nil), "logservice.DNStoreInfo")
	proto.RegisterType((*DNState)(nil), "logservice.DNState")
	proto.RegisterMapType((map[string]DNStoreInfo)(nil), "logservice.DNState.StoresEntry")
	proto.RegisterType((*ClusterDetails)(nil), "logservice.ClusterDetails")
	proto.RegisterType((*ClusterInfo)(nil), "logservice.ClusterInfo")
	proto.RegisterType((*InitialClusterRequest)(nil), "logservice.InitialClusterRequest")
	proto.RegisterType((*LogStoreInfo)(nil), "logservice.LogStoreInfo")
	proto.RegisterType((*LogState)(nil), "logservice.LogState")
	proto.RegisterMapType((map[uint64]LogShardInfo)(nil), "logservice.LogState.ShardsEntry")
	proto.RegisterMapType((map[string]LogStoreInfo)(nil), "logservice.LogState.StoresEntry")
	proto.RegisterType((*CheckerState)(nil), "logservice.CheckerState")
	proto.RegisterType((*HAKeeperRSMState)(nil), "logservice.HAKeeperRSMState")
	proto.RegisterMapType((map[string]uint64)(nil), "logservice.HAKeeperRSMState.LogShardsEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "logservice.HAKeeperRSMState.NextIDByKeyEntry")
	proto.RegisterMapType((map[string]CommandBatch)(nil), "logservice.HAKeeperRSMState.ScheduleCommandsEntry")
	proto.RegisterType((*ReplicaInfo)(nil), "logservice.ReplicaInfo")
	proto.RegisterType((*ShardInfoQueryResult)(nil), "logservice.ShardInfoQueryResult")
	proto.RegisterMapType((map[uint64]ReplicaInfo)(nil), "logservice.ShardInfoQueryResult.ReplicasEntry")
}

func init() { proto.RegisterFile("logservice.proto", fileDescriptor_fd1040c5381ab5a7) }

var fileDescriptor_fd1040c5381ab5a7 = []byte{
	// 3190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x3a, 0xcd, 0x6f, 0x1b, 0xc7,
	0xf5, 0x5a, 0x92, 0x12, 0xc9, 0x47, 0x51, 0x5e, 0x8d, 0x24, 0x9b, 0x51, 0xf2, 0x93, 0xf5, 0xdb,
	0xb8, 0x81, 0xa3, 0x34, 0x34, 0x2a, 0x21, 0x41, 0xd2, 0x28, 0x36, 0x28, 0x92, 0xb6, 0x18, 0xd1,
	0x94, 0x32, 0xa4, 0x1a, 0x20, 0x40, 0xa0, 0xae, 0xc8, 0x31, 0xc5, 0x8a, 0xe4, 0xb2, 0xbb, 0x4b,
	0xc7, 0xea, 0xa9, 0x28, 0xd0, 0x02, 0x45, 0x4f, 0x45, 0x2f, 0x41, 0x51, 0xf4, 0xaf, 0xc8, 0xa1,
	0x3d, 0xf6, 0xd0, 0x22, 0x47, 0xff, 0x05, 0x41, 0x13, 0xa0, 0x97, 0xf6, 0x50, 0xa0, 0x87, 0x02,
	0xbd, 0x15, 0xf3, 0xb5, 0x3b, 0xc3, 0x5d, 0xea, 0x23, 0x71, 0xd3, 0x22, 0x39, 0x91, 0xf3, 0xbe,
	0xe6, 0xcd, 0xfb, 0x9a, 0x37, 0x33, 0x0b, 0x66, 0xdf, 0xe9, 0x7a, 0xc4, 0x7d, 0xdc, 0x6b, 0x93,
	0xe2, 0xc8, 0x75, 0x7c, 0x07, 0x41, 0x08, 0x59, 0x7d, 0xb5, 0xdb, 0xf3, 0x4f, 0xc6, 0xc7, 0xc5,
	0xb6, 0x33, 0xb8, 0xd3, 0x75, 0xba, 0xce, 0x1d, 0x46, 0x72, 0x3c, 0x7e, 0xc4, 0x46, 0x6c, 0xc0,
	0xfe, 0x71, 0xd6, 0xd5, 0x85, 0x01, 0xf1, 0xed, 0x8e, 0xed, 0xdb, 0x7c, 0x6c, 0xfd, 0x24, 0x05,
	0xe9, 0x72, 0xa3, 0xe9, 0x3b, 0x2e, 0x41, 0x08, 0x52, 0x87, 0x87, 0xb5, 0x4a, 0xc1, 0x58, 0x37,
	0x6e, 0x67, 0x31, 0xfb, 0x8f, 0x5e, 0x82, 0x85, 0x26, 0x9f, 0xa9, 0xd4, 0xe9, 0xb8, 0xc4, 0xf3,
	0x0a, 0x09, 0x86, 0x9d, 0x80, 0xa2, 0x35, 0x80, 0xe6, 0xbb, 0x75, 0x49, 0x93, 0x64, 0x34, 0x0a,
	0x04, 0x15, 0x01, 0xd5, 0x9d, 0xf6, 0xe9, 0x84, 0xac, 0x14, 0xa3, 0x8b, 0xc1, 0x50, 0x79, 0x65,
	0xbf, 0x2f, 0xe9, 0x66, 0xb9, 0xbc, 0x10, 0x82, 0x6e, 0x41, 0x0a, 0x3b, 0x7d, 0x52, 0x98, 0x5b,
	0x37, 0x6e, 0x2f, 0x6c, 0x9a, 0xc5, 0x60, 0x59, 0xe5, 0x06, 0x85, 0x63, 0x86, 0xa5, 0x2b, 0x6a,
	0xf5, 0xda, 0xa7, 0x85, 0xf4, 0xba, 0x71, 0x3b, 0x85, 0xd9, 0x7f, 0xf4, 0x0a, 0xcc, 0x36, 0x7d,
	0xdb, 0x27, 0x85, 0x0c, 0x63, 0x5d, 0x29, 0x2a, 0xe6, 0x6d, 0x38, 0x1d, 0xc2, 0x90, 0x98, 0xd3,
	0xa0, 0xb7, 0x61, 0xae, 0x6e, 0x1f, 0x93, 0xbe, 0x57, 0xc8, 0xae, 0x27, 0x6f, 0xe7, 0x36, 0x6f,
	0xaa, 0xd4, 0xc2, 0x6e, 0x45, 0x4e, 0x51, 0x1d, 0xfa, 0xee, 0xd9, 0x4e, 0xea, 0x93, 0x4f, 0x6f,
	0xce, 0x60, 0xc1, 0x84, 0xbe, 0x03, 0xd9, 0xf7, 0x1c, 0xf7, 0x94, 0xcf, 0x07, 0x6c, 0xbe, 0xa5,
	0x50, 0xd5, 0x00, 0x85, 0x43, 0x2a, 0x64, 0xc1, 0xfc, 0xbb, 0x63, 0xe2, 0x9e, 0xc9, 0xa5, 0xe7,
	0xd8, 0xd2, 0x35, 0xd8, 0x6a, 0x03, 0x72, 0xca, 0x9c, 0xc8, 0x84, 0xe4, 0x29, 0x39, 0x13, 0x6e,
	0xa3, 0x7f, 0xd1, 0xcb, 0x30, 0xfb, 0xd8, 0xee, 0x8f, 0x09, 0x73, 0x56, 0x4e, 0x9d, 0x93, 0xf1,
	0xd5, 0x7b, 0x9e, 0x8f, 0x39, 0xc5, 0x77, 0x13, 0x6f, 0x18, 0xd6, 0x1f, 0x12, 0x90, 0xae, 0x3c,
	0x83, 0x20, 0x90, 0xe6, 0x4e, 0xc6, 0x99, 0x3b, 0x75, 0x09, 0x73, 0xbf, 0x06, 0x73, 0xcd, 0x13,
	0xdb, 0xed, 0x50, 0x8f, 0x53, 0x73, 0xdf, 0x50, 0xa9, 0x2b, 0x0d, 0x86, 0xab, 0x0d, 0x1f, 0x39,
	0xd2, 0xcc, 0x9c, 0x18, 0x6d, 0xc2, 0x72, 0xdd, 0xe9, 0xfa, 0x76, 0xaf, 0x4f, 0x15, 0x22, 0xae,
	0xd4, 0x72, 0x8e, 0x69, 0x19, 0x8b, 0x9b, 0x12, 0x90, 0xe9, 0x4b, 0x06, 0x64, 0x66, 0x32, 0x20,
	0xad, 0x3f, 0x1a, 0x90, 0xa9, 0x3b, 0xdd, 0xff, 0x01, 0x23, 0x6e, 0x43, 0x06, 0x93, 0x51, 0xbf,
	0xd7, 0xb6, 0xa5, 0x19, 0x57, 0x55, 0xfa, 0xba, 0xd3, 0x15, 0x68, 0xc5, 0x92, 0x01, 0x87, 0xf5,
	0x77, 0x03, 0xe6, 0xe9, 0x3a, 0xa4, 0xa9, 0x51, 0x01, 0xd2, 0x7c, 0xc0, 0x97, 0x93, 0xc2, 0x72,
	0x88, 0x76, 0x94, 0x89, 0x12, 0x6c, 0xa2, 0x97, 0x26, 0x26, 0x0a, 0xa4, 0x14, 0x25, 0x21, 0x8b,
	0xd8, 0x70, 0x3a, 0xb4, 0x0c, 0xb3, 0xd5, 0x91, 0xd3, 0x3e, 0x11, 0xcb, 0xe5, 0x03, 0xb4, 0x0a,
	0x99, 0x3a, 0xb1, 0x3b, 0xc4, 0xad, 0x55, 0xd8, 0x92, 0x53, 0x38, 0x18, 0x33, 0xfb, 0x10, 0x77,
	0xc0, 0x6a, 0x02, 0xb5, 0x0f, 0x71, 0x07, 0xab, 0x6f, 0x41, 0x5e, 0x9b, 0x40, 0x4d, 0x89, 0x14,
	0x4f, 0x89, 0x65, 0x35, 0x25, 0xb2, 0x6a, 0xf4, 0x3f, 0x86, 0x05, 0xdd, 0x26, 0xe8, 0xbe, 0x6e,
	0x02, 0x26, 0x26, 0xb7, 0x59, 0x98, 0xb6, 0xb8, 0x9d, 0x0c, 0xb5, 0xe1, 0xd3, 0x4f, 0x6f, 0x1a,
	0x58, 0x37, 0xdd, 0x0b, 0x90, 0x95, 0x62, 0x2b, 0x6c, 0xde, 0x14, 0x0e, 0x01, 0xd6, 0xa7, 0x09,
	0x30, 0x45, 0x09, 0xd9, 0x25, 0xb6, 0xeb, 0x1f, 0x13, 0xdb, 0xff, 0x1a, 0xd6, 0xe0, 0x22, 0xa0,
	0x96, 0xed, 0x49, 0xd9, 0x65, 0x97, 0xd8, 0x3e, 0xe9, 0xb0, 0x44, 0xcb, 0xe0, 0x18, 0x4c, 0xa4,
	0x00, 0x66, 0xa2, 0x05, 0x10, 0xdd, 0x82, 0x7c, 0x6d, 0xd8, 0xf3, 0xc3, 0xda, 0x9a, 0x65, 0x44,
	0x3a, 0xd0, 0x7a, 0x1d, 0xe6, 0xcb, 0x8d, 0x52, 0xbf, 0xef, 0xb4, 0x6d, 0x9f, 0xd4, 0x2a, 0x31,
	0x75, 0x72, 0x19, 0x66, 0x77, 0x6c, 0xbf, 0x7d, 0x22, 0x9c, 0xc3, 0x07, 0xd6, 0x4f, 0x13, 0xb0,
	0x28, 0x53, 0xf9, 0x7c, 0xcf, 0xac, 0x43, 0x0e, 0xdb, 0x8f, 0x7c, 0xdd, 0x2d, 0x2a, 0x28, 0xc6,
	0x77, 0xc9, 0x58, 0xdf, 0xdd, 0x82, 0xfc, 0x03, 0xc7, 0xf3, 0x7a, 0x23, 0xdd, 0x2d, 0x3a, 0xf0,
	0xcb, 0xa5, 0xf6, 0x14, 0x4f, 0xcc, 0x4d, 0xf3, 0x84, 0x55, 0x85, 0x9c, 0x52, 0x73, 0xcf, 0x29,
	0x04, 0xe7, 0xc7, 0xf9, 0xef, 0x13, 0x60, 0x56, 0x9e, 0x65, 0x9c, 0x87, 0xbb, 0x44, 0xf2, 0x2a,
	0xbb, 0x44, 0xfc, 0xf2, 0x53, 0x53, 0x03, 0x71, 0xda, 0xae, 0x32, 0x7b, 0xe5, 0x5d, 0x65, 0xee,
	0x92, 0x29, 0x96, 0x8e, 0xec, 0x2a, 0x3f, 0x4f, 0x40, 0x06, 0x37, 0x1f, 0xf2, 0xc2, 0x6e, 0x42,
	0xb2, 0xe5, 0x39, 0xb2, 0xa8, 0xb5, 0x3c, 0x87, 0xc6, 0x6f, 0x6d, 0xd8, 0x21, 0x4f, 0x64, 0xfc,
	0xb2, 0x01, 0x8d, 0xa5, 0x3a, 0xb1, 0x3d, 0xb2, 0xeb, 0xf4, 0x79, 0x09, 0xe5, 0xb5, 0x55, 0x07,
	0xd2, 0x3c, 0x6b, 0xb9, 0xe3, 0x21, 0xcd, 0x8d, 0x4e, 0xdd, 0x1b, 0x8a, 0x3a, 0xab, 0xc1, 0xd0,
	0x3b, 0x30, 0xcf, 0x99, 0x7a, 0x9e, 0xef, 0xb8, 0x67, 0x22, 0xe6, 0xb4, 0x2a, 0x2f, 0xb5, 0x2b,
	0xaa, 0x84, 0xbc, 0xca, 0x6b, 0xbc, 0xab, 0xf7, 0x60, 0x31, 0x42, 0x72, 0x51, 0x9d, 0x4e, 0xa9,
	0x75, 0xfa, 0x03, 0xc8, 0xb2, 0x00, 0x6f, 0x3b, 0x6e, 0x87, 0x32, 0x52, 0xa5, 0x05, 0x23, 0xd5,
	0x75, 0x03, 0x52, 0xad, 0xb3, 0x11, 0xe7, 0x5b, 0xd8, 0xbc, 0xae, 0xe9, 0xc8, 0x78, 0x28, 0x16,
	0x33, 0x1a, 0x1a, 0x7d, 0x15, 0xdb, 0xb7, 0x99, 0x61, 0xe6, 0x31, 0xfb, 0x6f, 0x7d, 0x64, 0x00,
	0x30, 0xf9, 0x3f, 0x1c, 0x13, 0x8f, 0x05, 0x68, 0xc3, 0x1e, 0x10, 0x19, 0xa0, 0xf4, 0xbf, 0x9a,
	0x01, 0x09, 0x3d, 0x03, 0x84, 0x3a, 0xc9, 0x50, 0x9d, 0x02, 0xa4, 0x1f, 0xda, 0x4f, 0x9a, 0xbd,
	0x1f, 0x11, 0x61, 0x59, 0x39, 0xa4, 0xd9, 0x22, 0x83, 0xb4, 0x22, 0x76, 0xb1, 0x10, 0xc0, 0x54,
	0x6b, 0xd4, 0x2a, 0x2c, 0x66, 0x52, 0x98, 0xfd, 0xb7, 0x2c, 0x80, 0x96, 0xe7, 0x48, 0xcd, 0x96,
	0x61, 0xb6, 0xec, 0x8c, 0x87, 0xbe, 0x58, 0x3c, 0x1f, 0x58, 0x7f, 0x33, 0x68, 0xb5, 0x63, 0x59,
	0xc6, 0x7a, 0xbc, 0xd8, 0x0c, 0xdb, 0x82, 0xec, 0xfe, 0x88, 0xb8, 0xb6, 0xdf, 0x73, 0x86, 0xc2,
	0x50, 0x2b, 0x7a, 0x47, 0xcb, 0x78, 0xf7, 0x47, 0x38, 0xa4, 0x43, 0x3b, 0x41, 0x0f, 0xcc, 0xd3,
	0xed, 0x56, 0x4c, 0x0f, 0xcc, 0x08, 0xa6, 0x37, 0xc2, 0xcf, 0xbc, 0x63, 0xad, 0x43, 0xae, 0xdc,
	0x08, 0x9b, 0xe6, 0xb8, 0xb5, 0xbe, 0x2c, 0x7b, 0xa6, 0xc4, 0xf4, 0xbe, 0x9b, 0x53, 0x58, 0x9f,
	0x09, 0xdb, 0xd9, 0xfe, 0x39, 0xb6, 0xbb, 0xbc, 0xbc, 0x8b, 0x2d, 0x26, 0x27, 0xfa, 0x0a, 0x2d,
	0xf6, 0xa7, 0x59, 0x48, 0xcb, 0x08, 0x62, 0xf5, 0x9a, 0xfd, 0x0d, 0x6a, 0x79, 0x08, 0x40, 0x45,
	0x98, 0x7b, 0x48, 0xfc, 0x13, 0xa7, 0x13, 0x97, 0x4a, 0x1c, 0xc3, 0x52, 0x49, 0x50, 0xa1, 0x6d,
	0x35, 0x6f, 0x58, 0x0a, 0xe4, 0x74, 0x9e, 0x10, 0x2b, 0xd6, 0xa8, 0xe6, 0x59, 0x89, 0xf5, 0x5a,
	0xc1, 0xc6, 0xc0, 0x92, 0x25, 0xb7, 0xf9, 0x7f, 0x93, 0xbd, 0x96, 0xb6, 0x7b, 0x60, 0x8d, 0x05,
	0xdd, 0xa5, 0xc1, 0x10, 0x4a, 0x98, 0x65, 0x12, 0x5e, 0x88, 0x89, 0xd2, 0x50, 0x80, 0xca, 0x40,
	0xf9, 0x2b, 0x0a, 0xff, 0x5c, 0x94, 0xbf, 0x12, 0xe1, 0x57, 0x18, 0xd0, 0xeb, 0x6a, 0x7a, 0xb2,
	0x22, 0x3e, 0x61, 0x80, 0x10, 0x8b, 0xd5, 0x44, 0xde, 0xd6, 0xfb, 0x13, 0xd6, 0xe9, 0x4c, 0xb4,
	0x99, 0x2a, 0x1e, 0xeb, 0xdd, 0xcc, 0xb6, 0x9e, 0xef, 0xac, 0x05, 0x8a, 0x70, 0x87, 0x78, 0xac,
	0x57, 0x87, 0x37, 0xb5, 0x04, 0x62, 0x67, 0xd3, 0x89, 0x8d, 0x54, 0x41, 0x63, 0x2d, 0xd9, 0xb6,
	0xf5, 0x64, 0x61, 0x27, 0xd4, 0x98, 0x89, 0x25, 0x1e, 0xeb, 0xa9, 0x75, 0x0f, 0xf2, 0x15, 0xd2,
	0x27, 0x3e, 0x11, 0xea, 0x14, 0xe6, 0x19, 0xfb, 0x73, 0x9a, 0xb9, 0x55, 0x02, 0xac, 0xd3, 0x5b,
	0x4d, 0xc8, 0xb1, 0xf0, 0xf1, 0x46, 0xce, 0xd0, 0x23, 0xe7, 0x74, 0x25, 0xa2, 0x26, 0x27, 0xb4,
	0x9a, 0x5c, 0xb7, 0x3d, 0x3f, 0xac, 0xd4, 0x72, 0x68, 0x15, 0x01, 0x29, 0x86, 0x56, 0x64, 0xdf,
	0xef, 0xb9, 0x4a, 0x96, 0xc8, 0xa1, 0xf5, 0xcf, 0x14, 0xed, 0xc4, 0x04, 0xd9, 0xb3, 0x4d, 0xa7,
	0x17, 0x20, 0x5b, 0x75, 0x5d, 0xc7, 0x2d, 0x3b, 0x1d, 0xc2, 0xd4, 0xcc, 0xe3, 0x10, 0x40, 0x77,
	0x6d, 0x36, 0x78, 0x48, 0x3c, 0xcf, 0xee, 0x12, 0xd1, 0x26, 0x6a, 0x30, 0xda, 0x54, 0xd4, 0xbc,
	0xdd, 0xd2, 0x1e, 0x21, 0x23, 0xe2, 0xb2, 0x74, 0xc8, 0x60, 0x05, 0x82, 0xee, 0x69, 0x16, 0x14,
	0xf1, 0x7e, 0x23, 0x92, 0xb1, 0x1c, 0x2d, 0x52, 0x56, 0xb3, 0x39, 0x8d, 0x00, 0x67, 0x30, 0xb0,
	0x87, 0x1d, 0xde, 0x3d, 0xa7, 0x63, 0x22, 0x40, 0xc1, 0x63, 0x8d, 0x9a, 0x86, 0x1e, 0x4b, 0x02,
	0x31, 0x7d, 0x26, 0x3a, 0xbd, 0x82, 0xc6, 0x2a, 0x2d, 0xda, 0x81, 0x85, 0x72, 0x7f, 0xec, 0xf9,
	0xc4, 0xad, 0x10, 0xda, 0x7c, 0x79, 0x22, 0xea, 0xb5, 0x2e, 0x58, 0xa7, 0xc0, 0x13, 0x1c, 0xe8,
	0x2e, 0x64, 0xc3, 0x93, 0x1d, 0x8f, 0xfb, 0x75, 0x95, 0x3d, 0x40, 0xb2, 0x13, 0x07, 0x26, 0xde,
	0xb8, 0xef, 0xe3, 0x90, 0x05, 0xdd, 0x05, 0x50, 0x72, 0x96, 0x07, 0xff, 0x9a, 0x2a, 0x20, 0x1a,
	0x48, 0x18, 0x26, 0xf2, 0xf6, 0x84, 0xb4, 0x4f, 0x89, 0xcb, 0x53, 0x6f, 0x3e, 0xc6, 0x78, 0x0a,
	0x1e, 0x6b, 0xd4, 0xd6, 0x3b, 0xec, 0x68, 0xc2, 0x1b, 0x9a, 0xc0, 0x2c, 0xaf, 0xd1, 0xd2, 0x4e,
	0x21, 0x5e, 0xc1, 0x60, 0x1b, 0xce, 0x4a, 0xc4, 0x99, 0x14, 0x2b, 0x5c, 0x29, 0x69, 0xad, 0x17,
	0x35, 0x47, 0xd0, 0xbe, 0xe2, 0x7b, 0x6c, 0x43, 0x11, 0x7d, 0x05, 0x1b, 0x58, 0x0f, 0x20, 0x4f,
	0x7b, 0xe3, 0x96, 0x7d, 0xdc, 0x27, 0x87, 0x1e, 0x71, 0xe9, 0xd9, 0x9c, 0xfe, 0x0e, 0xc3, 0xe6,
	0x28, 0x18, 0x53, 0xdc, 0x81, 0xed, 0x79, 0x1f, 0x3a, 0x6e, 0x47, 0xf4, 0xee, 0xc1, 0xd8, 0xfa,
	0x85, 0x41, 0xb5, 0x64, 0x87, 0x82, 0xd8, 0xfd, 0x75, 0x7a, 0x73, 0xa5, 0x1d, 0x2f, 0x92, 0x13,
	0xc7, 0x8b, 0xf0, 0x06, 0x21, 0xa5, 0xde, 0x20, 0xac, 0xb1, 0x4d, 0x49, 0xef, 0xb2, 0x14, 0x88,
	0xf5, 0xeb, 0x04, 0x8d, 0xe1, 0xe1, 0xa3, 0x5e, 0xb7, 0x7c, 0x62, 0x0f, 0xbb, 0x04, 0x6d, 0x05,
	0xda, 0x89, 0xe3, 0xfe, 0x92, 0xde, 0x41, 0x32, 0x54, 0x68, 0x41, 0xbe, 0x8e, 0x6d, 0x00, 0xce,
	0xae, 0x74, 0x9e, 0xfa, 0xc6, 0xa3, 0x4c, 0xc1, 0xb2, 0x5c, 0xa1, 0x47, 0x2d, 0x58, 0xa0, 0x07,
	0xd6, 0x9e, 0xdd, 0x7f, 0x48, 0x06, 0xc7, 0xc4, 0x95, 0xed, 0xc2, 0xb7, 0xa7, 0x49, 0x28, 0xea,
	0xe4, 0xbc, 0xcb, 0x9e, 0x90, 0xb1, 0x5a, 0x82, 0xa5, 0x18, 0xb2, 0x2b, 0xdd, 0x88, 0xbc, 0x0c,
	0xf9, 0xe6, 0xc9, 0xd8, 0xef, 0x38, 0x1f, 0x0e, 0xf9, 0x7d, 0x16, 0xf5, 0x0d, 0xfd, 0x13, 0xb8,
	0x4c, 0x0e, 0xad, 0x5f, 0x25, 0xe1, 0x5a, 0xb3, 0x7d, 0x42, 0x3a, 0xe3, 0x3e, 0x11, 0x59, 0x1e,
	0xeb, 0xdd, 0x5b, 0x90, 0xdf, 0x71, 0x1c, 0xdf, 0xf3, 0x5d, 0x7b, 0x34, 0xea, 0x0d, 0xbb, 0x6c,
	0xd2, 0x0c, 0xd6, 0x81, 0xb4, 0x34, 0x88, 0x03, 0x12, 0x33, 0x68, 0x92, 0x19, 0x54, 0x2b, 0x0d,
	0x0a, 0x1a, 0xab, 0xb4, 0xbc, 0x26, 0x85, 0xa6, 0x12, 0x7d, 0x44, 0x61, 0x9a, 0x29, 0xb1, 0xee,
	0xfd, 0x7b, 0x13, 0x2b, 0x16, 0x4d, 0xc4, 0x73, 0x7a, 0x61, 0x50, 0x08, 0xf0, 0x84, 0x85, 0xf6,
	0x60, 0x91, 0x9f, 0x1b, 0x95, 0x83, 0xa4, 0xa8, 0xac, 0x5a, 0x2f, 0x13, 0x21, 0xc2, 0x51, 0xbe,
	0xe8, 0x1e, 0x99, 0xbe, 0xe2, 0x1e, 0xd9, 0x8f, 0xd1, 0x06, 0x6d, 0x41, 0x8a, 0x26, 0xaa, 0x08,
	0x6f, 0x4d, 0x98, 0x96, 0xe1, 0x22, 0xc8, 0x19, 0x31, 0x3b, 0x25, 0xda, 0xde, 0x29, 0x3d, 0x21,
	0x1d, 0xdb, 0x9e, 0x8c, 0x15, 0x0d, 0x46, 0xc3, 0x45, 0x9b, 0xfe, 0x9c, 0x70, 0xb1, 0xf5, 0x9d,
	0x23, 0xb8, 0xcc, 0x33, 0xc2, 0xcb, 0x3c, 0xf4, 0x36, 0x64, 0x04, 0x8d, 0xbc, 0x56, 0x7c, 0x5e,
	0x73, 0x83, 0x1e, 0x6d, 0xf2, 0x96, 0x43, 0xb2, 0x58, 0xff, 0x4a, 0xd2, 0xd6, 0x86, 0x4f, 0x48,
	0xeb, 0xb5, 0xbc, 0x4f, 0x35, 0x94, 0xfb, 0xd4, 0x6f, 0xd6, 0x8d, 0x5a, 0x29, 0x38, 0x8e, 0x64,
	0x98, 0x39, 0x5f, 0x8c, 0xe9, 0x11, 0xd9, 0x25, 0xed, 0x25, 0x1f, 0x32, 0xb2, 0x5f, 0xe8, 0x21,
	0x03, 0xbe, 0x82, 0x87, 0x8c, 0xdf, 0x18, 0xfc, 0x35, 0x4b, 0x3c, 0xdd, 0xb0, 0x95, 0xc9, 0x3d,
	0xf1, 0x66, 0x4c, 0x83, 0x5a, 0xe4, 0x14, 0xda, 0x8a, 0x39, 0x68, 0x15, 0x43, 0x4e, 0x41, 0xc6,
	0xa8, 0xf6, 0xaa, 0xae, 0xda, 0x8d, 0x29, 0x46, 0x55, 0xd5, 0xfb, 0x38, 0xc1, 0x6e, 0xd4, 0x9e,
	0x49, 0x68, 0x7e, 0x83, 0x2e, 0xc1, 0xa8, 0x57, 0x2b, 0x97, 0xf1, 0x6a, 0xe5, 0x3f, 0xeb, 0xd5,
	0x4a, 0xbc, 0x57, 0x7f, 0x67, 0x4c, 0x76, 0xa5, 0xe8, 0x35, 0xc8, 0x08, 0x62, 0xa9, 0xe7, 0x52,
	0x8c, 0x20, 0x59, 0xba, 0x24, 0x29, 0x65, 0x2b, 0x4b, 0xb6, 0x44, 0x94, 0xad, 0xac, 0xb3, 0x49,
	0x52, 0xf4, 0x06, 0xbb, 0x18, 0x13, 0x7c, 0x3c, 0x1a, 0x96, 0xe3, 0xce, 0xcf, 0x82, 0x31, 0x24,
	0xb6, 0x7e, 0x66, 0x40, 0x4e, 0xa8, 0xce, 0x02, 0xf2, 0x4d, 0xa6, 0x37, 0x0f, 0x2b, 0x43, 0x84,
	0x55, 0x90, 0x71, 0x02, 0xa3, 0xf5, 0x92, 0x01, 0x39, 0xda, 0xe6, 0x4a, 0x70, 0x5e, 0xae, 0x7c,
	0x41, 0xc9, 0x56, 0x81, 0xd2, 0x98, 0x43, 0x06, 0xeb, 0x97, 0x06, 0xac, 0x88, 0xae, 0x45, 0xe8,
	0x23, 0x0f, 0xc9, 0x2f, 0xc1, 0x42, 0x63, 0x3c, 0xd8, 0x7f, 0x14, 0x0a, 0xe7, 0xd9, 0x32, 0x01,
	0xa5, 0x0d, 0x06, 0x83, 0x04, 0xfa, 0xf3, 0x26, 0x52, 0x07, 0xa2, 0x0d, 0x30, 0x25, 0x5f, 0x70,
	0x91, 0xce, 0x3b, 0xca, 0x08, 0xdc, 0xfa, 0x71, 0x82, 0x3f, 0x03, 0x9d, 0x9b, 0xae, 0x5f, 0xef,
	0x17, 0x80, 0x8f, 0x13, 0xe2, 0x51, 0x93, 0xa6, 0xde, 0xdd, 0xa0, 0xe2, 0xf0, 0xd0, 0x58, 0x8f,
	0xc4, 0x18, 0xcb, 0x3d, 0x46, 0xa2, 0xe7, 0x1e, 0xb7, 0xfd, 0xdd, 0x20, 0x75, 0x13, 0xe7, 0xf1,
	0x4f, 0xcd, 0xdd, 0x26, 0xe4, 0x14, 0xe1, 0x31, 0x0d, 0x6d, 0x51, 0xcf, 0xdd, 0xa9, 0xef, 0x75,
	0x4a, 0xf2, 0x32, 0xa1, 0xe7, 0x16, 0x84, 0x8b, 0x84, 0xc6, 0x55, 0x84, 0xbf, 0x24, 0xf5, 0x33,
	0x5e, 0x6c, 0xe4, 0xdc, 0xd3, 0x52, 0x2f, 0x76, 0x17, 0x09, 0xd1, 0xf2, 0x14, 0xae, 0x26, 0xeb,
	0x56, 0x50, 0x15, 0xc5, 0xa5, 0xdb, 0x52, 0x4c, 0x2d, 0x94, 0x27, 0x16, 0x59, 0x3f, 0x5f, 0x0f,
	0x1d, 0x2a, 0x5a, 0xe4, 0xe5, 0x38, 0x37, 0xc8, 0xc8, 0x09, 0x9c, 0xbf, 0x15, 0x6c, 0xac, 0xa2,
	0x35, 0x5e, 0x8a, 0xd9, 0x4e, 0xe5, 0x64, 0x72, 0x0b, 0xbe, 0x23, 0xaf, 0x4c, 0x79, 0x3f, 0xa3,
	0xb5, 0x9c, 0xf2, 0x36, 0x42, 0xbb, 0x38, 0x6d, 0x88, 0xf8, 0x14, 0x2d, 0x9e, 0x38, 0x21, 0xa7,
	0x19, 0xf7, 0xda, 0x64, 0xc3, 0xaa, 0x53, 0xe1, 0x18, 0x4e, 0x54, 0x9d, 0x38, 0xbc, 0x8a, 0xcb,
	0x86, 0x0b, 0x7b, 0xdf, 0x89, 0x23, 0xef, 0x75, 0x98, 0x6b, 0x90, 0x27, 0x7e, 0xad, 0xc3, 0x5a,
	0x9f, 0x14, 0x16, 0x23, 0xeb, 0x1f, 0x69, 0x30, 0xe5, 0x3a, 0x82, 0x57, 0x9a, 0xe0, 0x4d, 0xc6,
	0x50, 0xdf, 0x64, 0x64, 0x04, 0x24, 0x94, 0x08, 0x90, 0x62, 0xe5, 0xa1, 0x56, 0x8c, 0xd0, 0x3e,
	0xe4, 0xf8, 0xbf, 0x9d, 0xb3, 0x3d, 0x72, 0x56, 0x48, 0xb1, 0x6c, 0x79, 0x35, 0xce, 0x78, 0xc1,
	0xe3, 0x8b, 0x42, 0xcf, 0x4f, 0x85, 0xaa, 0x84, 0xb8, 0x27, 0xf3, 0xff, 0xbe, 0x6f, 0x3a, 0x60,
	0x4e, 0xb4, 0xf2, 0xb2, 0x3f, 0xdd, 0x3c, 0x77, 0xa9, 0x93, 0x4c, 0x6a, 0xa9, 0x88, 0x48, 0x44,
	0x35, 0x75, 0x5b, 0xe2, 0xdf, 0xf0, 0xbc, 0x72, 0xae, 0xf8, 0x80, 0x9a, 0xdb, 0x31, 0xe4, 0x56,
	0x53, 0x00, 0x2e, 0x9d, 0x02, 0x4a, 0x92, 0xe6, 0xbe, 0x50, 0x92, 0xce, 0x5f, 0x21, 0x49, 0x27,
	0x4a, 0x4a, 0xfe, 0xca, 0x25, 0x25, 0x92, 0x2f, 0x0b, 0x5f, 0x24, 0x5f, 0x56, 0xef, 0x82, 0x39,
	0x19, 0x90, 0xf1, 0x8f, 0xef, 0xf1, 0x2f, 0x7d, 0xab, 0x1f, 0xc0, 0x4a, 0xac, 0x97, 0xaf, 0x58,
	0x9e, 0xb5, 0x3b, 0x48, 0x45, 0xfc, 0x36, 0xfb, 0xe0, 0x63, 0xca, 0x5e, 0x72, 0x91, 0x72, 0x56,
	0x0d, 0x72, 0xea, 0xb7, 0x22, 0x5f, 0xe2, 0x21, 0xdb, 0xfa, 0x6d, 0x02, 0x96, 0xe3, 0xae, 0x1b,
	0xcf, 0xb9, 0xd4, 0x3e, 0x88, 0x7c, 0x73, 0x53, 0xbc, 0xe8, 0xf2, 0x52, 0xff, 0xf6, 0x26, 0xd2,
	0x13, 0x3c, 0x9b, 0x2f, 0x70, 0x5a, 0x17, 0x7f, 0x81, 0x73, 0x5e, 0x6b, 0xad, 0x58, 0x54, 0xb1,
	0xf5, 0xc6, 0xf7, 0x01, 0x0e, 0x47, 0x1d, 0xdb, 0xe7, 0x57, 0x3c, 0x37, 0x60, 0x49, 0x7b, 0xc2,
	0xe6, 0x28, 0x73, 0x06, 0xad, 0xc0, 0xa2, 0x7c, 0xb6, 0xae, 0x37, 0x1b, 0x02, 0x6c, 0xa0, 0x25,
	0xb8, 0x46, 0xc3, 0x91, 0xe9, 0x23, 0x80, 0x09, 0x94, 0x87, 0x6c, 0xab, 0xb9, 0x2f, 0x86, 0xc9,
	0x8d, 0x22, 0x64, 0x83, 0x0f, 0xa8, 0xd0, 0x35, 0xc8, 0x35, 0x1c, 0x77, 0x60, 0xf7, 0xd9, 0xd0,
	0x9c, 0x41, 0x26, 0xcc, 0xb7, 0x7a, 0x03, 0xe2, 0x8c, 0x7d, 0x0e, 0x31, 0x36, 0xfe, 0x9a, 0x00,
	0x08, 0x2f, 0xed, 0xd1, 0x02, 0x40, 0xab, 0xb9, 0x7f, 0x74, 0x78, 0x50, 0x29, 0xb5, 0xaa, 0xe6,
	0x0c, 0x02, 0x98, 0x2b, 0x1d, 0x1c, 0x54, 0x1b, 0x15, 0xd3, 0x40, 0x19, 0x48, 0xe1, 0x6a, 0xa9,
	0x62, 0x26, 0xd0, 0x3c, 0x64, 0x5a, 0xf8, 0xb0, 0x51, 0xa6, 0x34, 0x49, 0x2a, 0xf4, 0x41, 0xb5,
	0x75, 0x14, 0x40, 0x52, 0x28, 0x07, 0xe9, 0xf2, 0x7e, 0xa3, 0x51, 0x2d, 0xb7, 0xcc, 0x59, 0x2a,
	0x52, 0x0c, 0x8e, 0xf0, 0xbe, 0x39, 0x87, 0x16, 0x21, 0x5f, 0xdf, 0x7f, 0x70, 0xb4, 0x5b, 0x2d,
	0xe1, 0xd6, 0x4e, 0xb5, 0xd4, 0x32, 0xd3, 0x54, 0x42, 0xb9, 0xa1, 0x40, 0x32, 0x14, 0x52, 0x51,
	0x21, 0x59, 0x84, 0x60, 0xa1, 0xbc, 0x5b, 0x2d, 0xef, 0x1d, 0xed, 0x96, 0xf6, 0xaa, 0xd5, 0x83,
	0x2a, 0x36, 0x81, 0x1a, 0x90, 0xce, 0x5c, 0xae, 0x1f, 0x36, 0x5b, 0x55, 0x7c, 0x54, 0xa9, 0xb6,
	0x4a, 0xb5, 0x7a, 0xd3, 0xcc, 0x51, 0x62, 0x8a, 0x68, 0xee, 0x96, 0x70, 0xe5, 0xa8, 0xd6, 0xb8,
	0xbf, 0x6f, 0xce, 0x33, 0x01, 0x8d, 0xa3, 0x52, 0xbd, 0xbe, 0x4f, 0xb5, 0x3c, 0xaa, 0x55, 0xcc,
	0x3c, 0x35, 0xb4, 0x2a, 0xa0, 0xd9, 0xa2, 0xfa, 0x2f, 0x30, 0x43, 0x33, 0x0b, 0x1c, 0x95, 0x1b,
	0x47, 0xf5, 0xd2, 0x4e, 0xb5, 0x6e, 0x5e, 0x43, 0x05, 0x58, 0x0e, 0x81, 0xef, 0xed, 0xe3, 0x3d,
	0x41, 0x6e, 0x52, 0xc9, 0x07, 0xa5, 0x56, 0x79, 0x97, 0x22, 0x9a, 0xad, 0x7d, 0x5c, 0x35, 0x17,
	0xa9, 0x88, 0x4a, 0xb5, 0x5e, 0xe5, 0xd4, 0x1c, 0x88, 0x36, 0x1a, 0x00, 0xe1, 0xd3, 0x3d, 0x35,
	0x0c, 0x75, 0x27, 0x87, 0x98, 0x33, 0xd4, 0xaa, 0xb5, 0xa1, 0x4f, 0xdc, 0xa1, 0xdd, 0x37, 0x0d,
	0xea, 0x3b, 0x16, 0x1c, 0x81, 0xa3, 0x17, 0xc5, 0x57, 0x10, 0x98, 0xfc, 0x80, 0xb4, 0x7d, 0xd2,
	0x31, 0x93, 0x1b, 0x1b, 0x90, 0x0d, 0x5e, 0xb8, 0x29, 0x7b, 0x93, 0xf8, 0x6c, 0x64, 0xce, 0x50,
	0x76, 0x7e, 0x87, 0xc5, 0x01, 0xc6, 0xc6, 0xd3, 0x04, 0x20, 0xb9, 0x39, 0x28, 0x31, 0x48, 0x1d,
	0xde, 0x6b, 0x9f, 0xaa, 0xa1, 0xa7, 0x3c, 0x25, 0x06, 0xa1, 0xb7, 0x02, 0x8b, 0x95, 0x08, 0x38,
	0x81, 0xae, 0xd3, 0x93, 0x71, 0x77, 0x12, 0x9e, 0xa4, 0xb3, 0x3f, 0x20, 0x7e, 0x10, 0xd1, 0x29,
	0xf4, 0x5c, 0xa4, 0x02, 0x0a, 0xd4, 0x2c, 0xb5, 0x5e, 0x93, 0xf0, 0x78, 0x14, 0xb0, 0x39, 0x6a,
	0x6b, 0xfd, 0xf4, 0x24, 0x30, 0x69, 0x74, 0x13, 0x9e, 0x6f, 0x12, 0x3f, 0xba, 0xfd, 0x0a, 0x82,
	0x0c, 0x5a, 0x85, 0xeb, 0x82, 0x20, 0xa8, 0xdf, 0x02, 0x97, 0xa5, 0x26, 0xe4, 0xff, 0x85, 0xd5,
	0x4c, 0xa0, 0x0b, 0x93, 0xa0, 0xe0, 0xaa, 0xc7, 0xcc, 0xd1, 0xf8, 0x3b, 0xa0, 0x65, 0x56, 0x9c,
	0x49, 0xcd, 0x79, 0xca, 0x8b, 0xc9, 0xc0, 0x79, 0x2c, 0x2f, 0x05, 0xcd, 0xfc, 0xc6, 0x47, 0x06,
	0xe4, 0xb5, 0xd6, 0x82, 0x7a, 0x5d, 0x02, 0xc4, 0x91, 0xc3, 0x9c, 0xa1, 0x6b, 0x97, 0x40, 0xed,
	0x76, 0xd8, 0x34, 0xd0, 0xb7, 0xe0, 0xff, 0x23, 0x28, 0xb9, 0x43, 0x60, 0xd2, 0x26, 0xbd, 0xc7,
	0xa4, 0x63, 0x26, 0xd0, 0xf3, 0x70, 0x23, 0x42, 0x76, 0xdf, 0xee, 0xf5, 0x69, 0x10, 0xa8, 0x73,
	0xe2, 0xf1, 0x70, 0x48, 0x05, 0xa7, 0x36, 0x8e, 0xe3, 0x9a, 0x1b, 0x6a, 0x56, 0x0d, 0x1a, 0xea,
	0x38, 0x89, 0x91, 0x92, 0x8c, 0x08, 0xa6, 0xe9, 0x3b, 0xa3, 0x11, 0xd5, 0x6a, 0xe3, 0x04, 0xcc,
	0xc9, 0xe7, 0x00, 0x1a, 0x4e, 0xa5, 0x4e, 0x47, 0x54, 0x3f, 0x73, 0x26, 0xb4, 0x9a, 0x04, 0x19,
	0xd4, 0xb4, 0x4d, 0xdf, 0x76, 0x7d, 0x09, 0x49, 0xd0, 0x68, 0xa1, 0x52, 0x25, 0x20, 0x49, 0xa5,
	0xec, 0xf5, 0xfa, 0xfd, 0xf7, 0x9d, 0xc1, 0x71, 0x8f, 0x98, 0xa9, 0x8d, 0xb7, 0xb4, 0x6b, 0x74,
	0x8a, 0xa6, 0xfb, 0x1d, 0x87, 0x98, 0x33, 0xb4, 0x04, 0x56, 0x1a, 0x72, 0x68, 0xd0, 0x61, 0x39,
	0x18, 0x26, 0x76, 0xaa, 0x4f, 0x3f, 0x5b, 0x9b, 0xf9, 0xe4, 0xf3, 0x35, 0xe3, 0xe9, 0xe7, 0x6b,
	0xc6, 0x9f, 0x3f, 0x5f, 0x33, 0xde, 0xdf, 0x52, 0x3e, 0x31, 0x1f, 0xd8, 0xbe, 0xdb, 0x7b, 0xe2,
	0xb8, 0xbd, 0x6e, 0x6f, 0x28, 0x07, 0x43, 0x72, 0x67, 0x74, 0xda, 0xbd, 0x33, 0x3a, 0xbe, 0x13,
	0x56, 0xf4, 0xe3, 0x39, 0xf6, 0x7d, 0xf9, 0xd6, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x65, 0xe1,
	0x60, 0x2b, 0xbe, 0x2e, 0x00, 0x00,
}

func (m *CNStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QueryAddress) > 0 {
		i -= len(m.QueryAddress)
		copy(dAtA[i:], m.QueryAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.QueryAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.WorkState != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.WorkState))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.State != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.Tick != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x38
	}
	if m.Role != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CtlAddress) > 0 {
		i -= len(m.CtlAddress)
		copy(dAtA[i:], m.CtlAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.CtlAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LockServiceAddress) > 0 {
		i -= len(m.LockServiceAddress)
		copy(dAtA[i:], m.LockServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.LockServiceAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SQLAddress) > 0 {
		i -= len(m.SQLAddress)
		copy(dAtA[i:], m.SQLAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.SQLAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CtlAddress) > 0 {
		i -= len(m.CtlAddress)
		copy(dAtA[i:], m.CtlAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.CtlAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LockServiceAddress) > 0 {
		i -= len(m.LockServiceAddress)
		copy(dAtA[i:], m.LockServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.LockServiceAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LogtailServerAddress) > 0 {
		i -= len(m.LogtailServerAddress)
		copy(dAtA[i:], m.LogtailServerAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.LogtailServerAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.State != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.Tick != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Replicas) > 0 {
		for iNdEx := len(m.Replicas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Replicas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.State != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.Tick != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogShardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogShardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogShardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Term != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x28
	}
	if m.LeaderID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.LeaderID))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Replicas) > 0 {
		for k := range m.Replicas {
			v := m.Replicas[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintLogservice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintLogservice(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogReplicaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogReplicaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogReplicaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReplicaID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.LogShardInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CNStoreHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNStoreHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNStoreHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InitWorkState) > 0 {
		i -= len(m.InitWorkState)
		copy(dAtA[i:], m.InitWorkState)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.InitWorkState)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.QueryAddress) > 0 {
		i -= len(m.QueryAddress)
		copy(dAtA[i:], m.QueryAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.QueryAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.TaskServiceCreated {
		i--
		if m.TaskServiceCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Role != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CtlAddress) > 0 {
		i -= len(m.CtlAddress)
		copy(dAtA[i:], m.CtlAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.CtlAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LockServiceAddress) > 0 {
		i -= len(m.LockServiceAddress)
		copy(dAtA[i:], m.LockServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.LockServiceAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SQLAddress) > 0 {
		i -= len(m.SQLAddress)
		copy(dAtA[i:], m.SQLAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.SQLAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CNAllocateID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNAllocateID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNAllocateID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Batch != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Batch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogStoreHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStoreHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStoreHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskServiceCreated {
		i--
		if m.TaskServiceCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Replicas) > 0 {
		for iNdEx := len(m.Replicas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Replicas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.GossipAddress) > 0 {
		i -= len(m.GossipAddress)
		copy(dAtA[i:], m.GossipAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.GossipAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RaftAddress) > 0 {
		i -= len(m.RaftAddress)
		copy(dAtA[i:], m.RaftAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.RaftAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNShardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNShardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNShardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReplicaID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DNStoreHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNStoreHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNStoreHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CtlAddress) > 0 {
		i -= len(m.CtlAddress)
		copy(dAtA[i:], m.CtlAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.CtlAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LockServiceAddress) > 0 {
		i -= len(m.LockServiceAddress)
		copy(dAtA[i:], m.LockServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.LockServiceAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogtailServerAddress) > 0 {
		i -= len(m.LogtailServerAddress)
		copy(dAtA[i:], m.LogtailServerAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.LogtailServerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskServiceCreated {
		i--
		if m.TaskServiceCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RSMState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSMState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSMState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LeaseHistory) > 0 {
		for k := range m.LeaseHistory {
			v := m.LeaseHistory[k]
			baseI := i
			i = encodeVarintLogservice(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintLogservice(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TruncatedLsn != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.TruncatedLsn))
		i--
		dAtA[i] = 0x20
	}
	if m.LeaseHolderID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.LeaseHolderID))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Tso != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Tso))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Lsn != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Lsn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DNID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.DNID))
		i--
		dAtA[i] = 0x30
	}
	if m.DNShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.DNShardID))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxSize != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Lsn != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Lsn))
		i--
		dAtA[i] = 0x18
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TsoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TsoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CNStoreLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNStoreLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNStoreLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Operation != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CNWorkState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNWorkState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNWorkState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CNStateLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNStateLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNStateLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.State != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeleteCNStore != nil {
		{
			size, err := m.DeleteCNStore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.CNStateLabel != nil {
		{
			size, err := m.CNStateLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.CNWorkState != nil {
		{
			size, err := m.CNWorkState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CNStoreLabel != nil {
		{
			size, err := m.CNStoreLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CNAllocateID != nil {
		{
			size, err := m.CNAllocateID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TsoRequest != nil {
		{
			size, err := m.TsoRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DNHeartbeat != nil {
		{
			size, err := m.DNHeartbeat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CNHeartbeat != nil {
		{
			size, err := m.CNHeartbeat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LogHeartbeat != nil {
		{
			size, err := m.LogHeartbeat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.LogRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Method != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastLsn != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.LastLsn))
		i--
		dAtA[i] = 0x18
	}
	if m.Lsn != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Lsn))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllocateIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocateIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FirstID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.FirstID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CheckerState != nil {
		{
			size, err := m.CheckerState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.AllocateID != nil {
		{
			size, err := m.AllocateID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ShardInfo != nil {
		{
			size, err := m.ShardInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ClusterDetails != nil {
		{
			size, err := m.ClusterDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TsoResponse != nil {
		{
			size, err := m.TsoResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.CommandBatch != nil {
		{
			size, err := m.CommandBatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.LogResponse.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.IsHAKeeper {
		i--
		if m.IsHAKeeper {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x22
	}
	if m.ErrorCode != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x18
	}
	if m.Method != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TsoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TsoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskTableUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskTableUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskTableUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Replica) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replica) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Replica) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.LogShardID))
		i--
		dAtA[i] = 0x28
	}
	if m.Epoch != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x20
	}
	if m.ReplicaID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x18
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InitialMembers) > 0 {
		for k := range m.InitialMembers {
			v := m.InitialMembers[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintLogservice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintLogservice(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ChangeType != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ChangeType))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Replica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ShutdownStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutdownStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StoreID) > 0 {
		i -= len(m.StoreID)
		copy(dAtA[i:], m.StoreID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.StoreID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduleCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeleteCNStore != nil {
		{
			size, err := m.DeleteCNStore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreateTaskService != nil {
		{
			size, err := m.CreateTaskService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ShutdownStore != nil {
		{
			size, err := m.ShutdownStore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ConfigChange != nil {
		{
			size, err := m.ConfigChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ServiceType != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ServiceType))
		i--
		dAtA[i] = 0x18
	}
	if m.Bootstrapping {
		i--
		if m.Bootstrapping {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTaskService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTaskService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTaskService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskDatabase) > 0 {
		i -= len(m.TaskDatabase)
		copy(dAtA[i:], m.TaskDatabase)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.TaskDatabase)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DeleteCNStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCNStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCNStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StoreID) > 0 {
		i -= len(m.StoreID)
		copy(dAtA[i:], m.StoreID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.StoreID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommandBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Term != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CNStoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNStoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNStoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QueryAddress) > 0 {
		i -= len(m.QueryAddress)
		copy(dAtA[i:], m.QueryAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.QueryAddress)))
		i--
		dAtA[i] = 0x52
	}
	if m.WorkState != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.WorkState))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.TaskServiceCreated {
		i--
		if m.TaskServiceCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Role != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CtlAddress) > 0 {
		i -= len(m.CtlAddress)
		copy(dAtA[i:], m.CtlAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.CtlAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LockServiceAddress) > 0 {
		i -= len(m.LockServiceAddress)
		copy(dAtA[i:], m.LockServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.LockServiceAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SQLAddress) > 0 {
		i -= len(m.SQLAddress)
		copy(dAtA[i:], m.SQLAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.SQLAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tick != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CNState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stores) > 0 {
		for k := range m.Stores {
			v := m.Stores[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNStoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNStoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNStoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CtlAddress) > 0 {
		i -= len(m.CtlAddress)
		copy(dAtA[i:], m.CtlAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.CtlAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LockServiceAddress) > 0 {
		i -= len(m.LockServiceAddress)
		copy(dAtA[i:], m.LockServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.LockServiceAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogtailServerAddress) > 0 {
		i -= len(m.LogtailServerAddress)
		copy(dAtA[i:], m.LogtailServerAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.LogtailServerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskServiceCreated {
		i--
		if m.TaskServiceCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tick != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DNState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stores) > 0 {
		for k := range m.Stores {
			v := m.Stores[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClusterDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogStores) > 0 {
		for iNdEx := len(m.LogStores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LogStores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CNStores) > 0 {
		for iNdEx := len(m.CNStores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CNStores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DNStores) > 0 {
		for iNdEx := len(m.DNStores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DNStores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogShards) > 0 {
		for iNdEx := len(m.LogShards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LogShards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DNShards) > 0 {
		for iNdEx := len(m.DNShards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DNShards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InitialClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitialClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitialClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumOfLogReplicas != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.NumOfLogReplicas))
		i--
		dAtA[i] = 0x18
	}
	if m.NumOfDNShards != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.NumOfDNShards))
		i--
		dAtA[i] = 0x10
	}
	if m.NumOfLogShards != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.NumOfLogShards))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogStoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskServiceCreated {
		i--
		if m.TaskServiceCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Replicas) > 0 {
		for iNdEx := len(m.Replicas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Replicas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.GossipAddress) > 0 {
		i -= len(m.GossipAddress)
		copy(dAtA[i:], m.GossipAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.GossipAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RaftAddress) > 0 {
		i -= len(m.RaftAddress)
		copy(dAtA[i:], m.RaftAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.RaftAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tick != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stores) > 0 {
		for k := range m.Stores {
			v := m.Stores[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Shards) > 0 {
		for k := range m.Shards {
			v := m.Shards[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintLogservice(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheckerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckerState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckerState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NextId != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.NextId))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.TaskTableUser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.TaskSchedulerState != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.TaskSchedulerState))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.CNState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.LogState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.DNState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ClusterInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Tick != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HAKeeperRSMState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HAKeeperRSMState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HAKeeperRSMState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.TaskTableUser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.ClusterInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.LogState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.DNState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.CNState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.LogShards) > 0 {
		for k := range m.LogShards {
			v := m.LogShards[k]
			baseI := i
			i = encodeVarintLogservice(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ScheduleCommands) > 0 {
		for k := range m.ScheduleCommands {
			v := m.ScheduleCommands[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.TaskSchedulerState != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.TaskSchedulerState))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.Term != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NextIDByKey) > 0 {
		for k := range m.NextIDByKey {
			v := m.NextIDByKey[k]
			baseI := i
			i = encodeVarintLogservice(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLogservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NextID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.NextID))
		i--
		dAtA[i] = 0x18
	}
	if m.Tick != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintLogservice(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardInfoQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardInfoQueryResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardInfoQueryResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Term != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x28
	}
	if m.LeaderID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.LeaderID))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Replicas) > 0 {
		for k := range m.Replicas {
			v := m.Replicas[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintLogservice(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ShardID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CNStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.SQLAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.LockServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.CtlAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovLogservice(uint64(m.Role))
	}
	if m.Tick != 0 {
		n += 1 + sovLogservice(uint64(m.Tick))
	}
	if m.State != 0 {
		n += 1 + sovLogservice(uint64(m.State))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.WorkState != 0 {
		n += 1 + sovLogservice(uint64(m.WorkState))
	}
	l = len(m.QueryAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DNStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.Tick != 0 {
		n += 1 + sovLogservice(uint64(m.Tick))
	}
	if m.State != 0 {
		n += 1 + sovLogservice(uint64(m.State))
	}
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	l = len(m.LogtailServerAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.LockServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.CtlAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.Tick != 0 {
		n += 1 + sovLogservice(uint64(m.Tick))
	}
	if m.State != 0 {
		n += 1 + sovLogservice(uint64(m.State))
	}
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogShardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if len(m.Replicas) > 0 {
		for k, v := range m.Replicas {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLogservice(uint64(k)) + 1 + len(v) + sovLogservice(uint64(len(v)))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.Epoch != 0 {
		n += 1 + sovLogservice(uint64(m.Epoch))
	}
	if m.LeaderID != 0 {
		n += 1 + sovLogservice(uint64(m.LeaderID))
	}
	if m.Term != 0 {
		n += 1 + sovLogservice(uint64(m.Term))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogReplicaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LogShardInfo.Size()
	n += 1 + l + sovLogservice(uint64(l))
	if m.ReplicaID != 0 {
		n += 1 + sovLogservice(uint64(m.ReplicaID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CNStoreHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.SQLAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.LockServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.CtlAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovLogservice(uint64(m.Role))
	}
	if m.TaskServiceCreated {
		n += 2
	}
	l = len(m.QueryAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.InitWorkState)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CNAllocateID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.Batch != 0 {
		n += 1 + sovLogservice(uint64(m.Batch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogStoreHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.RaftAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.GossipAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.TaskServiceCreated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DNShardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if m.ReplicaID != 0 {
		n += 1 + sovLogservice(uint64(m.ReplicaID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DNStoreHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.TaskServiceCreated {
		n += 2
	}
	l = len(m.LogtailServerAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.LockServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.CtlAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RSMState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tso != 0 {
		n += 1 + sovLogservice(uint64(m.Tso))
	}
	if m.Index != 0 {
		n += 1 + sovLogservice(uint64(m.Index))
	}
	if m.LeaseHolderID != 0 {
		n += 1 + sovLogservice(uint64(m.LeaseHolderID))
	}
	if m.TruncatedLsn != 0 {
		n += 1 + sovLogservice(uint64(m.TruncatedLsn))
	}
	if len(m.LeaseHistory) > 0 {
		for k, v := range m.LeaseHistory {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLogservice(uint64(k)) + 1 + sovLogservice(uint64(v))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lsn != 0 {
		n += 1 + sovLogservice(uint64(m.Lsn))
	}
	if m.Type != 0 {
		n += 1 + sovLogservice(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if m.Lsn != 0 {
		n += 1 + sovLogservice(uint64(m.Lsn))
	}
	if m.MaxSize != 0 {
		n += 1 + sovLogservice(uint64(m.MaxSize))
	}
	if m.DNShardID != 0 {
		n += 1 + sovLogservice(uint64(m.DNShardID))
	}
	if m.DNID != 0 {
		n += 1 + sovLogservice(uint64(m.DNID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TsoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovLogservice(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CNStoreLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.Operation != 0 {
		n += 1 + sovLogservice(uint64(m.Operation))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CNWorkState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovLogservice(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CNStateLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovLogservice(uint64(m.State))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovLogservice(uint64(m.RequestID))
	}
	if m.Method != 0 {
		n += 1 + sovLogservice(uint64(m.Method))
	}
	l = m.LogRequest.Size()
	n += 1 + l + sovLogservice(uint64(l))
	if m.LogHeartbeat != nil {
		l = m.LogHeartbeat.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.CNHeartbeat != nil {
		l = m.CNHeartbeat.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.DNHeartbeat != nil {
		l = m.DNHeartbeat.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.TsoRequest != nil {
		l = m.TsoRequest.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.CNAllocateID != nil {
		l = m.CNAllocateID.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.CNStoreLabel != nil {
		l = m.CNStoreLabel.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.CNWorkState != nil {
		l = m.CNWorkState.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.CNStateLabel != nil {
		l = m.CNStateLabel.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.DeleteCNStore != nil {
		l = m.DeleteCNStore.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if m.Lsn != 0 {
		n += 1 + sovLogservice(uint64(m.Lsn))
	}
	if m.LastLsn != 0 {
		n += 1 + sovLogservice(uint64(m.LastLsn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllocateIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FirstID != 0 {
		n += 1 + sovLogservice(uint64(m.FirstID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovLogservice(uint64(m.RequestID))
	}
	if m.Method != 0 {
		n += 1 + sovLogservice(uint64(m.Method))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovLogservice(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.IsHAKeeper {
		n += 2
	}
	l = m.LogResponse.Size()
	n += 1 + l + sovLogservice(uint64(l))
	if m.CommandBatch != nil {
		l = m.CommandBatch.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.TsoResponse != nil {
		l = m.TsoResponse.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.ClusterDetails != nil {
		l = m.ClusterDetails.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.ShardInfo != nil {
		l = m.ShardInfo.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.AllocateID != nil {
		l = m.AllocateID.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.CheckerState != nil {
		l = m.CheckerState.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TsoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovLogservice(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskTableUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Replica) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if m.ReplicaID != 0 {
		n += 1 + sovLogservice(uint64(m.ReplicaID))
	}
	if m.Epoch != 0 {
		n += 1 + sovLogservice(uint64(m.Epoch))
	}
	if m.LogShardID != 0 {
		n += 1 + sovLogservice(uint64(m.LogShardID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Replica.Size()
	n += 1 + l + sovLogservice(uint64(l))
	if m.ChangeType != 0 {
		n += 1 + sovLogservice(uint64(m.ChangeType))
	}
	if len(m.InitialMembers) > 0 {
		for k, v := range m.InitialMembers {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLogservice(uint64(k)) + 1 + len(v) + sovLogservice(uint64(len(v)))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShutdownStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScheduleCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.Bootstrapping {
		n += 2
	}
	if m.ServiceType != 0 {
		n += 1 + sovLogservice(uint64(m.ServiceType))
	}
	if m.ConfigChange != nil {
		l = m.ConfigChange.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.ShutdownStore != nil {
		l = m.ShutdownStore.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.CreateTaskService != nil {
		l = m.CreateTaskService.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.DeleteCNStore != nil {
		l = m.DeleteCNStore.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTaskService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.User.Size()
	n += 1 + l + sovLogservice(uint64(l))
	l = len(m.TaskDatabase)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCNStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovLogservice(uint64(m.Term))
	}
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CNStoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tick != 0 {
		n += 1 + sovLogservice(uint64(m.Tick))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.SQLAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.LockServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.CtlAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovLogservice(uint64(m.Role))
	}
	if m.TaskServiceCreated {
		n += 2
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.WorkState != 0 {
		n += 1 + sovLogservice(uint64(m.WorkState))
	}
	l = len(m.QueryAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CNState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stores) > 0 {
		for k, v := range m.Stores {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DNStoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tick != 0 {
		n += 1 + sovLogservice(uint64(m.Tick))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.TaskServiceCreated {
		n += 2
	}
	l = len(m.LogtailServerAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.LockServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.CtlAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DNState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stores) > 0 {
		for k, v := range m.Stores {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DNStores) > 0 {
		for _, e := range m.DNStores {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if len(m.CNStores) > 0 {
		for _, e := range m.CNStores {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if len(m.LogStores) > 0 {
		for _, e := range m.LogStores {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DNShards) > 0 {
		for _, e := range m.DNShards {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if len(m.LogShards) > 0 {
		for _, e := range m.LogShards {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitialClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumOfLogShards != 0 {
		n += 1 + sovLogservice(uint64(m.NumOfLogShards))
	}
	if m.NumOfDNShards != 0 {
		n += 1 + sovLogservice(uint64(m.NumOfDNShards))
	}
	if m.NumOfLogReplicas != 0 {
		n += 1 + sovLogservice(uint64(m.NumOfLogReplicas))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogStoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tick != 0 {
		n += 1 + sovLogservice(uint64(m.Tick))
	}
	l = len(m.RaftAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.GossipAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	if m.TaskServiceCreated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for k, v := range m.Shards {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovLogservice(uint64(k)) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if len(m.Stores) > 0 {
		for k, v := range m.Stores {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tick != 0 {
		n += 1 + sovLogservice(uint64(m.Tick))
	}
	l = m.ClusterInfo.Size()
	n += 1 + l + sovLogservice(uint64(l))
	l = m.DNState.Size()
	n += 1 + l + sovLogservice(uint64(l))
	l = m.LogState.Size()
	n += 1 + l + sovLogservice(uint64(l))
	l = m.CNState.Size()
	n += 1 + l + sovLogservice(uint64(l))
	if m.State != 0 {
		n += 1 + sovLogservice(uint64(m.State))
	}
	if m.TaskSchedulerState != 0 {
		n += 1 + sovLogservice(uint64(m.TaskSchedulerState))
	}
	l = m.TaskTableUser.Size()
	n += 1 + l + sovLogservice(uint64(l))
	if m.NextId != 0 {
		n += 1 + sovLogservice(uint64(m.NextId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HAKeeperRSMState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovLogservice(uint64(m.Index))
	}
	if m.Tick != 0 {
		n += 1 + sovLogservice(uint64(m.Tick))
	}
	if m.NextID != 0 {
		n += 1 + sovLogservice(uint64(m.NextID))
	}
	if len(m.NextIDByKey) > 0 {
		for k, v := range m.NextIDByKey {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + sovLogservice(uint64(v))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.Term != 0 {
		n += 1 + sovLogservice(uint64(m.Term))
	}
	if m.State != 0 {
		n += 1 + sovLogservice(uint64(m.State))
	}
	if m.TaskSchedulerState != 0 {
		n += 1 + sovLogservice(uint64(m.TaskSchedulerState))
	}
	if len(m.ScheduleCommands) > 0 {
		for k, v := range m.ScheduleCommands {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if len(m.LogShards) > 0 {
		for k, v := range m.LogShards {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovLogservice(uint64(len(k))) + 1 + sovLogservice(uint64(v))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	l = m.CNState.Size()
	n += 1 + l + sovLogservice(uint64(l))
	l = m.DNState.Size()
	n += 1 + l + sovLogservice(uint64(l))
	l = m.LogState.Size()
	n += 1 + l + sovLogservice(uint64(l))
	l = m.ClusterInfo.Size()
	n += 1 + l + sovLogservice(uint64(l))
	l = m.TaskTableUser.Size()
	n += 1 + l + sovLogservice(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplicaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardInfoQueryResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovLogservice(uint64(m.ShardID))
	}
	if len(m.Replicas) > 0 {
		for k, v := range m.Replicas {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovLogservice(uint64(k)) + 1 + l + sovLogservice(uint64(l))
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	if m.Epoch != 0 {
		n += 1 + sovLogservice(uint64(m.Epoch))
	}
	if m.LeaderID != 0 {
		n += 1 + sovLogservice(uint64(m.LeaderID))
	}
	if m.Term != 0 {
		n += 1 + sovLogservice(uint64(m.Term))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLogservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogservice(x uint64) (n int) {
	return sovLogservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CNStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQLAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtlAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtlAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= metadata.CNRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= NodeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]metadata.LabelList)
			}
			var mapkey string
			mapvalue := &metadata.LabelList{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &metadata.LabelList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = *mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkState", wireType)
			}
			m.WorkState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkState |= metadata.WorkState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= NodeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, DNShardInfo{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogtailServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogtailServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtlAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtlAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= NodeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, LogReplicaInfo{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogShardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogShardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogShardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replicas == nil {
				m.Replicas = make(map[uint64]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Replicas[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			m.LeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogReplicaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogReplicaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogReplicaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogShardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LogShardInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNStoreHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNStoreHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNStoreHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQLAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtlAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtlAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= metadata.CNRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskServiceCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskServiceCreated = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitWorkState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitWorkState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNAllocateID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNAllocateID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNAllocateID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			m.Batch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Batch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStoreHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStoreHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStoreHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GossipAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GossipAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, LogReplicaInfo{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskServiceCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskServiceCreated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNShardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNShardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNShardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNStoreHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNStoreHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNStoreHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, DNShardInfo{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskServiceCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskServiceCreated = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogtailServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogtailServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtlAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtlAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSMState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSMState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSMState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tso", wireType)
			}
			m.Tso = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tso |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseHolderID", wireType)
			}
			m.LeaseHolderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseHolderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TruncatedLsn", wireType)
			}
			m.TruncatedLsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TruncatedLsn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseHistory == nil {
				m.LeaseHistory = make(map[uint64]uint64)
			}
			var mapkey uint64
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LeaseHistory[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lsn", wireType)
			}
			m.Lsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lsn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RecordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lsn", wireType)
			}
			m.Lsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lsn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNShardID", wireType)
			}
			m.DNShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DNShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNID", wireType)
			}
			m.DNID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DNID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNStoreLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNStoreLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNStoreLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= CNLabelOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]metadata.LabelList)
			}
			var mapkey string
			mapvalue := &metadata.LabelList{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &metadata.LabelList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNWorkState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNWorkState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNWorkState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= metadata.WorkState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNStateLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNStateLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNStateLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= metadata.WorkState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]metadata.LabelList)
			}
			var mapkey string
			mapvalue := &metadata.LabelList{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &metadata.LabelList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= MethodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LogRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogHeartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogHeartbeat == nil {
				m.LogHeartbeat = &LogStoreHeartbeat{}
			}
			if err := m.LogHeartbeat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNHeartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CNHeartbeat == nil {
				m.CNHeartbeat = &CNStoreHeartbeat{}
			}
			if err := m.CNHeartbeat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNHeartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DNHeartbeat == nil {
				m.DNHeartbeat = &DNStoreHeartbeat{}
			}
			if err := m.DNHeartbeat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsoRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsoRequest == nil {
				m.TsoRequest = &TsoRequest{}
			}
			if err := m.TsoRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNAllocateID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CNAllocateID == nil {
				m.CNAllocateID = &CNAllocateID{}
			}
			if err := m.CNAllocateID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNStoreLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CNStoreLabel == nil {
				m.CNStoreLabel = &CNStoreLabel{}
			}
			if err := m.CNStoreLabel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNWorkState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CNWorkState == nil {
				m.CNWorkState = &CNWorkState{}
			}
			if err := m.CNWorkState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNStateLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CNStateLabel == nil {
				m.CNStateLabel = &CNStateLabel{}
			}
			if err := m.CNStateLabel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteCNStore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteCNStore == nil {
				m.DeleteCNStore = &DeleteCNStore{}
			}
			if err := m.DeleteCNStore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lsn", wireType)
			}
			m.Lsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lsn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLsn", wireType)
			}
			m.LastLsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLsn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstID", wireType)
			}
			m.FirstID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= MethodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHAKeeper", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHAKeeper = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LogResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommandBatch == nil {
				m.CommandBatch = &CommandBatch{}
			}
			if err := m.CommandBatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsoResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsoResponse == nil {
				m.TsoResponse = &TsoResponse{}
			}
			if err := m.TsoResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterDetails == nil {
				m.ClusterDetails = &ClusterDetails{}
			}
			if err := m.ClusterDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardInfo == nil {
				m.ShardInfo = &ShardInfoQueryResult{}
			}
			if err := m.ShardInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocateID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllocateID == nil {
				m.AllocateID = &AllocateIDResponse{}
			}
			if err := m.AllocateID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckerState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckerState == nil {
				m.CheckerState = &CheckerState{}
			}
			if err := m.CheckerState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, LogRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskTableUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskTableUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskTableUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replica) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replica: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replica: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogShardID", wireType)
			}
			m.LogShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Replica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			m.ChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeType |= ConfigChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitialMembers == nil {
				m.InitialMembers = make(map[uint64]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InitialMembers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootstrapping", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bootstrapping = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigChange == nil {
				m.ConfigChange = &ConfigChange{}
			}
			if err := m.ConfigChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShutdownStore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShutdownStore == nil {
				m.ShutdownStore = &ShutdownStore{}
			}
			if err := m.ShutdownStore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTaskService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateTaskService == nil {
				m.CreateTaskService = &CreateTaskService{}
			}
			if err := m.CreateTaskService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteCNStore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteCNStore == nil {
				m.DeleteCNStore = &DeleteCNStore{}
			}
			if err := m.DeleteCNStore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTaskService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTaskService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTaskService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDatabase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskDatabase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCNStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCNStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCNStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, ScheduleCommand{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNStoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNStoreInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNStoreInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQLAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtlAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtlAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= metadata.CNRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskServiceCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskServiceCreated = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]metadata.LabelList)
			}
			var mapkey string
			mapvalue := &metadata.LabelList{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &metadata.LabelList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = *mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkState", wireType)
			}
			m.WorkState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkState |= metadata.WorkState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stores == nil {
				m.Stores = make(map[string]CNStoreInfo)
			}
			var mapkey string
			mapvalue := &CNStoreInfo{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CNStoreInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Stores[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNStoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNStoreInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNStoreInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, DNShardInfo{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskServiceCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskServiceCreated = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogtailServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogtailServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtlAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtlAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stores == nil {
				m.Stores = make(map[string]DNStoreInfo)
			}
			var mapkey string
			mapvalue := &DNStoreInfo{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DNStoreInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Stores[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNStores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DNStores = append(m.DNStores, DNStore{})
			if err := m.DNStores[len(m.DNStores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNStores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CNStores = append(m.CNStores, CNStore{})
			if err := m.CNStores[len(m.CNStores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogStores = append(m.LogStores, LogStore{})
			if err := m.LogStores[len(m.LogStores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNShards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DNShards = append(m.DNShards, metadata.DNShardRecord{})
			if err := m.DNShards[len(m.DNShards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogShards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogShards = append(m.LogShards, metadata.LogShardRecord{})
			if err := m.LogShards[len(m.LogShards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitialClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitialClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitialClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfLogShards", wireType)
			}
			m.NumOfLogShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfLogShards |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfDNShards", wireType)
			}
			m.NumOfDNShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfDNShards |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfLogReplicas", wireType)
			}
			m.NumOfLogReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfLogReplicas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStoreInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStoreInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GossipAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GossipAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, LogReplicaInfo{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskServiceCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskServiceCreated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shards == nil {
				m.Shards = make(map[uint64]LogShardInfo)
			}
			var mapkey uint64
			mapvalue := &LogShardInfo{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LogShardInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Shards[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stores == nil {
				m.Stores = make(map[string]LogStoreInfo)
			}
			var mapkey string
			mapvalue := &LogStoreInfo{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LogStoreInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Stores[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DNState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LogState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CNState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= HAKeeperState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskSchedulerState", wireType)
			}
			m.TaskSchedulerState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskSchedulerState |= TaskSchedulerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskTableUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaskTableUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextId", wireType)
			}
			m.NextId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HAKeeperRSMState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HAKeeperRSMState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HAKeeperRSMState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextID", wireType)
			}
			m.NextID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIDByKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextIDByKey == nil {
				m.NextIDByKey = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NextIDByKey[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= HAKeeperState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskSchedulerState", wireType)
			}
			m.TaskSchedulerState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskSchedulerState |= TaskSchedulerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleCommands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleCommands == nil {
				m.ScheduleCommands = make(map[string]CommandBatch)
			}
			var mapkey string
			mapvalue := &CommandBatch{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CommandBatch{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ScheduleCommands[mapkey] = *mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogShards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogShards == nil {
				m.LogShards = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLogservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LogShards[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CNState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DNState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LogState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskTableUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaskTableUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardInfoQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardInfoQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardInfoQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replicas == nil {
				m.Replicas = make(map[uint64]ReplicaInfo)
			}
			var mapkey uint64
			mapvalue := &ReplicaInfo{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ReplicaInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Replicas[mapkey] = *mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			m.LeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogservice = fmt.Errorf("proto: unexpected end of group")
)
