// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logservice/rpc.proto

package logservice

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MethodType int32

const (
	MethodType_CREATE       MethodType = 0
	MethodType_DESTROY      MethodType = 1
	MethodType_APPEND       MethodType = 2
	MethodType_READ         MethodType = 3
	MethodType_TRUNCATE     MethodType = 4
	MethodType_GET_TRUNCATE MethodType = 5
	MethodType_CONNECT      MethodType = 6
	MethodType_CONNECT_RO   MethodType = 7
)

var MethodType_name = map[int32]string{
	0: "CREATE",
	1: "DESTROY",
	2: "APPEND",
	3: "READ",
	4: "TRUNCATE",
	5: "GET_TRUNCATE",
	6: "CONNECT",
	7: "CONNECT_RO",
}

var MethodType_value = map[string]int32{
	"CREATE":       0,
	"DESTROY":      1,
	"APPEND":       2,
	"READ":         3,
	"TRUNCATE":     4,
	"GET_TRUNCATE": 5,
	"CONNECT":      6,
	"CONNECT_RO":   7,
}

func (x MethodType) String() string {
	return proto.EnumName(MethodType_name, int32(x))
}

func (MethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c25257d21f17df9, []int{0}
}

type ErrorCode int32

const (
	ErrorCode_NoError               ErrorCode = 0
	ErrorCode_Timeout               ErrorCode = 1
	ErrorCode_Canceled              ErrorCode = 2
	ErrorCode_InvalidShard          ErrorCode = 3
	ErrorCode_InvalidTimeout        ErrorCode = 4
	ErrorCode_InvalidPayload        ErrorCode = 5
	ErrorCode_InvalidPayloadSize    ErrorCode = 6
	ErrorCode_Rejected              ErrorCode = 7
	ErrorCode_ShardNotReady         ErrorCode = 8
	ErrorCode_SystemClosed          ErrorCode = 9
	ErrorCode_IndexAlreadyTruncated ErrorCode = 100
	ErrorCode_OutOfRange            ErrorCode = 101
	ErrorCode_NotLeaseHolder        ErrorCode = 102
	ErrorCode_OtherSystemError      ErrorCode = 1000
)

var ErrorCode_name = map[int32]string{
	0:    "NoError",
	1:    "Timeout",
	2:    "Canceled",
	3:    "InvalidShard",
	4:    "InvalidTimeout",
	5:    "InvalidPayload",
	6:    "InvalidPayloadSize",
	7:    "Rejected",
	8:    "ShardNotReady",
	9:    "SystemClosed",
	100:  "IndexAlreadyTruncated",
	101:  "OutOfRange",
	102:  "NotLeaseHolder",
	1000: "OtherSystemError",
}

var ErrorCode_value = map[string]int32{
	"NoError":               0,
	"Timeout":               1,
	"Canceled":              2,
	"InvalidShard":          3,
	"InvalidTimeout":        4,
	"InvalidPayload":        5,
	"InvalidPayloadSize":    6,
	"Rejected":              7,
	"ShardNotReady":         8,
	"SystemClosed":          9,
	"IndexAlreadyTruncated": 100,
	"OutOfRange":            101,
	"NotLeaseHolder":        102,
	"OtherSystemError":      1000,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c25257d21f17df9, []int{1}
}

type LogRecord struct {
	Index uint64 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *LogRecord) Reset()         { *m = LogRecord{} }
func (m *LogRecord) String() string { return proto.CompactTextString(m) }
func (*LogRecord) ProtoMessage()    {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c25257d21f17df9, []int{0}
}
func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return m.Size()
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Request struct {
	Method      MethodType `protobuf:"varint,1,opt,name=Method,proto3,enum=logservice.MethodType" json:"Method,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ShardID     uint64     `protobuf:"varint,3,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Index       uint64     `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	MaxSize     uint64     `protobuf:"varint,5,opt,name=MaxSize,proto3" json:"MaxSize,omitempty"`
	Timeout     int64      `protobuf:"varint,6,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	DNShardID   uint64     `protobuf:"varint,7,opt,name=DNShardID,proto3" json:"DNShardID,omitempty"`
	DNID        uint64     `protobuf:"varint,8,opt,name=DNID,proto3" json:"DNID,omitempty"`
	PayloadSize uint64     `protobuf:"varint,9,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c25257d21f17df9, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMethod() MethodType {
	if m != nil {
		return m.Method
	}
	return MethodType_CREATE
}

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Request) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Request) GetMaxSize() uint64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *Request) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Request) GetDNShardID() uint64 {
	if m != nil {
		return m.DNShardID
	}
	return 0
}

func (m *Request) GetDNID() uint64 {
	if m != nil {
		return m.DNID
	}
	return 0
}

func (m *Request) GetPayloadSize() uint64 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type Response struct {
	Method       MethodType `protobuf:"varint,1,opt,name=Method,proto3,enum=logservice.MethodType" json:"Method,omitempty"`
	ErrorCode    ErrorCode  `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=logservice.ErrorCode" json:"ErrorCode,omitempty"`
	ErrorMessage string     `protobuf:"bytes,3,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	ShardID      uint64     `protobuf:"varint,4,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Index        uint64     `protobuf:"varint,5,opt,name=Index,proto3" json:"Index,omitempty"`
	LastIndex    uint64     `protobuf:"varint,6,opt,name=LastIndex,proto3" json:"LastIndex,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c25257d21f17df9, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMethod() MethodType {
	if m != nil {
		return m.Method
	}
	return MethodType_CREATE
}

func (m *Response) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ErrorCode_NoError
}

func (m *Response) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *Response) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Response) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Response) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

type LogRecordResponse struct {
	Records []LogRecord `protobuf:"bytes,1,rep,name=Records,proto3" json:"Records"`
}

func (m *LogRecordResponse) Reset()         { *m = LogRecordResponse{} }
func (m *LogRecordResponse) String() string { return proto.CompactTextString(m) }
func (*LogRecordResponse) ProtoMessage()    {}
func (*LogRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c25257d21f17df9, []int{3}
}
func (m *LogRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecordResponse.Merge(m, src)
}
func (m *LogRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *LogRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecordResponse proto.InternalMessageInfo

func (m *LogRecordResponse) GetRecords() []LogRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterEnum("logservice.MethodType", MethodType_name, MethodType_value)
	proto.RegisterEnum("logservice.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*LogRecord)(nil), "logservice.LogRecord")
	proto.RegisterType((*Request)(nil), "logservice.Request")
	proto.RegisterType((*Response)(nil), "logservice.Response")
	proto.RegisterType((*LogRecordResponse)(nil), "logservice.LogRecordResponse")
}

func init() { proto.RegisterFile("logservice/rpc.proto", fileDescriptor_9c25257d21f17df9) }

var fileDescriptor_9c25257d21f17df9 = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0x8d, 0x13, 0x27, 0x8e, 0x2f, 0x79, 0xd1, 0x30, 0x02, 0xe4, 0xf7, 0x84, 0xf2, 0xa2, 0xac,
	0x22, 0xa4, 0x06, 0x09, 0xc4, 0x0f, 0x08, 0xb6, 0xd5, 0xa6, 0x02, 0x07, 0x4d, 0xdc, 0x45, 0x57,
	0x68, 0xb0, 0x2f, 0x4e, 0x2a, 0x27, 0x93, 0xda, 0x0e, 0x22, 0xdd, 0x77, 0x5b, 0xf5, 0x67, 0xb1,
	0x64, 0xd9, 0x55, 0xd5, 0xc2, 0xa6, 0x3f, 0xa3, 0x9a, 0x71, 0x3e, 0xcc, 0xa2, 0x8b, 0xee, 0xe6,
	0x9c, 0x7b, 0xee, 0xd7, 0xf1, 0x95, 0x61, 0x2f, 0x16, 0x51, 0x8a, 0xc9, 0xdd, 0x24, 0xc0, 0xe3,
	0x64, 0x1e, 0xf4, 0xe6, 0x89, 0xc8, 0x04, 0x85, 0x2d, 0xfb, 0xdf, 0xab, 0x68, 0x92, 0x8d, 0x17,
	0x37, 0xbd, 0x40, 0x4c, 0x8f, 0x23, 0x11, 0x89, 0x63, 0x25, 0xb9, 0x59, 0xdc, 0x2a, 0xa4, 0x80,
	0x7a, 0xe5, 0xa9, 0x9d, 0x33, 0x30, 0x2f, 0x44, 0xc4, 0x30, 0x10, 0x49, 0x48, 0xf7, 0xa0, 0x3a,
	0x98, 0x85, 0x78, 0x6f, 0x69, 0x6d, 0xad, 0xab, 0xb3, 0x1c, 0x50, 0x0a, 0xba, 0xc3, 0x33, 0x6e,
	0x95, 0xdb, 0x5a, 0xb7, 0xc1, 0xd4, 0xbb, 0xf3, 0xb9, 0x0c, 0x06, 0xc3, 0x8f, 0x0b, 0x4c, 0x33,
	0xda, 0x83, 0xda, 0x25, 0x66, 0x63, 0x11, 0xaa, 0xb4, 0xe6, 0xc9, 0x41, 0x6f, 0x3b, 0x4e, 0x2f,
	0x8f, 0xf8, 0xcb, 0x39, 0xb2, 0x95, 0x4a, 0xd6, 0xf3, 0xf8, 0x14, 0x55, 0x3d, 0x93, 0xa9, 0x37,
	0xb5, 0xc0, 0x18, 0x8d, 0x79, 0x12, 0x0e, 0x1c, 0xab, 0xa2, 0x7a, 0xaf, 0xe1, 0x76, 0x26, 0xbd,
	0x38, 0x93, 0x05, 0xc6, 0x25, 0xbf, 0x1f, 0x4d, 0x3e, 0xa1, 0x55, 0xcd, 0xf5, 0x2b, 0x28, 0x23,
	0xfe, 0x64, 0x8a, 0x62, 0x91, 0x59, 0xb5, 0xb6, 0xd6, 0xad, 0xb0, 0x35, 0xa4, 0x87, 0x60, 0x3a,
	0xde, 0xba, 0x8b, 0xa1, 0xb2, 0xb6, 0x84, 0xda, 0xd2, 0x1b, 0x38, 0x56, 0x5d, 0x05, 0xd4, 0x9b,
	0xb6, 0x61, 0xe7, 0x8a, 0x2f, 0x63, 0xc1, 0x43, 0xd5, 0xc9, 0x54, 0xa1, 0x22, 0xd5, 0xf9, 0xa9,
	0x41, 0x9d, 0x61, 0x3a, 0x17, 0xb3, 0x14, 0xff, 0xda, 0x88, 0x53, 0x30, 0xdd, 0x24, 0x11, 0x89,
	0x2d, 0xc2, 0xdc, 0x8d, 0xe6, 0xc9, 0x7e, 0x31, 0x65, 0x13, 0x64, 0x5b, 0x1d, 0xed, 0x40, 0x43,
	0x81, 0x4b, 0x4c, 0x53, 0x1e, 0xa1, 0xb2, 0xcb, 0x64, 0x2f, 0xb8, 0xa2, 0x9b, 0xfa, 0x1f, 0xdc,
	0xac, 0x16, 0xdd, 0x3c, 0x04, 0xf3, 0x82, 0xa7, 0x59, 0x1e, 0xa9, 0xe5, 0xce, 0x6c, 0x88, 0xce,
	0x5b, 0xd8, 0xdd, 0x9c, 0xc8, 0x66, 0xd7, 0x33, 0xf9, 0xfd, 0x25, 0x93, 0x5a, 0x5a, 0xbb, 0xd2,
	0xdd, 0x79, 0x39, 0xf9, 0x46, 0x7f, 0xae, 0x3f, 0x7c, 0xff, 0xbf, 0xc4, 0xd6, 0xda, 0xa3, 0x7b,
	0x80, 0xad, 0x11, 0x14, 0xa0, 0x66, 0x33, 0xb7, 0xef, 0xbb, 0xa4, 0x44, 0x77, 0xc0, 0x70, 0xdc,
	0x91, 0xcf, 0x86, 0xef, 0x89, 0x26, 0x03, 0xfd, 0xab, 0x2b, 0xd7, 0x73, 0x48, 0x99, 0xd6, 0x41,
	0x67, 0x6e, 0xdf, 0x21, 0x15, 0xda, 0x80, 0xba, 0xcf, 0xde, 0x79, 0xb6, 0x4c, 0xd0, 0x29, 0x81,
	0xc6, 0x6b, 0xd7, 0xbf, 0xde, 0x30, 0x55, 0x59, 0xc2, 0x1e, 0x7a, 0x9e, 0x6b, 0xfb, 0xa4, 0x46,
	0x9b, 0x00, 0x2b, 0x70, 0xcd, 0x86, 0xc4, 0x38, 0xfa, 0x52, 0x2e, 0xb8, 0x2d, 0xa5, 0x9e, 0x50,
	0x30, 0x6f, 0xbd, 0xba, 0x11, 0xa2, 0xc9, 0x26, 0x36, 0x9f, 0x05, 0x18, 0x63, 0x48, 0xca, 0xb2,
	0xc9, 0x60, 0x76, 0xc7, 0xe3, 0x49, 0xa8, 0x1c, 0x24, 0x15, 0x4a, 0xa1, 0xb9, 0x62, 0xd6, 0x39,
	0x7a, 0x81, 0x5b, 0xdd, 0x06, 0xa9, 0xd2, 0x03, 0xa0, 0x2f, 0x39, 0x79, 0x2f, 0xa4, 0x26, 0xeb,
	0x33, 0xfc, 0x80, 0x41, 0x86, 0x21, 0x31, 0xe8, 0x2e, 0xfc, 0xa3, 0x0a, 0x7b, 0x22, 0x63, 0xc8,
	0xc3, 0x25, 0xa9, 0xcb, 0x96, 0xa3, 0x65, 0x9a, 0xe1, 0xd4, 0x8e, 0x45, 0x8a, 0x21, 0x31, 0xe9,
	0xbf, 0xb0, 0xaf, 0xbe, 0x44, 0x3f, 0x4e, 0xa4, 0xc6, 0x4f, 0x16, 0xb3, 0x80, 0xcb, 0xfc, 0x50,
	0x6e, 0x39, 0x5c, 0x64, 0xc3, 0x5b, 0xc6, 0x67, 0x11, 0x12, 0x94, 0x93, 0x78, 0x22, 0xbb, 0x40,
	0x9e, 0xe2, 0x1b, 0x11, 0x87, 0x98, 0x90, 0x5b, 0xba, 0x0f, 0x64, 0x98, 0x8d, 0x31, 0xc9, 0xab,
	0xe6, 0x4b, 0xff, 0x32, 0xce, 0xad, 0x87, 0xa7, 0x96, 0xf6, 0xf8, 0xd4, 0xd2, 0x7e, 0x3c, 0xb5,
	0xb4, 0xaf, 0xcf, 0xad, 0xd2, 0xe3, 0x73, 0xab, 0xf4, 0xed, 0xb9, 0x55, 0xba, 0xa9, 0xa9, 0x5f,
	0xc3, 0xe9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xd4, 0xf6, 0x86, 0x6d, 0x04, 0x00, 0x00,
}

func (m *LogRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayloadSize != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.PayloadSize))
		i--
		dAtA[i] = 0x48
	}
	if m.DNID != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.DNID))
		i--
		dAtA[i] = 0x40
	}
	if m.DNShardID != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.DNShardID))
		i--
		dAtA[i] = 0x38
	}
	if m.Timeout != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxSize != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x28
	}
	if m.Index != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if m.ShardID != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Method != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastIndex != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.LastIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.Index != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x28
	}
	if m.ShardID != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Method != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRpc(uint64(m.Index))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovRpc(uint64(m.Method))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovRpc(uint64(m.ShardID))
	}
	if m.Index != 0 {
		n += 1 + sovRpc(uint64(m.Index))
	}
	if m.MaxSize != 0 {
		n += 1 + sovRpc(uint64(m.MaxSize))
	}
	if m.Timeout != 0 {
		n += 1 + sovRpc(uint64(m.Timeout))
	}
	if m.DNShardID != 0 {
		n += 1 + sovRpc(uint64(m.DNShardID))
	}
	if m.DNID != 0 {
		n += 1 + sovRpc(uint64(m.DNID))
	}
	if m.PayloadSize != 0 {
		n += 1 + sovRpc(uint64(m.PayloadSize))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovRpc(uint64(m.Method))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovRpc(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovRpc(uint64(m.ShardID))
	}
	if m.Index != 0 {
		n += 1 + sovRpc(uint64(m.Index))
	}
	if m.LastIndex != 0 {
		n += 1 + sovRpc(uint64(m.LastIndex))
	}
	return n
}

func (m *LogRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= MethodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNShardID", wireType)
			}
			m.DNShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DNShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNID", wireType)
			}
			m.DNID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DNID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSize", wireType)
			}
			m.PayloadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= MethodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, LogRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
