// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cache.proto

package cache

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CmdMethod int32

const (
	// RemoteRead is the command that remote read file.
	CmdMethod_RemoteRead CmdMethod = 0
)

var CmdMethod_name = map[int32]string{
	0: "RemoteRead",
}

var CmdMethod_value = map[string]int32{
	"RemoteRead": 0,
}

func (x CmdMethod) String() string {
	return proto.EnumName(CmdMethod_name, int32(x))
}

func (CmdMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{0}
}

type CacheKey struct {
	Path   string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Sz     int64  `protobuf:"varint,3,opt,name=Sz,proto3" json:"Sz,omitempty"`
}

func (m *CacheKey) Reset()         { *m = CacheKey{} }
func (m *CacheKey) String() string { return proto.CompactTextString(m) }
func (*CacheKey) ProtoMessage()    {}
func (*CacheKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{0}
}
func (m *CacheKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheKey.Merge(m, src)
}
func (m *CacheKey) XXX_Size() int {
	return m.Size()
}
func (m *CacheKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheKey.DiscardUnknown(m)
}

var xxx_messageInfo_CacheKey proto.InternalMessageInfo

func (m *CacheKey) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CacheKey) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *CacheKey) GetSz() int64 {
	if m != nil {
		return m.Sz
	}
	return 0
}

type CacheKeys struct {
	Keys []CacheKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys"`
}

func (m *CacheKeys) Reset()         { *m = CacheKeys{} }
func (m *CacheKeys) String() string { return proto.CompactTextString(m) }
func (*CacheKeys) ProtoMessage()    {}
func (*CacheKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{1}
}
func (m *CacheKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheKeys.Merge(m, src)
}
func (m *CacheKeys) XXX_Size() int {
	return m.Size()
}
func (m *CacheKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheKeys.DiscardUnknown(m)
}

var xxx_messageInfo_CacheKeys proto.InternalMessageInfo

func (m *CacheKeys) GetKeys() []CacheKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type TargetCacheKey struct {
	TargetKey map[string]*CacheKeys `protobuf:"bytes,1,rep,name=TargetKey,proto3" json:"TargetKey,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TargetCacheKey) Reset()         { *m = TargetCacheKey{} }
func (m *TargetCacheKey) String() string { return proto.CompactTextString(m) }
func (*TargetCacheKey) ProtoMessage()    {}
func (*TargetCacheKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{2}
}
func (m *TargetCacheKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetCacheKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TargetCacheKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TargetCacheKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetCacheKey.Merge(m, src)
}
func (m *TargetCacheKey) XXX_Size() int {
	return m.Size()
}
func (m *TargetCacheKey) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetCacheKey.DiscardUnknown(m)
}

var xxx_messageInfo_TargetCacheKey proto.InternalMessageInfo

func (m *TargetCacheKey) GetTargetKey() map[string]*CacheKeys {
	if m != nil {
		return m.TargetKey
	}
	return nil
}

type RequestCacheKey struct {
	Index    int32     `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	CacheKey *CacheKey `protobuf:"bytes,2,opt,name=CacheKey,proto3" json:"CacheKey,omitempty"`
}

func (m *RequestCacheKey) Reset()         { *m = RequestCacheKey{} }
func (m *RequestCacheKey) String() string { return proto.CompactTextString(m) }
func (*RequestCacheKey) ProtoMessage()    {}
func (*RequestCacheKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{3}
}
func (m *RequestCacheKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCacheKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCacheKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCacheKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCacheKey.Merge(m, src)
}
func (m *RequestCacheKey) XXX_Size() int {
	return m.Size()
}
func (m *RequestCacheKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCacheKey.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCacheKey proto.InternalMessageInfo

func (m *RequestCacheKey) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RequestCacheKey) GetCacheKey() *CacheKey {
	if m != nil {
		return m.CacheKey
	}
	return nil
}

// RemoteReadRequest is the request that try to get cache from this node.
// statement that need to be executed on the specified CN node.
type RemoteReadRequest struct {
	// RequestCacheKey is the requested cache key.
	RequestCacheKey []*RequestCacheKey `protobuf:"bytes,1,rep,name=RequestCacheKey,proto3" json:"RequestCacheKey,omitempty"`
}

func (m *RemoteReadRequest) Reset()         { *m = RemoteReadRequest{} }
func (m *RemoteReadRequest) String() string { return proto.CompactTextString(m) }
func (*RemoteReadRequest) ProtoMessage()    {}
func (*RemoteReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{4}
}
func (m *RemoteReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoteReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteReadRequest.Merge(m, src)
}
func (m *RemoteReadRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoteReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteReadRequest proto.InternalMessageInfo

func (m *RemoteReadRequest) GetRequestCacheKey() []*RequestCacheKey {
	if m != nil {
		return m.RequestCacheKey
	}
	return nil
}

// ResponseCacheData is the response of remote read.
type ResponseCacheData struct {
	Index int32  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Hit   bool   `protobuf:"varint,2,opt,name=Hit,proto3" json:"Hit,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ResponseCacheData) Reset()         { *m = ResponseCacheData{} }
func (m *ResponseCacheData) String() string { return proto.CompactTextString(m) }
func (*ResponseCacheData) ProtoMessage()    {}
func (*ResponseCacheData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{5}
}
func (m *ResponseCacheData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseCacheData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseCacheData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseCacheData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseCacheData.Merge(m, src)
}
func (m *ResponseCacheData) XXX_Size() int {
	return m.Size()
}
func (m *ResponseCacheData) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseCacheData.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseCacheData proto.InternalMessageInfo

func (m *ResponseCacheData) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ResponseCacheData) GetHit() bool {
	if m != nil {
		return m.Hit
	}
	return false
}

func (m *ResponseCacheData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// RemoteReadResponse is the response of remote read.
type RemoteReadResponse struct {
	ResponseCacheData []*ResponseCacheData `protobuf:"bytes,1,rep,name=ResponseCacheData,proto3" json:"ResponseCacheData,omitempty"`
}

func (m *RemoteReadResponse) Reset()         { *m = RemoteReadResponse{} }
func (m *RemoteReadResponse) String() string { return proto.CompactTextString(m) }
func (*RemoteReadResponse) ProtoMessage()    {}
func (*RemoteReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{6}
}
func (m *RemoteReadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteReadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoteReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteReadResponse.Merge(m, src)
}
func (m *RemoteReadResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoteReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteReadResponse proto.InternalMessageInfo

func (m *RemoteReadResponse) GetResponseCacheData() []*ResponseCacheData {
	if m != nil {
		return m.ResponseCacheData
	}
	return nil
}

// Request is the request of file-service cache server.
type Request struct {
	// RequestID is the request ID.
	RequestID uint64 `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	// CmdMethod is the type of command.
	CmdMethod CmdMethod `protobuf:"varint,2,opt,name=CmdMethod,proto3,enum=cache.CmdMethod" json:"CmdMethod,omitempty"`
	// RemoteReadRequest is the request to remote read.
	RemoteReadRequest *RemoteReadRequest `protobuf:"bytes,3,opt,name=RemoteReadRequest,proto3" json:"RemoteReadRequest,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{7}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *Request) GetCmdMethod() CmdMethod {
	if m != nil {
		return m.CmdMethod
	}
	return CmdMethod_RemoteRead
}

func (m *Request) GetRemoteReadRequest() *RemoteReadRequest {
	if m != nil {
		return m.RemoteReadRequest
	}
	return nil
}

// Response is the response to request.
type Response struct {
	// RequestID is the request ID.
	RequestID uint64 `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	// CmdMethod is the type of command.
	CmdMethod CmdMethod `protobuf:"varint,2,opt,name=CmdMethod,proto3,enum=cache.CmdMethod" json:"CmdMethod,omitempty"`
	// Error is used to return moerr. Set
	Error []byte `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	// RemoteReadResponse is the response of remote read.
	RemoteReadResponse *RemoteReadResponse `protobuf:"bytes,4,opt,name=RemoteReadResponse,proto3" json:"RemoteReadResponse,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca3b110c9bbf3a, []int{8}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *Response) GetCmdMethod() CmdMethod {
	if m != nil {
		return m.CmdMethod
	}
	return CmdMethod_RemoteRead
}

func (m *Response) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetRemoteReadResponse() *RemoteReadResponse {
	if m != nil {
		return m.RemoteReadResponse
	}
	return nil
}

func init() {
	proto.RegisterEnum("cache.CmdMethod", CmdMethod_name, CmdMethod_value)
	proto.RegisterType((*CacheKey)(nil), "cache.CacheKey")
	proto.RegisterType((*CacheKeys)(nil), "cache.CacheKeys")
	proto.RegisterType((*TargetCacheKey)(nil), "cache.TargetCacheKey")
	proto.RegisterMapType((map[string]*CacheKeys)(nil), "cache.TargetCacheKey.TargetKeyEntry")
	proto.RegisterType((*RequestCacheKey)(nil), "cache.RequestCacheKey")
	proto.RegisterType((*RemoteReadRequest)(nil), "cache.RemoteReadRequest")
	proto.RegisterType((*ResponseCacheData)(nil), "cache.ResponseCacheData")
	proto.RegisterType((*RemoteReadResponse)(nil), "cache.RemoteReadResponse")
	proto.RegisterType((*Request)(nil), "cache.Request")
	proto.RegisterType((*Response)(nil), "cache.Response")
}

func init() { proto.RegisterFile("cache.proto", fileDescriptor_5fca3b110c9bbf3a) }

var fileDescriptor_5fca3b110c9bbf3a = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb3, 0xf9, 0x28, 0xc9, 0x04, 0xa5, 0x61, 0x55, 0x55, 0xa6, 0x20, 0x13, 0x59, 0x08,
	0x05, 0x10, 0xb6, 0x54, 0x24, 0x84, 0x38, 0xa1, 0xf4, 0x43, 0x8d, 0x2a, 0x28, 0xda, 0x96, 0x0b,
	0xe2, 0xe2, 0x24, 0x1b, 0xc7, 0x0a, 0xf1, 0x06, 0x7b, 0x83, 0x9a, 0x3e, 0x05, 0x6f, 0xc0, 0x85,
	0x97, 0xe0, 0x0d, 0x7a, 0xec, 0x91, 0x13, 0x42, 0xc9, 0x8b, 0x20, 0xcf, 0xae, 0xed, 0xe0, 0x84,
	0x1b, 0xb7, 0xf9, 0xf8, 0xcf, 0x3f, 0xbf, 0x99, 0x8d, 0x0c, 0xf5, 0xbe, 0xdb, 0x1f, 0x71, 0x7b,
	0x1a, 0x0a, 0x29, 0x68, 0x05, 0x93, 0xbd, 0x67, 0x9e, 0x2f, 0x47, 0xb3, 0x9e, 0xdd, 0x17, 0x13,
	0xc7, 0x13, 0x9e, 0x70, 0xb0, 0xdb, 0x9b, 0x0d, 0x31, 0xc3, 0x04, 0x23, 0x35, 0x65, 0x1d, 0x43,
	0xf5, 0x20, 0x9e, 0x3b, 0xe5, 0x73, 0x4a, 0xa1, 0xfc, 0xce, 0x95, 0x23, 0x83, 0xb4, 0x48, 0xbb,
	0xc6, 0x30, 0xa6, 0xbb, 0xb0, 0x75, 0x36, 0x1c, 0x46, 0x5c, 0x1a, 0xc5, 0x16, 0x69, 0x97, 0x98,
	0xce, 0x68, 0x03, 0x8a, 0xe7, 0x57, 0x46, 0x09, 0x6b, 0xc5, 0xf3, 0x2b, 0xeb, 0x05, 0xd4, 0x12,
	0x9f, 0x88, 0x3e, 0x86, 0xf2, 0x98, 0xcf, 0x23, 0x83, 0xb4, 0x4a, 0xed, 0xfa, 0xfe, 0xb6, 0xad,
	0x30, 0x93, 0x7e, 0xa7, 0x7c, 0xfd, 0xeb, 0x41, 0x81, 0xa1, 0xc4, 0xfa, 0x4e, 0xa0, 0x71, 0xe1,
	0x86, 0x1e, 0x97, 0x29, 0x46, 0x07, 0x6a, 0xaa, 0x72, 0xca, 0xe7, 0xda, 0xe2, 0xa1, 0xb6, 0xf8,
	0x5b, 0x69, 0xa7, 0xb2, 0xa3, 0x40, 0x86, 0x73, 0x96, 0x8d, 0xed, 0xbd, 0x4d, 0x5c, 0x93, 0x26,
	0x6d, 0x42, 0x69, 0x8c, 0x7e, 0xf1, 0x6e, 0x71, 0x48, 0x1f, 0x41, 0xe5, 0x8b, 0xfb, 0x69, 0xc6,
	0x71, 0xb3, 0xfa, 0x7e, 0x33, 0x87, 0x19, 0x31, 0xd5, 0x7e, 0x55, 0x7c, 0x49, 0xac, 0x0b, 0xd8,
	0x66, 0xfc, 0xf3, 0x8c, 0x47, 0x19, 0xe6, 0x0e, 0x54, 0xba, 0xc1, 0x80, 0x5f, 0xa2, 0x65, 0x85,
	0xa9, 0x84, 0x3e, 0xcd, 0xee, 0xa9, 0x7d, 0xf3, 0xeb, 0xb3, 0x54, 0x60, 0xbd, 0x87, 0x3b, 0x8c,
	0x4f, 0x84, 0xe4, 0x8c, 0xbb, 0x03, 0xed, 0x4f, 0x5f, 0xaf, 0xfd, 0x94, 0x3e, 0xc2, 0xae, 0x36,
	0xca, 0x75, 0x59, 0x5e, 0x6e, 0x9d, 0xc5, 0xb6, 0xd1, 0x54, 0x04, 0x11, 0xc7, 0xda, 0xa1, 0x2b,
	0xdd, 0x7f, 0xe0, 0x36, 0xa1, 0x74, 0xe2, 0xab, 0xb7, 0xad, 0xb2, 0x38, 0x8c, 0xff, 0x04, 0xb1,
	0x1e, 0x9f, 0xf6, 0x36, 0xc3, 0xd8, 0xfa, 0x08, 0x74, 0x95, 0x53, 0x59, 0xd3, 0xe3, 0x0d, 0x3f,
	0xa3, 0x51, 0x8d, 0x14, 0x35, 0xd7, 0x67, 0xeb, 0x23, 0xd6, 0x37, 0x02, 0xb7, 0x92, 0xe5, 0xef,
	0x43, 0x4d, 0x87, 0xdd, 0x43, 0x24, 0x2d, 0xb3, 0xac, 0x40, 0x6d, 0xa8, 0x1d, 0x4c, 0x06, 0x6f,
	0xb8, 0x1c, 0x89, 0x01, 0x32, 0x37, 0xb2, 0x57, 0x4b, 0xea, 0x2c, 0x93, 0x28, 0xc2, 0xdc, 0x7d,
	0x71, 0xb1, 0x55, 0xc2, 0x5c, 0x9f, 0xad, 0x8f, 0x58, 0x3f, 0x08, 0x54, 0xd3, 0xb5, 0xff, 0x2f,
	0xe2, 0x0e, 0x54, 0x8e, 0xc2, 0x50, 0x84, 0xfa, 0xde, 0x2a, 0xa1, 0xdd, 0x4d, 0x07, 0x37, 0xca,
	0x48, 0x7e, 0x77, 0x03, 0xb9, 0x12, 0xb0, 0x0d, 0x43, 0x4f, 0xee, 0xad, 0x00, 0xd1, 0x06, 0x40,
	0x26, 0x69, 0x16, 0x3a, 0x27, 0xd7, 0x0b, 0x93, 0xdc, 0x2c, 0x4c, 0xf2, 0x7b, 0x61, 0x92, 0xaf,
	0x4b, 0xb3, 0x70, 0xb3, 0x34, 0x0b, 0x3f, 0x97, 0x66, 0xe1, 0x83, 0xbd, 0xf2, 0x19, 0x99, 0xb8,
	0x32, 0xf4, 0x2f, 0x45, 0xe8, 0x7b, 0x7e, 0x90, 0x24, 0x01, 0x77, 0xa6, 0x63, 0xcf, 0x99, 0xf6,
	0x1c, 0xa4, 0xe9, 0x6d, 0xe1, 0xe7, 0xe4, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0x7b,
	0x69, 0xc4, 0x93, 0x04, 0x00, 0x00,
}

func (m *CacheKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sz != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.Sz))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintCache(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CacheKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCache(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TargetCacheKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetCacheKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetCacheKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetKey) > 0 {
		for k := range m.TargetKey {
			v := m.TargetKey[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCache(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCache(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCache(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestCacheKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCacheKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCacheKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheKey != nil {
		{
			size, err := m.CacheKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCache(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoteReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteReadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteReadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestCacheKey) > 0 {
		for iNdEx := len(m.RequestCacheKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestCacheKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCache(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseCacheData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseCacheData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseCacheData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCache(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Hit {
		i--
		if m.Hit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoteReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteReadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteReadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResponseCacheData) > 0 {
		for iNdEx := len(m.ResponseCacheData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseCacheData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCache(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemoteReadRequest != nil {
		{
			size, err := m.RemoteReadRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCache(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CmdMethod != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.CmdMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestID != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemoteReadResponse != nil {
		{
			size, err := m.RemoteReadResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCache(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCache(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CmdMethod != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.CmdMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestID != 0 {
		i = encodeVarintCache(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCache(dAtA []byte, offset int, v uint64) int {
	offset -= sovCache(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CacheKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCache(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovCache(uint64(m.Offset))
	}
	if m.Sz != 0 {
		n += 1 + sovCache(uint64(m.Sz))
	}
	return n
}

func (m *CacheKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovCache(uint64(l))
		}
	}
	return n
}

func (m *TargetCacheKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TargetKey) > 0 {
		for k, v := range m.TargetKey {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCache(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCache(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCache(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RequestCacheKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovCache(uint64(m.Index))
	}
	if m.CacheKey != nil {
		l = m.CacheKey.Size()
		n += 1 + l + sovCache(uint64(l))
	}
	return n
}

func (m *RemoteReadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestCacheKey) > 0 {
		for _, e := range m.RequestCacheKey {
			l = e.Size()
			n += 1 + l + sovCache(uint64(l))
		}
	}
	return n
}

func (m *ResponseCacheData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovCache(uint64(m.Index))
	}
	if m.Hit {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCache(uint64(l))
	}
	return n
}

func (m *RemoteReadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResponseCacheData) > 0 {
		for _, e := range m.ResponseCacheData {
			l = e.Size()
			n += 1 + l + sovCache(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovCache(uint64(m.RequestID))
	}
	if m.CmdMethod != 0 {
		n += 1 + sovCache(uint64(m.CmdMethod))
	}
	if m.RemoteReadRequest != nil {
		l = m.RemoteReadRequest.Size()
		n += 1 + l + sovCache(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovCache(uint64(m.RequestID))
	}
	if m.CmdMethod != 0 {
		n += 1 + sovCache(uint64(m.CmdMethod))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCache(uint64(l))
	}
	if m.RemoteReadResponse != nil {
		l = m.RemoteReadResponse.Size()
		n += 1 + l + sovCache(uint64(l))
	}
	return n
}

func sovCache(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCache(x uint64) (n int) {
	return sovCache(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CacheKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sz", wireType)
			}
			m.Sz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sz |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, CacheKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetCacheKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetCacheKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetCacheKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetKey == nil {
				m.TargetKey = make(map[string]*CacheKeys)
			}
			var mapkey string
			var mapvalue *CacheKeys
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCache
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCache
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCache
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCache
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCache
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCache
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCache
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CacheKeys{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCache(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCache
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TargetKey[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCacheKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCacheKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCacheKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CacheKey == nil {
				m.CacheKey = &CacheKey{}
			}
			if err := m.CacheKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCacheKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestCacheKey = append(m.RequestCacheKey, &RequestCacheKey{})
			if err := m.RequestCacheKey[len(m.RequestCacheKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseCacheData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseCacheData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseCacheData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hit = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCacheData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseCacheData = append(m.ResponseCacheData, &ResponseCacheData{})
			if err := m.ResponseCacheData[len(m.ResponseCacheData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdMethod", wireType)
			}
			m.CmdMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdMethod |= CmdMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReadRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteReadRequest == nil {
				m.RemoteReadRequest = &RemoteReadRequest{}
			}
			if err := m.RemoteReadRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdMethod", wireType)
			}
			m.CmdMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdMethod |= CmdMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = append(m.Error[:0], dAtA[iNdEx:postIndex]...)
			if m.Error == nil {
				m.Error = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteReadResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteReadResponse == nil {
				m.RemoteReadResponse = &RemoteReadResponse{}
			}
			if err := m.RemoteReadResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCache(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCache
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCache
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCache
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCache
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCache        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCache          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCache = fmt.Errorf("proto: unexpected end of group")
)
