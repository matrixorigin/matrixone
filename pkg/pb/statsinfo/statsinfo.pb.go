// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: statsinfo.proto

package statsinfo

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ShuffleHeap struct {
	Left    *ShuffleHeap `protobuf:"bytes,1,opt,name=Left,proto3" json:"Left,omitempty"`
	Right   *ShuffleHeap `protobuf:"bytes,2,opt,name=Right,proto3" json:"Right,omitempty"`
	Key     float64      `protobuf:"fixed64,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Value   float64      `protobuf:"fixed64,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Height  int32        `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`
	Sz      int32        `protobuf:"varint,6,opt,name=Sz,proto3" json:"Sz,omitempty"`
	Nulls   int32        `protobuf:"varint,7,opt,name=Nulls,proto3" json:"Nulls,omitempty"`
	Reverse bool         `protobuf:"varint,8,opt,name=Reverse,proto3" json:"Reverse,omitempty"`
}

func (m *ShuffleHeap) Reset()         { *m = ShuffleHeap{} }
func (m *ShuffleHeap) String() string { return proto.CompactTextString(m) }
func (*ShuffleHeap) ProtoMessage()    {}
func (*ShuffleHeap) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3f8e561c9795adb, []int{0}
}
func (m *ShuffleHeap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShuffleHeap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShuffleHeap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShuffleHeap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShuffleHeap.Merge(m, src)
}
func (m *ShuffleHeap) XXX_Size() int {
	return m.Size()
}
func (m *ShuffleHeap) XXX_DiscardUnknown() {
	xxx_messageInfo_ShuffleHeap.DiscardUnknown(m)
}

var xxx_messageInfo_ShuffleHeap proto.InternalMessageInfo

func (m *ShuffleHeap) GetLeft() *ShuffleHeap {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *ShuffleHeap) GetRight() *ShuffleHeap {
	if m != nil {
		return m.Right
	}
	return nil
}

func (m *ShuffleHeap) GetKey() float64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *ShuffleHeap) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *ShuffleHeap) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ShuffleHeap) GetSz() int32 {
	if m != nil {
		return m.Sz
	}
	return 0
}

func (m *ShuffleHeap) GetNulls() int32 {
	if m != nil {
		return m.Nulls
	}
	return 0
}

func (m *ShuffleHeap) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

type ShuffleRange struct {
	IsStrType bool         `protobuf:"varint,1,opt,name=IsStrType,proto3" json:"IsStrType,omitempty"`
	Sz        int32        `protobuf:"varint,2,opt,name=Sz,proto3" json:"Sz,omitempty"`
	Tree      *ShuffleHeap `protobuf:"bytes,3,opt,name=Tree,proto3" json:"Tree,omitempty"`
	Min       float64      `protobuf:"fixed64,4,opt,name=Min,proto3" json:"Min,omitempty"`
	Max       float64      `protobuf:"fixed64,5,opt,name=Max,proto3" json:"Max,omitempty"`
	Mins      [][]byte     `protobuf:"bytes,6,rep,name=Mins,proto3" json:"Mins,omitempty"`
	Maxs      [][]byte     `protobuf:"bytes,7,rep,name=Maxs,proto3" json:"Maxs,omitempty"`
	Rows      []int32      `protobuf:"varint,8,rep,packed,name=Rows,proto3" json:"Rows,omitempty"`
	Nulls     []int32      `protobuf:"varint,9,rep,packed,name=Nulls,proto3" json:"Nulls,omitempty"`
	MaxLen    int32        `protobuf:"varint,10,opt,name=MaxLen,proto3" json:"MaxLen,omitempty"`
	Flags     []bool       `protobuf:"varint,11,rep,packed,name=Flags,proto3" json:"Flags,omitempty"`
	Overlap   float64      `protobuf:"fixed64,12,opt,name=Overlap,proto3" json:"Overlap,omitempty"`
	Uniform   float64      `protobuf:"fixed64,13,opt,name=Uniform,proto3" json:"Uniform,omitempty"`
	Result    []float64    `protobuf:"fixed64,14,rep,packed,name=Result,proto3" json:"Result,omitempty"`
}

func (m *ShuffleRange) Reset()         { *m = ShuffleRange{} }
func (m *ShuffleRange) String() string { return proto.CompactTextString(m) }
func (*ShuffleRange) ProtoMessage()    {}
func (*ShuffleRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3f8e561c9795adb, []int{1}
}
func (m *ShuffleRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShuffleRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShuffleRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShuffleRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShuffleRange.Merge(m, src)
}
func (m *ShuffleRange) XXX_Size() int {
	return m.Size()
}
func (m *ShuffleRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ShuffleRange.DiscardUnknown(m)
}

var xxx_messageInfo_ShuffleRange proto.InternalMessageInfo

func (m *ShuffleRange) GetIsStrType() bool {
	if m != nil {
		return m.IsStrType
	}
	return false
}

func (m *ShuffleRange) GetSz() int32 {
	if m != nil {
		return m.Sz
	}
	return 0
}

func (m *ShuffleRange) GetTree() *ShuffleHeap {
	if m != nil {
		return m.Tree
	}
	return nil
}

func (m *ShuffleRange) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *ShuffleRange) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *ShuffleRange) GetMins() [][]byte {
	if m != nil {
		return m.Mins
	}
	return nil
}

func (m *ShuffleRange) GetMaxs() [][]byte {
	if m != nil {
		return m.Maxs
	}
	return nil
}

func (m *ShuffleRange) GetRows() []int32 {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *ShuffleRange) GetNulls() []int32 {
	if m != nil {
		return m.Nulls
	}
	return nil
}

func (m *ShuffleRange) GetMaxLen() int32 {
	if m != nil {
		return m.MaxLen
	}
	return 0
}

func (m *ShuffleRange) GetFlags() []bool {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *ShuffleRange) GetOverlap() float64 {
	if m != nil {
		return m.Overlap
	}
	return 0
}

func (m *ShuffleRange) GetUniform() float64 {
	if m != nil {
		return m.Uniform
	}
	return 0
}

func (m *ShuffleRange) GetResult() []float64 {
	if m != nil {
		return m.Result
	}
	return nil
}

type StatsInfo struct {
	NdvMap               map[string]float64       `protobuf:"bytes,1,rep,name=NdvMap,proto3" json:"NdvMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MinValMap            map[string]float64       `protobuf:"bytes,2,rep,name=MinValMap,proto3" json:"MinValMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MaxValMap            map[string]float64       `protobuf:"bytes,3,rep,name=MaxValMap,proto3" json:"MaxValMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	DataTypeMap          map[string]uint64        `protobuf:"bytes,4,rep,name=DataTypeMap,proto3" json:"DataTypeMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NullCntMap           map[string]uint64        `protobuf:"bytes,5,rep,name=NullCntMap,proto3" json:"NullCntMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SizeMap              map[string]uint64        `protobuf:"bytes,6,rep,name=SizeMap,proto3" json:"SizeMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ShuffleRangeMap      map[string]*ShuffleRange `protobuf:"bytes,7,rep,name=ShuffleRangeMap,proto3" json:"ShuffleRangeMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BlockNumber          int32                    `protobuf:"varint,8,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	AccurateObjectNumber int32                    `protobuf:"varint,9,opt,name=AccurateObjectNumber,proto3" json:"AccurateObjectNumber,omitempty"`
	ApproxObjectNumber   int32                    `protobuf:"varint,10,opt,name=ApproxObjectNumber,proto3" json:"ApproxObjectNumber,omitempty"`
	TableCnt             float64                  `protobuf:"fixed64,11,opt,name=TableCnt,proto3" json:"TableCnt,omitempty"`
	TableName            string                   `protobuf:"bytes,12,opt,name=TableName,proto3" json:"TableName,omitempty"`
}

func (m *StatsInfo) Reset()         { *m = StatsInfo{} }
func (m *StatsInfo) String() string { return proto.CompactTextString(m) }
func (*StatsInfo) ProtoMessage()    {}
func (*StatsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3f8e561c9795adb, []int{2}
}
func (m *StatsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsInfo.Merge(m, src)
}
func (m *StatsInfo) XXX_Size() int {
	return m.Size()
}
func (m *StatsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StatsInfo proto.InternalMessageInfo

func (m *StatsInfo) GetNdvMap() map[string]float64 {
	if m != nil {
		return m.NdvMap
	}
	return nil
}

func (m *StatsInfo) GetMinValMap() map[string]float64 {
	if m != nil {
		return m.MinValMap
	}
	return nil
}

func (m *StatsInfo) GetMaxValMap() map[string]float64 {
	if m != nil {
		return m.MaxValMap
	}
	return nil
}

func (m *StatsInfo) GetDataTypeMap() map[string]uint64 {
	if m != nil {
		return m.DataTypeMap
	}
	return nil
}

func (m *StatsInfo) GetNullCntMap() map[string]uint64 {
	if m != nil {
		return m.NullCntMap
	}
	return nil
}

func (m *StatsInfo) GetSizeMap() map[string]uint64 {
	if m != nil {
		return m.SizeMap
	}
	return nil
}

func (m *StatsInfo) GetShuffleRangeMap() map[string]*ShuffleRange {
	if m != nil {
		return m.ShuffleRangeMap
	}
	return nil
}

func (m *StatsInfo) GetBlockNumber() int32 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *StatsInfo) GetAccurateObjectNumber() int32 {
	if m != nil {
		return m.AccurateObjectNumber
	}
	return 0
}

func (m *StatsInfo) GetApproxObjectNumber() int32 {
	if m != nil {
		return m.ApproxObjectNumber
	}
	return 0
}

func (m *StatsInfo) GetTableCnt() float64 {
	if m != nil {
		return m.TableCnt
	}
	return 0
}

func (m *StatsInfo) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type StatsInfoKey struct {
	DatabaseID uint64 `protobuf:"varint,1,opt,name=DatabaseID,proto3" json:"DatabaseID,omitempty"`
	TableID    uint64 `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
}

func (m *StatsInfoKey) Reset()         { *m = StatsInfoKey{} }
func (m *StatsInfoKey) String() string { return proto.CompactTextString(m) }
func (*StatsInfoKey) ProtoMessage()    {}
func (*StatsInfoKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3f8e561c9795adb, []int{3}
}
func (m *StatsInfoKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsInfoKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsInfoKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsInfoKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsInfoKey.Merge(m, src)
}
func (m *StatsInfoKey) XXX_Size() int {
	return m.Size()
}
func (m *StatsInfoKey) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsInfoKey.DiscardUnknown(m)
}

var xxx_messageInfo_StatsInfoKey proto.InternalMessageInfo

func (m *StatsInfoKey) GetDatabaseID() uint64 {
	if m != nil {
		return m.DatabaseID
	}
	return 0
}

func (m *StatsInfoKey) GetTableID() uint64 {
	if m != nil {
		return m.TableID
	}
	return 0
}

type StatsInfoKeys struct {
	Keys []StatsInfoKey `protobuf:"bytes,1,rep,name=Keys,proto3" json:"Keys"`
}

func (m *StatsInfoKeys) Reset()         { *m = StatsInfoKeys{} }
func (m *StatsInfoKeys) String() string { return proto.CompactTextString(m) }
func (*StatsInfoKeys) ProtoMessage()    {}
func (*StatsInfoKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3f8e561c9795adb, []int{4}
}
func (m *StatsInfoKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsInfoKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsInfoKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsInfoKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsInfoKeys.Merge(m, src)
}
func (m *StatsInfoKeys) XXX_Size() int {
	return m.Size()
}
func (m *StatsInfoKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsInfoKeys.DiscardUnknown(m)
}

var xxx_messageInfo_StatsInfoKeys proto.InternalMessageInfo

func (m *StatsInfoKeys) GetKeys() []StatsInfoKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*ShuffleHeap)(nil), "statsinfo.ShuffleHeap")
	proto.RegisterType((*ShuffleRange)(nil), "statsinfo.ShuffleRange")
	proto.RegisterType((*StatsInfo)(nil), "statsinfo.StatsInfo")
	proto.RegisterMapType((map[string]uint64)(nil), "statsinfo.StatsInfo.DataTypeMapEntry")
	proto.RegisterMapType((map[string]float64)(nil), "statsinfo.StatsInfo.MaxValMapEntry")
	proto.RegisterMapType((map[string]float64)(nil), "statsinfo.StatsInfo.MinValMapEntry")
	proto.RegisterMapType((map[string]float64)(nil), "statsinfo.StatsInfo.NdvMapEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "statsinfo.StatsInfo.NullCntMapEntry")
	proto.RegisterMapType((map[string]*ShuffleRange)(nil), "statsinfo.StatsInfo.ShuffleRangeMapEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "statsinfo.StatsInfo.SizeMapEntry")
	proto.RegisterType((*StatsInfoKey)(nil), "statsinfo.StatsInfoKey")
	proto.RegisterType((*StatsInfoKeys)(nil), "statsinfo.StatsInfoKeys")
}

func init() { proto.RegisterFile("statsinfo.proto", fileDescriptor_a3f8e561c9795adb) }

var fileDescriptor_a3f8e561c9795adb = []byte{
	// 843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x18, 0xad, 0x63, 0x27, 0x8d, 0x3f, 0x67, 0xdb, 0xd5, 0xa8, 0xea, 0x8e, 0x2a, 0x14, 0x4c, 0x00,
	0xc9, 0xac, 0xd8, 0x44, 0x84, 0xcb, 0xb2, 0xfc, 0x90, 0xda, 0x2d, 0xd0, 0x6a, 0x9b, 0xae, 0x34,
	0x29, 0x7b, 0x80, 0xd3, 0x38, 0x4c, 0x5c, 0x53, 0xc7, 0xb6, 0xfc, 0xa3, 0x38, 0xfd, 0x2b, 0xf8,
	0xb3, 0xf6, 0xb8, 0xc7, 0x3d, 0x21, 0xd4, 0x1e, 0xf8, 0x23, 0xb8, 0xa0, 0xf9, 0xc6, 0x4e, 0xdc,
	0x62, 0x15, 0xf5, 0x94, 0x79, 0xdf, 0xbc, 0xf7, 0x66, 0xe6, 0xcb, 0x9b, 0x31, 0x6c, 0xa7, 0x19,
	0xcf, 0x52, 0x3f, 0x9c, 0x47, 0xc3, 0x38, 0x89, 0xb2, 0x88, 0x98, 0xab, 0xc2, 0xde, 0x33, 0xcf,
	0xcf, 0xce, 0x73, 0x77, 0x38, 0x8b, 0x16, 0x23, 0x2f, 0xf2, 0xa2, 0x11, 0x32, 0xdc, 0x7c, 0x8e,
	0x08, 0x01, 0x8e, 0x94, 0x72, 0xf0, 0xb7, 0x06, 0xd6, 0xf4, 0x3c, 0x9f, 0xcf, 0x03, 0x71, 0x24,
	0x78, 0x4c, 0x9e, 0x82, 0x71, 0x22, 0xe6, 0x19, 0xd5, 0x6c, 0xcd, 0xb1, 0xc6, 0xbb, 0xc3, 0xf5,
	0x4a, 0x35, 0x16, 0x43, 0x0e, 0xf9, 0x1c, 0xda, 0xcc, 0xf7, 0xce, 0x33, 0xda, 0xba, 0x97, 0xac,
	0x48, 0xe4, 0x31, 0xe8, 0xaf, 0xc4, 0x92, 0xea, 0xb6, 0xe6, 0x68, 0x4c, 0x0e, 0xc9, 0x0e, 0xb4,
	0xdf, 0xf0, 0x20, 0x17, 0xd4, 0xc0, 0x9a, 0x02, 0x64, 0x17, 0x3a, 0x47, 0x02, 0x6d, 0xdb, 0xb6,
	0xe6, 0xb4, 0x59, 0x89, 0xc8, 0x16, 0xb4, 0xa6, 0x57, 0xb4, 0x83, 0xb5, 0xd6, 0xf4, 0x4a, 0xaa,
	0x4f, 0xf3, 0x20, 0x48, 0xe9, 0x26, 0x96, 0x14, 0x20, 0x14, 0x36, 0x99, 0xb8, 0x14, 0x49, 0x2a,
	0x68, 0xd7, 0xd6, 0x9c, 0x2e, 0xab, 0xe0, 0xe0, 0x7d, 0x0b, 0x7a, 0xe5, 0xb6, 0x18, 0x0f, 0x3d,
	0x41, 0x3e, 0x00, 0xf3, 0x38, 0x9d, 0x66, 0xc9, 0xd9, 0x32, 0x16, 0x78, 0xde, 0x2e, 0x5b, 0x17,
	0xca, 0xe5, 0x5a, 0xab, 0xe5, 0x9e, 0x82, 0x71, 0x96, 0x08, 0x81, 0xfb, 0xbf, 0xa7, 0x31, 0x92,
	0x23, 0x8f, 0x3a, 0xf1, 0xc3, 0xf2, 0x58, 0x72, 0x88, 0x15, 0x5e, 0xe0, 0x89, 0x64, 0x85, 0x17,
	0x84, 0x80, 0x31, 0xf1, 0xc3, 0x94, 0x76, 0x6c, 0xdd, 0xe9, 0x31, 0x1c, 0x63, 0x8d, 0x17, 0xf2,
	0x44, 0xaa, 0xc6, 0x0b, 0xac, 0xb1, 0xe8, 0xf7, 0x94, 0x76, 0x6d, 0xdd, 0x69, 0x33, 0x1c, 0xaf,
	0x8f, 0x6e, 0x62, 0xb1, 0x3c, 0xfa, 0x2e, 0x74, 0x26, 0xbc, 0x38, 0x11, 0x21, 0x05, 0xd5, 0x38,
	0x85, 0x24, 0xfb, 0x87, 0x80, 0x7b, 0x29, 0xb5, 0x6c, 0xdd, 0xe9, 0x32, 0x05, 0x64, 0xa3, 0x5e,
	0x5f, 0x8a, 0x24, 0xe0, 0x31, 0xed, 0xe1, 0xae, 0x2a, 0x28, 0x67, 0x7e, 0x0a, 0xfd, 0x79, 0x94,
	0x2c, 0xe8, 0x23, 0x35, 0x53, 0x42, 0xb9, 0x02, 0x13, 0x69, 0x1e, 0x64, 0x74, 0xcb, 0xd6, 0x1d,
	0x8d, 0x95, 0x68, 0xf0, 0x4f, 0x17, 0xcc, 0xa9, 0xec, 0xc7, 0x71, 0x38, 0x8f, 0xc8, 0x73, 0xe8,
	0x9c, 0xfe, 0x7a, 0x39, 0xe1, 0x31, 0xd5, 0x6c, 0xdd, 0xb1, 0xc6, 0x76, 0xbd, 0x57, 0x15, 0x6b,
	0xa8, 0x28, 0xdf, 0x87, 0x59, 0xb2, 0x64, 0x25, 0x9f, 0xec, 0x83, 0x39, 0xf1, 0xc3, 0x37, 0x3c,
	0x90, 0xe2, 0x16, 0x8a, 0x3f, 0x6e, 0x14, 0xaf, 0x58, 0x4a, 0xbf, 0x56, 0xa1, 0x05, 0x2f, 0x4a,
	0x0b, 0xfd, 0x3e, 0x8b, 0x8a, 0x55, 0x59, 0x54, 0x98, 0xfc, 0x08, 0xd6, 0x21, 0xcf, 0xb8, 0x4c,
	0x81, 0x34, 0x31, 0xd0, 0xe4, 0xd3, 0x46, 0x93, 0x1a, 0x4f, 0xd9, 0xd4, 0x95, 0xe4, 0x10, 0x40,
	0xfe, 0x33, 0x2f, 0xc3, 0x4c, 0xfa, 0xb4, 0xd1, 0xe7, 0x93, 0xe6, 0x66, 0xac, 0x68, 0xca, 0xa6,
	0xa6, 0x23, 0x5f, 0xc3, 0xe6, 0xd4, 0xbf, 0xc2, 0xad, 0x74, 0xd0, 0xe2, 0xa3, 0x46, 0x8b, 0x92,
	0xa3, 0xf4, 0x95, 0x82, 0x4c, 0x61, 0xbb, 0x9e, 0x79, 0x69, 0xb2, 0x89, 0x26, 0x9f, 0x35, 0x9b,
	0xdc, 0xe6, 0x2a, 0xb3, 0xbb, 0x0e, 0xc4, 0x06, 0xeb, 0x20, 0x88, 0x66, 0x17, 0xa7, 0xf9, 0xc2,
	0x15, 0x09, 0xde, 0xb3, 0x36, 0xab, 0x97, 0xc8, 0x18, 0x76, 0xf6, 0x67, 0xb3, 0x3c, 0xe1, 0x99,
	0x78, 0xed, 0xfe, 0x26, 0x66, 0x59, 0x49, 0x35, 0x91, 0xda, 0x38, 0x47, 0x86, 0x40, 0xf6, 0xe3,
	0x38, 0x89, 0x8a, 0x5b, 0x0a, 0x15, 0xe5, 0x86, 0x19, 0xb2, 0x07, 0xdd, 0x33, 0xee, 0x06, 0xe2,
	0x65, 0x98, 0x51, 0x0b, 0x73, 0xba, 0xc2, 0xf2, 0x6a, 0xe3, 0xf8, 0x94, 0x2f, 0x04, 0xc6, 0xdb,
	0x64, 0xeb, 0xc2, 0xde, 0x57, 0x60, 0xd5, 0xd2, 0x27, 0xef, 0xe6, 0x85, 0x58, 0xe2, 0x0b, 0x60,
	0x32, 0x39, 0x94, 0x37, 0xe6, 0x12, 0x1f, 0xa6, 0x96, 0x7a, 0x98, 0x10, 0xbc, 0x68, 0x3d, 0xd7,
	0xf6, 0xbe, 0x81, 0xad, 0xdb, 0xd9, 0x7b, 0xb0, 0xfa, 0x56, 0xec, 0x1e, 0xa4, 0xfe, 0x0e, 0x1e,
	0xdf, 0xcd, 0xdb, 0xff, 0xe9, 0x8d, 0xba, 0xfe, 0x5b, 0xd8, 0xbe, 0x93, 0xb3, 0x07, 0xc9, 0x5f,
	0x40, 0xaf, 0x9e, 0xb1, 0x07, 0x69, 0x7f, 0x81, 0x9d, 0xa6, 0x68, 0x35, 0x78, 0x3c, 0xab, 0x7b,
	0x58, 0xe3, 0x27, 0xff, 0x7d, 0x67, 0xd1, 0xa1, 0x66, 0x3e, 0x38, 0x82, 0xde, 0x2a, 0xc1, 0xf2,
	0xb3, 0xd2, 0x07, 0x90, 0x7d, 0x72, 0x79, 0x2a, 0x8e, 0x0f, 0xd1, 0xdb, 0x60, 0xb5, 0x8a, 0x7c,
	0xdf, 0x30, 0x0b, 0xc7, 0x87, 0xe5, 0x46, 0x2b, 0x38, 0x38, 0x80, 0x47, 0x75, 0xa7, 0x94, 0x7c,
	0x01, 0x86, 0xfc, 0x2d, 0x1f, 0xb2, 0x27, 0x4d, 0x77, 0xe6, 0x95, 0x58, 0x1e, 0x18, 0x6f, 0xff,
	0xfc, 0x70, 0x83, 0x21, 0xf5, 0xe0, 0xe4, 0xed, 0x75, 0x5f, 0x7b, 0x77, 0xdd, 0xd7, 0xfe, 0xba,
	0xee, 0x6b, 0x7f, 0xdc, 0xf4, 0x37, 0xde, 0xdd, 0xf4, 0x37, 0xde, 0xdf, 0xf4, 0x37, 0x7e, 0x1e,
	0xd7, 0xbe, 0xcc, 0x0b, 0x9e, 0x25, 0x7e, 0x11, 0x25, 0xbe, 0xe7, 0x87, 0x15, 0x08, 0xc5, 0x28,
	0xbe, 0xf0, 0x46, 0xb1, 0x3b, 0x5a, 0x2d, 0xe3, 0x76, 0xf0, 0x2b, 0xfd, 0xe5, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x61, 0x01, 0x8f, 0xd2, 0xf2, 0x07, 0x00, 0x00,
}

func (m *ShuffleHeap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShuffleHeap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShuffleHeap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reverse {
		i--
		if m.Reverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Nulls != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.Nulls))
		i--
		dAtA[i] = 0x38
	}
	if m.Sz != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.Sz))
		i--
		dAtA[i] = 0x30
	}
	if m.Height != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x21
	}
	if m.Key != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Key))))
		i--
		dAtA[i] = 0x19
	}
	if m.Right != nil {
		{
			size, err := m.Right.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatsinfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Left != nil {
		{
			size, err := m.Left.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatsinfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShuffleRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShuffleRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShuffleRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			f3 := math.Float64bits(float64(m.Result[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f3))
		}
		i = encodeVarintStatsinfo(dAtA, i, uint64(len(m.Result)*8))
		i--
		dAtA[i] = 0x72
	}
	if m.Uniform != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Uniform))))
		i--
		dAtA[i] = 0x69
	}
	if m.Overlap != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Overlap))))
		i--
		dAtA[i] = 0x61
	}
	if len(m.Flags) > 0 {
		for iNdEx := len(m.Flags) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Flags[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintStatsinfo(dAtA, i, uint64(len(m.Flags)))
		i--
		dAtA[i] = 0x5a
	}
	if m.MaxLen != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.MaxLen))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Nulls) > 0 {
		dAtA5 := make([]byte, len(m.Nulls)*10)
		var j4 int
		for _, num1 := range m.Nulls {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintStatsinfo(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Rows) > 0 {
		dAtA7 := make([]byte, len(m.Rows)*10)
		var j6 int
		for _, num1 := range m.Rows {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintStatsinfo(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Maxs) > 0 {
		for iNdEx := len(m.Maxs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Maxs[iNdEx])
			copy(dAtA[i:], m.Maxs[iNdEx])
			i = encodeVarintStatsinfo(dAtA, i, uint64(len(m.Maxs[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Mins) > 0 {
		for iNdEx := len(m.Mins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mins[iNdEx])
			copy(dAtA[i:], m.Mins[iNdEx])
			i = encodeVarintStatsinfo(dAtA, i, uint64(len(m.Mins[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Max != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i--
		dAtA[i] = 0x29
	}
	if m.Min != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i--
		dAtA[i] = 0x21
	}
	if m.Tree != nil {
		{
			size, err := m.Tree.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatsinfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Sz != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.Sz))
		i--
		dAtA[i] = 0x10
	}
	if m.IsStrType {
		i--
		if m.IsStrType {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintStatsinfo(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x62
	}
	if m.TableCnt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TableCnt))))
		i--
		dAtA[i] = 0x59
	}
	if m.ApproxObjectNumber != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.ApproxObjectNumber))
		i--
		dAtA[i] = 0x50
	}
	if m.AccurateObjectNumber != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.AccurateObjectNumber))
		i--
		dAtA[i] = 0x48
	}
	if m.BlockNumber != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ShuffleRangeMap) > 0 {
		for k := range m.ShuffleRangeMap {
			v := m.ShuffleRangeMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintStatsinfo(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatsinfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatsinfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SizeMap) > 0 {
		for k := range m.SizeMap {
			v := m.SizeMap[k]
			baseI := i
			i = encodeVarintStatsinfo(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatsinfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatsinfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NullCntMap) > 0 {
		for k := range m.NullCntMap {
			v := m.NullCntMap[k]
			baseI := i
			i = encodeVarintStatsinfo(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatsinfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatsinfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DataTypeMap) > 0 {
		for k := range m.DataTypeMap {
			v := m.DataTypeMap[k]
			baseI := i
			i = encodeVarintStatsinfo(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatsinfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatsinfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MaxValMap) > 0 {
		for k := range m.MaxValMap {
			v := m.MaxValMap[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatsinfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatsinfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MinValMap) > 0 {
		for k := range m.MinValMap {
			v := m.MinValMap[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatsinfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatsinfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NdvMap) > 0 {
		for k := range m.NdvMap {
			v := m.NdvMap[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatsinfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatsinfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatsInfoKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsInfoKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsInfoKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x10
	}
	if m.DatabaseID != 0 {
		i = encodeVarintStatsinfo(dAtA, i, uint64(m.DatabaseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatsInfoKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsInfoKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsInfoKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStatsinfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStatsinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatsinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShuffleHeap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Left != nil {
		l = m.Left.Size()
		n += 1 + l + sovStatsinfo(uint64(l))
	}
	if m.Right != nil {
		l = m.Right.Size()
		n += 1 + l + sovStatsinfo(uint64(l))
	}
	if m.Key != 0 {
		n += 9
	}
	if m.Value != 0 {
		n += 9
	}
	if m.Height != 0 {
		n += 1 + sovStatsinfo(uint64(m.Height))
	}
	if m.Sz != 0 {
		n += 1 + sovStatsinfo(uint64(m.Sz))
	}
	if m.Nulls != 0 {
		n += 1 + sovStatsinfo(uint64(m.Nulls))
	}
	if m.Reverse {
		n += 2
	}
	return n
}

func (m *ShuffleRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsStrType {
		n += 2
	}
	if m.Sz != 0 {
		n += 1 + sovStatsinfo(uint64(m.Sz))
	}
	if m.Tree != nil {
		l = m.Tree.Size()
		n += 1 + l + sovStatsinfo(uint64(l))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if len(m.Mins) > 0 {
		for _, b := range m.Mins {
			l = len(b)
			n += 1 + l + sovStatsinfo(uint64(l))
		}
	}
	if len(m.Maxs) > 0 {
		for _, b := range m.Maxs {
			l = len(b)
			n += 1 + l + sovStatsinfo(uint64(l))
		}
	}
	if len(m.Rows) > 0 {
		l = 0
		for _, e := range m.Rows {
			l += sovStatsinfo(uint64(e))
		}
		n += 1 + sovStatsinfo(uint64(l)) + l
	}
	if len(m.Nulls) > 0 {
		l = 0
		for _, e := range m.Nulls {
			l += sovStatsinfo(uint64(e))
		}
		n += 1 + sovStatsinfo(uint64(l)) + l
	}
	if m.MaxLen != 0 {
		n += 1 + sovStatsinfo(uint64(m.MaxLen))
	}
	if len(m.Flags) > 0 {
		n += 1 + sovStatsinfo(uint64(len(m.Flags))) + len(m.Flags)*1
	}
	if m.Overlap != 0 {
		n += 9
	}
	if m.Uniform != 0 {
		n += 9
	}
	if len(m.Result) > 0 {
		n += 1 + sovStatsinfo(uint64(len(m.Result)*8)) + len(m.Result)*8
	}
	return n
}

func (m *StatsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NdvMap) > 0 {
		for k, v := range m.NdvMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatsinfo(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovStatsinfo(uint64(mapEntrySize))
		}
	}
	if len(m.MinValMap) > 0 {
		for k, v := range m.MinValMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatsinfo(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovStatsinfo(uint64(mapEntrySize))
		}
	}
	if len(m.MaxValMap) > 0 {
		for k, v := range m.MaxValMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatsinfo(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovStatsinfo(uint64(mapEntrySize))
		}
	}
	if len(m.DataTypeMap) > 0 {
		for k, v := range m.DataTypeMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatsinfo(uint64(len(k))) + 1 + sovStatsinfo(uint64(v))
			n += mapEntrySize + 1 + sovStatsinfo(uint64(mapEntrySize))
		}
	}
	if len(m.NullCntMap) > 0 {
		for k, v := range m.NullCntMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatsinfo(uint64(len(k))) + 1 + sovStatsinfo(uint64(v))
			n += mapEntrySize + 1 + sovStatsinfo(uint64(mapEntrySize))
		}
	}
	if len(m.SizeMap) > 0 {
		for k, v := range m.SizeMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatsinfo(uint64(len(k))) + 1 + sovStatsinfo(uint64(v))
			n += mapEntrySize + 1 + sovStatsinfo(uint64(mapEntrySize))
		}
	}
	if len(m.ShuffleRangeMap) > 0 {
		for k, v := range m.ShuffleRangeMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovStatsinfo(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovStatsinfo(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovStatsinfo(uint64(mapEntrySize))
		}
	}
	if m.BlockNumber != 0 {
		n += 1 + sovStatsinfo(uint64(m.BlockNumber))
	}
	if m.AccurateObjectNumber != 0 {
		n += 1 + sovStatsinfo(uint64(m.AccurateObjectNumber))
	}
	if m.ApproxObjectNumber != 0 {
		n += 1 + sovStatsinfo(uint64(m.ApproxObjectNumber))
	}
	if m.TableCnt != 0 {
		n += 9
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovStatsinfo(uint64(l))
	}
	return n
}

func (m *StatsInfoKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DatabaseID != 0 {
		n += 1 + sovStatsinfo(uint64(m.DatabaseID))
	}
	if m.TableID != 0 {
		n += 1 + sovStatsinfo(uint64(m.TableID))
	}
	return n
}

func (m *StatsInfoKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovStatsinfo(uint64(l))
		}
	}
	return n
}

func sovStatsinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatsinfo(x uint64) (n int) {
	return sovStatsinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShuffleHeap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatsinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShuffleHeap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShuffleHeap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Left == nil {
				m.Left = &ShuffleHeap{}
			}
			if err := m.Left.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Right == nil {
				m.Right = &ShuffleHeap{}
			}
			if err := m.Right.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Key = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sz", wireType)
			}
			m.Sz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sz |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nulls", wireType)
			}
			m.Nulls = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nulls |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reverse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reverse = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStatsinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShuffleRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatsinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShuffleRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShuffleRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStrType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStrType = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sz", wireType)
			}
			m.Sz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sz |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tree == nil {
				m.Tree = &ShuffleHeap{}
			}
			if err := m.Tree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mins", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mins = append(m.Mins, make([]byte, postIndex-iNdEx))
			copy(m.Mins[len(m.Mins)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maxs = append(m.Maxs, make([]byte, postIndex-iNdEx))
			copy(m.Maxs[len(m.Maxs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rows = append(m.Rows, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatsinfo
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStatsinfo
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rows) == 0 {
					m.Rows = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rows = append(m.Rows, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nulls = append(m.Nulls, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatsinfo
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStatsinfo
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Nulls) == 0 {
					m.Nulls = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nulls = append(m.Nulls, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nulls", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLen", wireType)
			}
			m.MaxLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Flags = append(m.Flags, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatsinfo
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStatsinfo
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Flags) == 0 {
					m.Flags = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Flags = append(m.Flags, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overlap", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Overlap = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uniform", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Uniform = float64(math.Float64frombits(v))
		case 14:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Result = append(m.Result, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatsinfo
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStatsinfo
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Result) == 0 {
					m.Result = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Result = append(m.Result, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatsinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatsinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NdvMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NdvMap == nil {
				m.NdvMap = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatsinfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NdvMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinValMap == nil {
				m.MinValMap = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatsinfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MinValMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxValMap == nil {
				m.MaxValMap = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatsinfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MaxValMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataTypeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataTypeMap == nil {
				m.DataTypeMap = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatsinfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DataTypeMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullCntMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NullCntMap == nil {
				m.NullCntMap = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatsinfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NullCntMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SizeMap == nil {
				m.SizeMap = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatsinfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SizeMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShuffleRangeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShuffleRangeMap == nil {
				m.ShuffleRangeMap = make(map[string]*ShuffleRange)
			}
			var mapkey string
			var mapvalue *ShuffleRange
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatsinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatsinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthStatsinfo
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ShuffleRange{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatsinfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStatsinfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ShuffleRangeMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccurateObjectNumber", wireType)
			}
			m.AccurateObjectNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccurateObjectNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproxObjectNumber", wireType)
			}
			m.ApproxObjectNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApproxObjectNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableCnt", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TableCnt = float64(math.Float64frombits(v))
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatsinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsInfoKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatsinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsInfoKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsInfoKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseID", wireType)
			}
			m.DatabaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DatabaseID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatsinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsInfoKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatsinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsInfoKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsInfoKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, StatsInfoKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatsinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatsinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatsinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatsinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatsinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatsinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatsinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatsinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatsinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatsinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatsinfo = fmt.Errorf("proto: unexpected end of group")
)
