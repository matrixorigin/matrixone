// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ctl.proto

package ctl

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	timestamp "github.com/matrixorigin/matrixone/pkg/pb/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CmdMethod debug command method
type CmdMethod int32

const (
	// Ping ping the service.
	CmdMethod_Ping CmdMethod = 0
	// Flush is to force flush the table data.
	// parameter should be "DbName.TableName"
	CmdMethod_Flush CmdMethod = 1
	// Task disable or enable task framework
	CmdMethod_Task CmdMethod = 2
	// Checkpoint is to force incremental checkpoint.
	CmdMethod_Checkpoint CmdMethod = 3
	// UseSnapshot use a spec snapshot timestamp, and all txn will use this ts as snapshot timestamp
	CmdMethod_UseSnapshot CmdMethod = 4
	// GetSnapshot get current snapshot timestamp
	CmdMethod_GetSnapshot CmdMethod = 5
	// ForceGC forcing a GC to free memory
	CmdMethod_ForceGC CmdMethod = 6
	// Inspect DN info
	CmdMethod_Inspect CmdMethod = 7
	// Label sets the CN label.
	CmdMethod_Label CmdMethod = 8
	// SyncCommit when we turn on Push, some BVT tests use multiple Sessions in multi-CN scenarios. To
	// ensure data visibility, we need to synchronize CommitTS between multiple CNs so that the whole
	// cluster can see the latest writes from other CNs.
	CmdMethod_SyncCommit CmdMethod = 9
	// GetCommit get latest commit timestamp of cn.
	CmdMethod_GetCommit CmdMethod = 10
	// AddFaultPoint add a fault point
	CmdMethod_AddFaultPoint CmdMethod = 11
)

var CmdMethod_name = map[int32]string{
	0:  "Ping",
	1:  "Flush",
	2:  "Task",
	3:  "Checkpoint",
	4:  "UseSnapshot",
	5:  "GetSnapshot",
	6:  "ForceGC",
	7:  "Inspect",
	8:  "Label",
	9:  "SyncCommit",
	10: "GetCommit",
	11: "AddFaultPoint",
}

var CmdMethod_value = map[string]int32{
	"Ping":          0,
	"Flush":         1,
	"Task":          2,
	"Checkpoint":    3,
	"UseSnapshot":   4,
	"GetSnapshot":   5,
	"ForceGC":       6,
	"Inspect":       7,
	"Label":         8,
	"SyncCommit":    9,
	"GetCommit":     10,
	"AddFaultPoint": 11,
}

func (x CmdMethod) String() string {
	return proto.EnumName(CmdMethod_name, int32(x))
}

func (CmdMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{0}
}

// DNPingRequest ping request
type DNPingRequest struct {
	Parameter            string   `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNPingRequest) Reset()         { *m = DNPingRequest{} }
func (m *DNPingRequest) String() string { return proto.CompactTextString(m) }
func (*DNPingRequest) ProtoMessage()    {}
func (*DNPingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{0}
}
func (m *DNPingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNPingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNPingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNPingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNPingRequest.Merge(m, src)
}
func (m *DNPingRequest) XXX_Size() int {
	return m.Size()
}
func (m *DNPingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DNPingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DNPingRequest proto.InternalMessageInfo

func (m *DNPingRequest) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

// DNPingResponse ping response
type DNPingResponse struct {
	StoreID              string   `protobuf:"bytes,1,opt,name=storeID,proto3" json:"storeID,omitempty"`
	ServiceAddress       string   `protobuf:"bytes,2,opt,name=serviceAddress,proto3" json:"serviceAddress,omitempty"`
	ShardID              uint64   `protobuf:"varint,3,opt,name=shardID,proto3" json:"shardID,omitempty"`
	ReplicaID            uint64   `protobuf:"varint,4,opt,name=replicaID,proto3" json:"replicaID,omitempty"`
	LogShardID           uint64   `protobuf:"varint,5,opt,name=logShardID,proto3" json:"logShardID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNPingResponse) Reset()         { *m = DNPingResponse{} }
func (m *DNPingResponse) String() string { return proto.CompactTextString(m) }
func (*DNPingResponse) ProtoMessage()    {}
func (*DNPingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{1}
}
func (m *DNPingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNPingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNPingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNPingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNPingResponse.Merge(m, src)
}
func (m *DNPingResponse) XXX_Size() int {
	return m.Size()
}
func (m *DNPingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DNPingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DNPingResponse proto.InternalMessageInfo

func (m *DNPingResponse) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

func (m *DNPingResponse) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *DNPingResponse) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *DNPingResponse) GetReplicaID() uint64 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

func (m *DNPingResponse) GetLogShardID() uint64 {
	if m != nil {
		return m.LogShardID
	}
	return 0
}

// DNStringResponse string type response
type DNStringResponse struct {
	ReturnStr            string   `protobuf:"bytes,1,opt,name=returnStr,proto3" json:"returnStr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNStringResponse) Reset()         { *m = DNStringResponse{} }
func (m *DNStringResponse) String() string { return proto.CompactTextString(m) }
func (*DNStringResponse) ProtoMessage()    {}
func (*DNStringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{2}
}
func (m *DNStringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNStringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNStringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNStringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNStringResponse.Merge(m, src)
}
func (m *DNStringResponse) XXX_Size() int {
	return m.Size()
}
func (m *DNStringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DNStringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DNStringResponse proto.InternalMessageInfo

func (m *DNStringResponse) GetReturnStr() string {
	if m != nil {
		return m.ReturnStr
	}
	return ""
}

// Request is used to send a request for a ctl service related operation to another
// ctl service.
type Request struct {
	// RequestID request id
	RequestID            uint64            `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	CMDMethod            CmdMethod         `protobuf:"varint,2,opt,name=CMDMethod,proto3,enum=ctl.CmdMethod" json:"CMDMethod,omitempty"`
	SycnCommit           SyncCommitRequest `protobuf:"bytes,3,opt,name=SycnCommit,proto3" json:"SycnCommit"`
	GetCommit            SyncCommitRequest `protobuf:"bytes,4,opt,name=GetCommit,proto3" json:"GetCommit"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{3}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *Request) GetCMDMethod() CmdMethod {
	if m != nil {
		return m.CMDMethod
	}
	return CmdMethod_Ping
}

func (m *Request) GetSycnCommit() SyncCommitRequest {
	if m != nil {
		return m.SycnCommit
	}
	return SyncCommitRequest{}
}

func (m *Request) GetGetCommit() SyncCommitRequest {
	if m != nil {
		return m.GetCommit
	}
	return SyncCommitRequest{}
}

// Response ctl response
type Response struct {
	// RequestID corresponding request id
	RequestID uint64    `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	CMDMethod CmdMethod `protobuf:"varint,2,opt,name=CMDMethod,proto3,enum=ctl.CmdMethod" json:"CMDMethod,omitempty"`
	// Error we use this field to send moerr from service to another service. Set
	// with moerr.MarshalBinary, and use moerr.UnmarshalBinary to restore moerr.
	Error                []byte             `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	SycnCommit           SyncCommitResponse `protobuf:"bytes,4,opt,name=SycnCommit,proto3" json:"SycnCommit"`
	GetCommit            GetCommitResponse  `protobuf:"bytes,5,opt,name=GetCommit,proto3" json:"GetCommit"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{4}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *Response) GetCMDMethod() CmdMethod {
	if m != nil {
		return m.CMDMethod
	}
	return CmdMethod_Ping
}

func (m *Response) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetSycnCommit() SyncCommitResponse {
	if m != nil {
		return m.SycnCommit
	}
	return SyncCommitResponse{}
}

func (m *Response) GetGetCommit() GetCommitResponse {
	if m != nil {
		return m.GetCommit
	}
	return GetCommitResponse{}
}

// SyncCommitRequest sync commit timestamp request
type SyncCommitRequest struct {
	// LatestCommitTS update latest commit ts.
	LatestCommitTS       timestamp.Timestamp `protobuf:"bytes,1,opt,name=LatestCommitTS,proto3" json:"LatestCommitTS"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SyncCommitRequest) Reset()         { *m = SyncCommitRequest{} }
func (m *SyncCommitRequest) String() string { return proto.CompactTextString(m) }
func (*SyncCommitRequest) ProtoMessage()    {}
func (*SyncCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{5}
}
func (m *SyncCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommitRequest.Merge(m, src)
}
func (m *SyncCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommitRequest proto.InternalMessageInfo

func (m *SyncCommitRequest) GetLatestCommitTS() timestamp.Timestamp {
	if m != nil {
		return m.LatestCommitTS
	}
	return timestamp.Timestamp{}
}

// SyncCommitResponse sync commit timestamp response
type SyncCommitResponse struct {
	// CurrentCommitTS current commit timestamp after sync
	CurrentCommitTS      timestamp.Timestamp `protobuf:"bytes,1,opt,name=CurrentCommitTS,proto3" json:"CurrentCommitTS"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SyncCommitResponse) Reset()         { *m = SyncCommitResponse{} }
func (m *SyncCommitResponse) String() string { return proto.CompactTextString(m) }
func (*SyncCommitResponse) ProtoMessage()    {}
func (*SyncCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{6}
}
func (m *SyncCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommitResponse.Merge(m, src)
}
func (m *SyncCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommitResponse proto.InternalMessageInfo

func (m *SyncCommitResponse) GetCurrentCommitTS() timestamp.Timestamp {
	if m != nil {
		return m.CurrentCommitTS
	}
	return timestamp.Timestamp{}
}

// GetCommitRequest get commit timestamp request
type GetCommitRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCommitRequest) Reset()         { *m = GetCommitRequest{} }
func (m *GetCommitRequest) String() string { return proto.CompactTextString(m) }
func (*GetCommitRequest) ProtoMessage()    {}
func (*GetCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{7}
}
func (m *GetCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommitRequest.Merge(m, src)
}
func (m *GetCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommitRequest proto.InternalMessageInfo

// GetCommitResponse get commit timestamp response
type GetCommitResponse struct {
	// CurrentCommitTS current commit timestamp after sync
	CurrentCommitTS      timestamp.Timestamp `protobuf:"bytes,1,opt,name=CurrentCommitTS,proto3" json:"CurrentCommitTS"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetCommitResponse) Reset()         { *m = GetCommitResponse{} }
func (m *GetCommitResponse) String() string { return proto.CompactTextString(m) }
func (*GetCommitResponse) ProtoMessage()    {}
func (*GetCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{8}
}
func (m *GetCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommitResponse.Merge(m, src)
}
func (m *GetCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommitResponse proto.InternalMessageInfo

func (m *GetCommitResponse) GetCurrentCommitTS() timestamp.Timestamp {
	if m != nil {
		return m.CurrentCommitTS
	}
	return timestamp.Timestamp{}
}

func init() {
	proto.RegisterEnum("ctl.CmdMethod", CmdMethod_name, CmdMethod_value)
	proto.RegisterType((*DNPingRequest)(nil), "ctl.DNPingRequest")
	proto.RegisterType((*DNPingResponse)(nil), "ctl.DNPingResponse")
	proto.RegisterType((*DNStringResponse)(nil), "ctl.DNStringResponse")
	proto.RegisterType((*Request)(nil), "ctl.Request")
	proto.RegisterType((*Response)(nil), "ctl.Response")
	proto.RegisterType((*SyncCommitRequest)(nil), "ctl.SyncCommitRequest")
	proto.RegisterType((*SyncCommitResponse)(nil), "ctl.SyncCommitResponse")
	proto.RegisterType((*GetCommitRequest)(nil), "ctl.GetCommitRequest")
	proto.RegisterType((*GetCommitResponse)(nil), "ctl.GetCommitResponse")
}

func init() { proto.RegisterFile("ctl.proto", fileDescriptor_0646114e50303026) }

var fileDescriptor_0646114e50303026 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x4f, 0xd4, 0x4e,
	0x18, 0xc6, 0x19, 0xe8, 0xb2, 0xf4, 0xdd, 0x3f, 0xcb, 0x30, 0x21, 0x7f, 0x37, 0xc4, 0xac, 0xa4,
	0x07, 0x43, 0x0c, 0xec, 0x1a, 0xbc, 0x19, 0x35, 0x81, 0x56, 0xc8, 0x26, 0x40, 0x48, 0x8b, 0x31,
	0x72, 0xeb, 0xb6, 0x63, 0xdb, 0xd0, 0x76, 0xea, 0xcc, 0xd4, 0xc8, 0x57, 0xf2, 0xea, 0x97, 0xe0,
	0x26, 0x9f, 0xc0, 0xe8, 0x5e, 0xfc, 0x1a, 0xa6, 0xd3, 0xee, 0xb6, 0xee, 0x1e, 0xd4, 0x84, 0xdb,
	0xbc, 0xcf, 0x3c, 0xef, 0x3b, 0xcf, 0x6f, 0x26, 0x2d, 0xe8, 0x9e, 0x8c, 0x07, 0x19, 0x67, 0x92,
	0x91, 0x15, 0x4f, 0xc6, 0xdb, 0xfb, 0x41, 0x24, 0xc3, 0x7c, 0x3c, 0xf0, 0x58, 0x32, 0x0c, 0x58,
	0xc0, 0x86, 0x6a, 0x6f, 0x9c, 0xbf, 0x57, 0x95, 0x2a, 0xd4, 0xaa, 0xec, 0xd9, 0xde, 0x90, 0x51,
	0x42, 0x85, 0x74, 0x93, 0xac, 0x14, 0x8c, 0x7d, 0x58, 0xb7, 0xce, 0x2f, 0xa2, 0x34, 0xb0, 0xe9,
	0x87, 0x9c, 0x0a, 0x49, 0x1e, 0x82, 0x9e, 0xb9, 0xdc, 0x4d, 0xa8, 0xa4, 0xbc, 0x87, 0x76, 0xd0,
	0xae, 0x6e, 0xd7, 0x82, 0xf1, 0x19, 0x41, 0x77, 0xea, 0x17, 0x19, 0x4b, 0x05, 0x25, 0x3d, 0x68,
	0x0b, 0xc9, 0x38, 0x1d, 0x59, 0x95, 0x7d, 0x5a, 0x92, 0xc7, 0xd0, 0x15, 0x94, 0x7f, 0x8c, 0x3c,
	0x7a, 0xe8, 0xfb, 0x9c, 0x0a, 0xd1, 0x5b, 0x56, 0x86, 0x39, 0x55, 0x4d, 0x08, 0x5d, 0xee, 0x8f,
	0xac, 0xde, 0xca, 0x0e, 0xda, 0xd5, 0xec, 0x69, 0x59, 0x84, 0xe1, 0x34, 0x8b, 0x23, 0xcf, 0x1d,
	0x59, 0x3d, 0x4d, 0xed, 0xd5, 0x02, 0xe9, 0x03, 0xc4, 0x2c, 0x70, 0xaa, 0xd6, 0x96, 0xda, 0x6e,
	0x28, 0xc6, 0x53, 0xc0, 0xd6, 0xb9, 0x23, 0x79, 0x33, 0xad, 0x9a, 0x28, 0x73, 0x9e, 0x3a, 0x72,
	0x86, 0x37, 0x13, 0x8c, 0xaf, 0x08, 0xda, 0x8d, 0x8b, 0xa8, 0x96, 0x15, 0x99, 0x66, 0xd7, 0x02,
	0xd9, 0x03, 0xdd, 0x3c, 0xb3, 0xce, 0xa8, 0x0c, 0x99, 0xaf, 0xb0, 0xba, 0x07, 0xdd, 0x41, 0xf1,
	0x36, 0x66, 0xe2, 0x97, 0xaa, 0x5d, 0x1b, 0xc8, 0x0b, 0x00, 0xe7, 0xc6, 0x4b, 0x4d, 0x96, 0x24,
	0x91, 0x54, 0x90, 0x9d, 0x83, 0xff, 0x95, 0xdd, 0xb9, 0x49, 0xbd, 0x52, 0xae, 0x66, 0x1f, 0x69,
	0xb7, 0xdf, 0x1e, 0x2d, 0xd9, 0x0d, 0x3f, 0x79, 0x0e, 0xfa, 0x09, 0x95, 0x55, 0xb3, 0xf6, 0x17,
	0xcd, 0xb5, 0xdd, 0xf8, 0x89, 0x60, 0xad, 0x09, 0x7f, 0x6f, 0x48, 0x5b, 0xd0, 0x7a, 0xcd, 0x39,
	0xe3, 0x8a, 0xe6, 0x3f, 0xbb, 0x2c, 0xc8, 0xcb, 0xdf, 0x40, 0xcb, 0xac, 0x0f, 0x16, 0xb2, 0x96,
	0x71, 0xfe, 0x44, 0xda, 0x6a, 0x90, 0xce, 0xd4, 0xb9, 0xe6, 0x06, 0xe9, 0x5b, 0xd8, 0x5c, 0xb8,
	0x0f, 0x72, 0x04, 0xdd, 0x53, 0x57, 0x52, 0x51, 0x99, 0x2e, 0x1d, 0x85, 0xdd, 0x39, 0xd8, 0x1a,
	0xd4, 0x1f, 0xc2, 0xe5, 0x74, 0x55, 0xcd, 0x9c, 0xeb, 0x30, 0xae, 0x80, 0x2c, 0x86, 0x27, 0x16,
	0x6c, 0x98, 0x39, 0xe7, 0x34, 0xfd, 0x97, 0xd1, 0xf3, 0x2d, 0x06, 0x01, 0xdc, 0x40, 0x53, 0x99,
	0x8d, 0x77, 0xb0, 0xb9, 0x80, 0x7b, 0x3f, 0xc7, 0x3d, 0xf9, 0x82, 0x40, 0x9f, 0xbd, 0x26, 0x59,
	0x03, 0xad, 0xf8, 0x92, 0xf1, 0x12, 0xd1, 0xa1, 0x75, 0x1c, 0xe7, 0x22, 0xc4, 0xa8, 0x10, 0x2f,
	0x5d, 0x71, 0x8d, 0x97, 0x49, 0x17, 0xc0, 0x0c, 0xa9, 0x77, 0x9d, 0xb1, 0x28, 0x95, 0x78, 0x85,
	0x6c, 0x40, 0xe7, 0x8d, 0xa0, 0x4e, 0xea, 0x66, 0x22, 0x64, 0x12, 0x6b, 0x85, 0x70, 0x42, 0xe5,
	0x4c, 0x68, 0x91, 0x0e, 0xb4, 0x8f, 0x19, 0xf7, 0xe8, 0x89, 0x89, 0x57, 0x8b, 0x62, 0x94, 0x8a,
	0x8c, 0x7a, 0x12, 0xb7, 0x8b, 0x03, 0x4e, 0xdd, 0x31, 0x8d, 0xf1, 0x5a, 0x31, 0xb6, 0xbe, 0x4e,
	0xac, 0x93, 0xf5, 0xc6, 0x9b, 0x63, 0x20, 0x9b, 0xb0, 0x7e, 0xe8, 0xfb, 0xc7, 0x6e, 0x1e, 0xcb,
	0x0b, 0x75, 0x70, 0xe7, 0xe8, 0xd5, 0xdd, 0x8f, 0x3e, 0xba, 0x9d, 0xf4, 0xd1, 0xdd, 0xa4, 0x8f,
	0xbe, 0x4f, 0xfa, 0xe8, 0x6a, 0xaf, 0xf1, 0xd7, 0x4b, 0x5c, 0xc9, 0xa3, 0x4f, 0x8c, 0x47, 0x41,
	0x94, 0x4e, 0x8b, 0x94, 0x0e, 0xb3, 0xeb, 0x60, 0x98, 0x8d, 0x87, 0x9e, 0x8c, 0xc7, 0xab, 0xea,
	0x57, 0xf7, 0xec, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x76, 0xcd, 0x16, 0x3c, 0x05, 0x00,
	0x00,
}

func (m *DNPingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNPingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNPingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintCtl(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNPingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNPingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNPingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogShardID != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.LogShardID))
		i--
		dAtA[i] = 0x28
	}
	if m.ReplicaID != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x20
	}
	if m.ShardID != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintCtl(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreID) > 0 {
		i -= len(m.StoreID)
		copy(dAtA[i:], m.StoreID)
		i = encodeVarintCtl(dAtA, i, uint64(len(m.StoreID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNStringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNStringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNStringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReturnStr) > 0 {
		i -= len(m.ReturnStr)
		copy(dAtA[i:], m.ReturnStr)
		i = encodeVarintCtl(dAtA, i, uint64(len(m.ReturnStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.GetCommit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCtl(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.SycnCommit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCtl(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CMDMethod != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.CMDMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestID != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.GetCommit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCtl(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.SycnCommit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCtl(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCtl(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CMDMethod != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.CMDMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestID != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.LatestCommitTS.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCtl(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SyncCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.CurrentCommitTS.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCtl(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.CurrentCommitTS.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCtl(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCtl(dAtA []byte, offset int, v uint64) int {
	offset -= sovCtl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DNPingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovCtl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DNPingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreID)
	if l > 0 {
		n += 1 + l + sovCtl(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovCtl(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovCtl(uint64(m.ShardID))
	}
	if m.ReplicaID != 0 {
		n += 1 + sovCtl(uint64(m.ReplicaID))
	}
	if m.LogShardID != 0 {
		n += 1 + sovCtl(uint64(m.LogShardID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DNStringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReturnStr)
	if l > 0 {
		n += 1 + l + sovCtl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovCtl(uint64(m.RequestID))
	}
	if m.CMDMethod != 0 {
		n += 1 + sovCtl(uint64(m.CMDMethod))
	}
	l = m.SycnCommit.Size()
	n += 1 + l + sovCtl(uint64(l))
	l = m.GetCommit.Size()
	n += 1 + l + sovCtl(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovCtl(uint64(m.RequestID))
	}
	if m.CMDMethod != 0 {
		n += 1 + sovCtl(uint64(m.CMDMethod))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCtl(uint64(l))
	}
	l = m.SycnCommit.Size()
	n += 1 + l + sovCtl(uint64(l))
	l = m.GetCommit.Size()
	n += 1 + l + sovCtl(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LatestCommitTS.Size()
	n += 1 + l + sovCtl(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CurrentCommitTS.Size()
	n += 1 + l + sovCtl(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CurrentCommitTS.Size()
	n += 1 + l + sovCtl(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCtl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCtl(x uint64) (n int) {
	return sovCtl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DNPingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNPingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNPingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNPingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNPingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNPingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogShardID", wireType)
			}
			m.LogShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNStringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNStringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNStringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CMDMethod", wireType)
			}
			m.CMDMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CMDMethod |= CmdMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SycnCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SycnCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GetCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CMDMethod", wireType)
			}
			m.CMDMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CMDMethod |= CmdMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = append(m.Error[:0], dAtA[iNdEx:postIndex]...)
			if m.Error == nil {
				m.Error = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SycnCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SycnCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GetCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCommitTS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestCommitTS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCommitTS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentCommitTS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCommitTS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentCommitTS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCtl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCtl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCtl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCtl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCtl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCtl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCtl = fmt.Errorf("proto: unexpected end of group")
)
