// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ctl.proto

package ctl

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TNPingRequest ping request
type TNPingRequest struct {
	Parameter            string   `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TNPingRequest) Reset()         { *m = TNPingRequest{} }
func (m *TNPingRequest) String() string { return proto.CompactTextString(m) }
func (*TNPingRequest) ProtoMessage()    {}
func (*TNPingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{0}
}
func (m *TNPingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TNPingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TNPingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TNPingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TNPingRequest.Merge(m, src)
}
func (m *TNPingRequest) XXX_Size() int {
	return m.Size()
}
func (m *TNPingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TNPingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TNPingRequest proto.InternalMessageInfo

func (m *TNPingRequest) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

// TNPingResponse ping response
type TNPingResponse struct {
	StoreID              string   `protobuf:"bytes,1,opt,name=storeID,proto3" json:"storeID,omitempty"`
	ServiceAddress       string   `protobuf:"bytes,2,opt,name=serviceAddress,proto3" json:"serviceAddress,omitempty"`
	ShardID              uint64   `protobuf:"varint,3,opt,name=shardID,proto3" json:"shardID,omitempty"`
	ReplicaID            uint64   `protobuf:"varint,4,opt,name=replicaID,proto3" json:"replicaID,omitempty"`
	LogShardID           uint64   `protobuf:"varint,5,opt,name=logShardID,proto3" json:"logShardID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TNPingResponse) Reset()         { *m = TNPingResponse{} }
func (m *TNPingResponse) String() string { return proto.CompactTextString(m) }
func (*TNPingResponse) ProtoMessage()    {}
func (*TNPingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{1}
}
func (m *TNPingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TNPingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TNPingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TNPingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TNPingResponse.Merge(m, src)
}
func (m *TNPingResponse) XXX_Size() int {
	return m.Size()
}
func (m *TNPingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TNPingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TNPingResponse proto.InternalMessageInfo

func (m *TNPingResponse) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

func (m *TNPingResponse) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *TNPingResponse) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *TNPingResponse) GetReplicaID() uint64 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

func (m *TNPingResponse) GetLogShardID() uint64 {
	if m != nil {
		return m.LogShardID
	}
	return 0
}

// TNStringResponse string type response
type TNStringResponse struct {
	ReturnStr            string   `protobuf:"bytes,1,opt,name=returnStr,proto3" json:"returnStr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TNStringResponse) Reset()         { *m = TNStringResponse{} }
func (m *TNStringResponse) String() string { return proto.CompactTextString(m) }
func (*TNStringResponse) ProtoMessage()    {}
func (*TNStringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{2}
}
func (m *TNStringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TNStringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TNStringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TNStringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TNStringResponse.Merge(m, src)
}
func (m *TNStringResponse) XXX_Size() int {
	return m.Size()
}
func (m *TNStringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TNStringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TNStringResponse proto.InternalMessageInfo

func (m *TNStringResponse) GetReturnStr() string {
	if m != nil {
		return m.ReturnStr
	}
	return ""
}

func init() {
	proto.RegisterType((*TNPingRequest)(nil), "ctl.TNPingRequest")
	proto.RegisterType((*TNPingResponse)(nil), "ctl.TNPingResponse")
	proto.RegisterType((*TNStringResponse)(nil), "ctl.TNStringResponse")
}

func init() { proto.RegisterFile("ctl.proto", fileDescriptor_0646114e50303026) }

var fileDescriptor_0646114e50303026 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x59, 0x5b, 0x95, 0x2c, 0x58, 0x24, 0xa7, 0x20, 0x12, 0x4a, 0x0e, 0xd2, 0x83, 0x6d,
	0x04, 0x6f, 0xde, 0x94, 0x5c, 0x72, 0x29, 0x92, 0xf4, 0xe4, 0x2d, 0xd9, 0x8c, 0xdb, 0xc5, 0x24,
	0xbb, 0xce, 0x4e, 0xc4, 0x67, 0xf2, 0x49, 0x3c, 0xfa, 0x08, 0x92, 0x27, 0x11, 0xd7, 0xa6, 0x0d,
	0xde, 0xf6, 0xfb, 0xe6, 0x9f, 0x61, 0x76, 0xb8, 0x27, 0xa8, 0x5e, 0x19, 0xd4, 0xa4, 0xfd, 0x89,
	0xa0, 0xfa, 0x62, 0x29, 0x15, 0x6d, 0xbb, 0x72, 0x25, 0x74, 0x13, 0x4b, 0x2d, 0x75, 0xec, 0x6a,
	0x65, 0xf7, 0xec, 0xc8, 0x81, 0x7b, 0xfd, 0xf5, 0x44, 0x4b, 0x7e, 0xb6, 0x59, 0x3f, 0xaa, 0x56,
	0x66, 0xf0, 0xda, 0x81, 0x25, 0xff, 0x92, 0x7b, 0xa6, 0xc0, 0xa2, 0x01, 0x02, 0x0c, 0xd8, 0x9c,
	0x2d, 0xbc, 0xec, 0x20, 0xa2, 0x0f, 0xc6, 0x67, 0x43, 0xde, 0x1a, 0xdd, 0x5a, 0xf0, 0x03, 0x7e,
	0x6a, 0x49, 0x23, 0xa4, 0xc9, 0x2e, 0x3e, 0xa0, 0x7f, 0xc5, 0x67, 0x16, 0xf0, 0x4d, 0x09, 0xb8,
	0xaf, 0x2a, 0x04, 0x6b, 0x83, 0x23, 0x17, 0xf8, 0x67, 0xdd, 0x84, 0x6d, 0x81, 0x55, 0x9a, 0x04,
	0x93, 0x39, 0x5b, 0x4c, 0xb3, 0x01, 0x7f, 0x97, 0x41, 0x30, 0xb5, 0x12, 0x45, 0x9a, 0x04, 0x53,
	0x57, 0x3b, 0x08, 0x3f, 0xe4, 0xbc, 0xd6, 0x32, 0xdf, 0xb5, 0x1e, 0xbb, 0xf2, 0xc8, 0x44, 0x37,
	0xfc, 0x7c, 0xb3, 0xce, 0x09, 0xc7, 0xdb, 0xba, 0x89, 0xd4, 0x61, 0x9b, 0xd3, 0xfe, 0x7b, 0x7b,
	0xf1, 0x70, 0xf7, 0xd9, 0x87, 0xec, 0xab, 0x0f, 0xd9, 0x77, 0x1f, 0xb2, 0xa7, 0xeb, 0xd1, 0x29,
	0x9b, 0x82, 0x50, 0xbd, 0x6b, 0x54, 0x52, 0xb5, 0x03, 0xb4, 0x10, 0x9b, 0x17, 0x19, 0x9b, 0x32,
	0x16, 0x54, 0x97, 0x27, 0xee, 0xa0, 0xb7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x26, 0x14, 0x5a,
	0xf8, 0x91, 0x01, 0x00, 0x00,
}

func (m *TNPingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TNPingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TNPingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintCtl(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TNPingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TNPingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TNPingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogShardID != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.LogShardID))
		i--
		dAtA[i] = 0x28
	}
	if m.ReplicaID != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x20
	}
	if m.ShardID != 0 {
		i = encodeVarintCtl(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintCtl(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreID) > 0 {
		i -= len(m.StoreID)
		copy(dAtA[i:], m.StoreID)
		i = encodeVarintCtl(dAtA, i, uint64(len(m.StoreID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TNStringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TNStringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TNStringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReturnStr) > 0 {
		i -= len(m.ReturnStr)
		copy(dAtA[i:], m.ReturnStr)
		i = encodeVarintCtl(dAtA, i, uint64(len(m.ReturnStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCtl(dAtA []byte, offset int, v uint64) int {
	offset -= sovCtl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TNPingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovCtl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TNPingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreID)
	if l > 0 {
		n += 1 + l + sovCtl(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovCtl(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovCtl(uint64(m.ShardID))
	}
	if m.ReplicaID != 0 {
		n += 1 + sovCtl(uint64(m.ReplicaID))
	}
	if m.LogShardID != 0 {
		n += 1 + sovCtl(uint64(m.LogShardID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TNStringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReturnStr)
	if l > 0 {
		n += 1 + l + sovCtl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCtl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCtl(x uint64) (n int) {
	return sovCtl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TNPingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TNPingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TNPingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TNPingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TNPingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TNPingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogShardID", wireType)
			}
			m.LogShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TNStringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TNStringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TNStringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCtl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCtl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCtl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCtl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCtl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCtl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCtl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCtl = fmt.Errorf("proto: unexpected end of group")
)
