// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gossip.proto

package gossip

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	query "github.com/matrixorigin/matrixone/pkg/pb/query"
	statsinfo "github.com/matrixorigin/matrixone/pkg/pb/statsinfo"
	_ "google.golang.org/protobuf/types/known/anypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Operation int32

const (
	Operation_Unknown Operation = 0
	Operation_Set     Operation = 1
	Operation_Delete  Operation = 2
)

var Operation_name = map[int32]string{
	0: "Unknown",
	1: "Set",
	2: "Delete",
}

var Operation_value = map[string]int32{
	"Unknown": 0,
	"Set":     1,
	"Delete":  2,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}

func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_878fa4887b90140c, []int{0}
}

type GossipData struct {
	// Types that are valid to be assigned to Data:
	//	*GossipData_CacheKeyItem
	//	*GossipData_StatsInfoKeyItem
	Data                 isGossipData_Data `protobuf_oneof:"Data"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GossipData) Reset()         { *m = GossipData{} }
func (m *GossipData) String() string { return proto.CompactTextString(m) }
func (*GossipData) ProtoMessage()    {}
func (*GossipData) Descriptor() ([]byte, []int) {
	return fileDescriptor_878fa4887b90140c, []int{0}
}
func (m *GossipData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GossipData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GossipData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GossipData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipData.Merge(m, src)
}
func (m *GossipData) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GossipData) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipData.DiscardUnknown(m)
}

var xxx_messageInfo_GossipData proto.InternalMessageInfo

type isGossipData_Data interface {
	isGossipData_Data()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type GossipData_CacheKeyItem struct {
	CacheKeyItem *CacheKeyItem `protobuf:"bytes,1,opt,name=CacheKeyItem,proto3,oneof" json:"CacheKeyItem,omitempty"`
}
type GossipData_StatsInfoKeyItem struct {
	StatsInfoKeyItem *StatsInfoKeyItem `protobuf:"bytes,2,opt,name=StatsInfoKeyItem,proto3,oneof" json:"StatsInfoKeyItem,omitempty"`
}

func (*GossipData_CacheKeyItem) isGossipData_Data()     {}
func (*GossipData_StatsInfoKeyItem) isGossipData_Data() {}

func (m *GossipData) GetData() isGossipData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GossipData) GetCacheKeyItem() *CacheKeyItem {
	if x, ok := m.GetData().(*GossipData_CacheKeyItem); ok {
		return x.CacheKeyItem
	}
	return nil
}

func (m *GossipData) GetStatsInfoKeyItem() *StatsInfoKeyItem {
	if x, ok := m.GetData().(*GossipData_StatsInfoKeyItem); ok {
		return x.StatsInfoKeyItem
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GossipData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GossipData_CacheKeyItem)(nil),
		(*GossipData_StatsInfoKeyItem)(nil),
	}
}

// CacheKeyItem is the item of cache key for data in file-service.
type CacheKeyItem struct {
	Operation            Operation      `protobuf:"varint,1,opt,name=Operation,proto3,enum=gossip.Operation" json:"Operation,omitempty"`
	CacheKey             query.CacheKey `protobuf:"bytes,2,opt,name=CacheKey,proto3" json:"CacheKey"`
	TargetAddress        string         `protobuf:"bytes,3,opt,name=TargetAddress,proto3" json:"TargetAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CacheKeyItem) Reset()         { *m = CacheKeyItem{} }
func (m *CacheKeyItem) String() string { return proto.CompactTextString(m) }
func (*CacheKeyItem) ProtoMessage()    {}
func (*CacheKeyItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_878fa4887b90140c, []int{1}
}
func (m *CacheKeyItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheKeyItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheKeyItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheKeyItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheKeyItem.Merge(m, src)
}
func (m *CacheKeyItem) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CacheKeyItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheKeyItem.DiscardUnknown(m)
}

var xxx_messageInfo_CacheKeyItem proto.InternalMessageInfo

func (m *CacheKeyItem) GetOperation() Operation {
	if m != nil {
		return m.Operation
	}
	return Operation_Unknown
}

func (m *CacheKeyItem) GetCacheKey() query.CacheKey {
	if m != nil {
		return m.CacheKey
	}
	return query.CacheKey{}
}

func (m *CacheKeyItem) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

type StatsInfoKeyItem struct {
	Operation            Operation              `protobuf:"varint,1,opt,name=Operation,proto3,enum=gossip.Operation" json:"Operation,omitempty"`
	StatsInfoKey         statsinfo.StatsInfoKey `protobuf:"bytes,2,opt,name=StatsInfoKey,proto3" json:"StatsInfoKey"`
	TargetAddress        string                 `protobuf:"bytes,3,opt,name=TargetAddress,proto3" json:"TargetAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StatsInfoKeyItem) Reset()         { *m = StatsInfoKeyItem{} }
func (m *StatsInfoKeyItem) String() string { return proto.CompactTextString(m) }
func (*StatsInfoKeyItem) ProtoMessage()    {}
func (*StatsInfoKeyItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_878fa4887b90140c, []int{2}
}
func (m *StatsInfoKeyItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsInfoKeyItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsInfoKeyItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsInfoKeyItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsInfoKeyItem.Merge(m, src)
}
func (m *StatsInfoKeyItem) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StatsInfoKeyItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsInfoKeyItem.DiscardUnknown(m)
}

var xxx_messageInfo_StatsInfoKeyItem proto.InternalMessageInfo

func (m *StatsInfoKeyItem) GetOperation() Operation {
	if m != nil {
		return m.Operation
	}
	return Operation_Unknown
}

func (m *StatsInfoKeyItem) GetStatsInfoKey() statsinfo.StatsInfoKey {
	if m != nil {
		return m.StatsInfoKey
	}
	return statsinfo.StatsInfoKey{}
}

func (m *StatsInfoKeyItem) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

type LocalState struct {
	CacheKeys            query.CacheKeys         `protobuf:"bytes,1,opt,name=CacheKeys,proto3" json:"CacheKeys"`
	StatsInfoKeys        statsinfo.StatsInfoKeys `protobuf:"bytes,2,opt,name=StatsInfoKeys,proto3" json:"StatsInfoKeys"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LocalState) Reset()         { *m = LocalState{} }
func (m *LocalState) String() string { return proto.CompactTextString(m) }
func (*LocalState) ProtoMessage()    {}
func (*LocalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_878fa4887b90140c, []int{3}
}
func (m *LocalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalState.Merge(m, src)
}
func (m *LocalState) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LocalState) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalState.DiscardUnknown(m)
}

var xxx_messageInfo_LocalState proto.InternalMessageInfo

func (m *LocalState) GetCacheKeys() query.CacheKeys {
	if m != nil {
		return m.CacheKeys
	}
	return query.CacheKeys{}
}

func (m *LocalState) GetStatsInfoKeys() statsinfo.StatsInfoKeys {
	if m != nil {
		return m.StatsInfoKeys
	}
	return statsinfo.StatsInfoKeys{}
}

type TargetState struct {
	Data                 map[string]*LocalState `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TargetState) Reset()         { *m = TargetState{} }
func (m *TargetState) String() string { return proto.CompactTextString(m) }
func (*TargetState) ProtoMessage()    {}
func (*TargetState) Descriptor() ([]byte, []int) {
	return fileDescriptor_878fa4887b90140c, []int{4}
}
func (m *TargetState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TargetState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TargetState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetState.Merge(m, src)
}
func (m *TargetState) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TargetState) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetState.DiscardUnknown(m)
}

var xxx_messageInfo_TargetState proto.InternalMessageInfo

func (m *TargetState) GetData() map[string]*LocalState {
	if m != nil {
		return m.Data
	}
	return nil
}

type CommonItem struct {
	Operation     Operation `protobuf:"varint,1,opt,name=Operation,proto3,enum=gossip.Operation" json:"Operation,omitempty"`
	TargetAddress string    `protobuf:"bytes,2,opt,name=TargetAddress,proto3" json:"TargetAddress,omitempty"`
	// Types that are valid to be assigned to Key:
	//	*CommonItem_CacheKey
	//	*CommonItem_StatsInfoKey
	Key                  isCommonItem_Key `protobuf_oneof:"Key"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CommonItem) Reset()         { *m = CommonItem{} }
func (m *CommonItem) String() string { return proto.CompactTextString(m) }
func (*CommonItem) ProtoMessage()    {}
func (*CommonItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_878fa4887b90140c, []int{5}
}
func (m *CommonItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonItem.Merge(m, src)
}
func (m *CommonItem) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CommonItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonItem.DiscardUnknown(m)
}

var xxx_messageInfo_CommonItem proto.InternalMessageInfo

type isCommonItem_Key interface {
	isCommonItem_Key()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type CommonItem_CacheKey struct {
	CacheKey *query.CacheKey `protobuf:"bytes,3,opt,name=CacheKey,proto3,oneof" json:"CacheKey,omitempty"`
}
type CommonItem_StatsInfoKey struct {
	StatsInfoKey *statsinfo.StatsInfoKey `protobuf:"bytes,4,opt,name=StatsInfoKey,proto3,oneof" json:"StatsInfoKey,omitempty"`
}

func (*CommonItem_CacheKey) isCommonItem_Key()     {}
func (*CommonItem_StatsInfoKey) isCommonItem_Key() {}

func (m *CommonItem) GetKey() isCommonItem_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CommonItem) GetOperation() Operation {
	if m != nil {
		return m.Operation
	}
	return Operation_Unknown
}

func (m *CommonItem) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

func (m *CommonItem) GetCacheKey() *query.CacheKey {
	if x, ok := m.GetKey().(*CommonItem_CacheKey); ok {
		return x.CacheKey
	}
	return nil
}

func (m *CommonItem) GetStatsInfoKey() *statsinfo.StatsInfoKey {
	if x, ok := m.GetKey().(*CommonItem_StatsInfoKey); ok {
		return x.StatsInfoKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CommonItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CommonItem_CacheKey)(nil),
		(*CommonItem_StatsInfoKey)(nil),
	}
}

func init() {
	proto.RegisterEnum("gossip.Operation", Operation_name, Operation_value)
	proto.RegisterType((*GossipData)(nil), "gossip.GossipData")
	proto.RegisterType((*CacheKeyItem)(nil), "gossip.CacheKeyItem")
	proto.RegisterType((*StatsInfoKeyItem)(nil), "gossip.StatsInfoKeyItem")
	proto.RegisterType((*LocalState)(nil), "gossip.LocalState")
	proto.RegisterType((*TargetState)(nil), "gossip.TargetState")
	proto.RegisterMapType((map[string]*LocalState)(nil), "gossip.TargetState.DataEntry")
	proto.RegisterType((*CommonItem)(nil), "gossip.CommonItem")
}

func init() { proto.RegisterFile("gossip.proto", fileDescriptor_878fa4887b90140c) }

var fileDescriptor_878fa4887b90140c = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbf, 0x8e, 0xd3, 0x4e,
	0x10, 0xf6, 0xc6, 0xb9, 0xdc, 0xcf, 0xe3, 0xdc, 0xef, 0xcc, 0x0a, 0x89, 0x10, 0x89, 0x10, 0x45,
	0x14, 0x11, 0x52, 0x6c, 0x5d, 0xa0, 0x40, 0x27, 0x51, 0x24, 0x17, 0x20, 0xa7, 0x20, 0x21, 0xf9,
	0xa0, 0xa1, 0xdb, 0xe4, 0x36, 0x3e, 0x2b, 0xf1, 0xae, 0xb1, 0x37, 0x80, 0xdf, 0x80, 0x86, 0x9e,
	0x92, 0x07, 0xe0, 0x41, 0xae, 0xa4, 0xa4, 0x42, 0x28, 0xbc, 0x08, 0xf2, 0x9f, 0x8d, 0xed, 0x24,
	0x42, 0x40, 0xb7, 0x33, 0xf3, 0x7d, 0x33, 0xdf, 0xfc, 0xd1, 0x42, 0xdd, 0xe1, 0x61, 0xe8, 0xfa,
	0xa6, 0x1f, 0x70, 0xc1, 0x71, 0x2d, 0xb5, 0x9a, 0xb7, 0x1d, 0xce, 0x9d, 0x25, 0xb5, 0x12, 0xef,
	0x74, 0x35, 0xb7, 0x08, 0x8b, 0x52, 0x48, 0xb3, 0xe7, 0xb8, 0xe2, 0x6a, 0x35, 0x35, 0x67, 0xdc,
	0xb3, 0x1c, 0xee, 0xf0, 0x1c, 0x13, 0x5b, 0x89, 0x91, 0xbc, 0x32, 0xb8, 0xfe, 0x66, 0x45, 0x03,
	0xc9, 0x3d, 0x0e, 0x05, 0x11, 0xa1, 0xcb, 0xe6, 0x59, 0xb4, 0xf3, 0x09, 0x01, 0x3c, 0x4b, 0x4a,
	0x8e, 0x88, 0x20, 0xf8, 0x14, 0xea, 0x67, 0x64, 0x76, 0x45, 0x27, 0x34, 0x3a, 0x17, 0xd4, 0x6b,
	0xa0, 0x36, 0xea, 0xea, 0xfd, 0x9b, 0x66, 0xa6, 0xb1, 0x18, 0x1b, 0x2b, 0x76, 0x09, 0x8b, 0x9f,
	0x82, 0x71, 0x11, 0x67, 0x3f, 0x67, 0x73, 0x2e, 0xf9, 0x95, 0x84, 0xdf, 0x90, 0xfc, 0xed, 0xf8,
	0x58, 0xb1, 0x77, 0x38, 0xc3, 0x1a, 0x54, 0x63, 0x2d, 0xb1, 0xb4, 0x72, 0x01, 0x0b, 0xb4, 0x17,
	0x3e, 0x0d, 0x88, 0x70, 0x39, 0x4b, 0x94, 0xfd, 0xdf, 0xbf, 0x21, 0x33, 0x6f, 0x02, 0x76, 0x8e,
	0xc1, 0x27, 0xf0, 0x9f, 0x4c, 0x90, 0x29, 0x39, 0x36, 0xd3, 0x69, 0x48, 0xf7, 0xb0, 0x7a, 0xfd,
	0xfd, 0xae, 0x62, 0x6f, 0x60, 0xf8, 0x1e, 0x1c, 0xbd, 0x24, 0x81, 0x43, 0xc5, 0xe0, 0xf2, 0x32,
	0xa0, 0x61, 0xd8, 0x50, 0xdb, 0xa8, 0xab, 0xd9, 0x65, 0x67, 0xe7, 0x0b, 0xda, 0xed, 0xf5, 0xef,
	0xe5, 0x0d, 0xa0, 0x5e, 0x4c, 0x92, 0x49, 0xbc, 0x65, 0xe6, 0x3b, 0x2a, 0x86, 0x33, 0xa9, 0x25,
	0xca, 0x1f, 0xca, 0xfd, 0x80, 0x00, 0x9e, 0xf3, 0x19, 0x59, 0xc6, 0x5c, 0x8a, 0x1f, 0x82, 0x26,
	0xfb, 0x0d, 0xb3, 0x0d, 0x1b, 0x5b, 0x73, 0x09, 0xb3, 0x6a, 0x39, 0x10, 0x8f, 0xe0, 0xa8, 0x58,
	0x3a, 0xdc, 0xec, 0x76, 0xbf, 0x5c, 0x99, 0xa1, 0x4c, 0xea, 0x7c, 0x44, 0xa0, 0xa7, 0xe2, 0x52,
	0x2d, 0x27, 0xe9, 0xb2, 0x1b, 0xa8, 0xad, 0x76, 0xf5, 0xfe, 0x1d, 0x39, 0xaf, 0x02, 0xc4, 0x8c,
	0xe3, 0x4f, 0x98, 0x08, 0x22, 0x3b, 0x81, 0x36, 0x27, 0xa0, 0x6d, 0x5c, 0xd8, 0x00, 0x75, 0x41,
	0xa3, 0xa4, 0x0b, 0xcd, 0x8e, 0x9f, 0xb8, 0x0b, 0x07, 0x6f, 0xc9, 0x72, 0x45, 0x33, 0x7d, 0x58,
	0xa6, 0xcc, 0x07, 0x60, 0xa7, 0x80, 0xd3, 0xca, 0x23, 0xd4, 0xf9, 0x86, 0x00, 0xce, 0xb8, 0xe7,
	0x71, 0xf6, 0x6f, 0x3b, 0xdc, 0x59, 0x40, 0x65, 0xcf, 0x02, 0x70, 0xaf, 0x70, 0x88, 0xea, 0xde,
	0x43, 0x1c, 0x17, 0x8f, 0xf0, 0xf1, 0xd6, 0x61, 0x54, 0x7f, 0x7b, 0x18, 0xe3, 0xad, 0xa3, 0x18,
	0x1e, 0x80, 0x3a, 0xa1, 0xd1, 0xfd, 0x5e, 0xa1, 0x17, 0xac, 0xc3, 0xe1, 0x2b, 0xb6, 0x60, 0xfc,
	0x1d, 0x33, 0x14, 0x7c, 0x08, 0xea, 0x05, 0x15, 0x06, 0xc2, 0x00, 0xb5, 0x11, 0x5d, 0x52, 0x41,
	0x8d, 0xca, 0x70, 0x70, 0xbd, 0x6e, 0xa1, 0xaf, 0xeb, 0x16, 0xfa, 0xb1, 0x6e, 0x29, 0x9f, 0x7f,
	0xb6, 0xd0, 0x6b, 0xab, 0xf0, 0xd1, 0x78, 0x44, 0x04, 0xee, 0x7b, 0x1e, 0xb8, 0x8e, 0xcb, 0xa4,
	0xc1, 0xa8, 0xe5, 0x2f, 0x1c, 0xcb, 0x9f, 0x5a, 0xe9, 0x84, 0xa6, 0xb5, 0xe4, 0x4f, 0x79, 0xf0,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xd7, 0x21, 0x39, 0xd3, 0x04, 0x00, 0x00,
}

func (m *GossipData) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GossipData) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.ProtoSize()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GossipData_CacheKeyItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipData_CacheKeyItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CacheKeyItem != nil {
		{
			size, err := m.CacheKeyItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GossipData_StatsInfoKeyItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipData_StatsInfoKeyItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StatsInfoKeyItem != nil {
		{
			size, err := m.StatsInfoKeyItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CacheKeyItem) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheKeyItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheKeyItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.CacheKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGossip(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Operation != 0 {
		i = encodeVarintGossip(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatsInfoKeyItem) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsInfoKeyItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsInfoKeyItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.StatsInfoKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGossip(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Operation != 0 {
		i = encodeVarintGossip(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocalState) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalState) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.StatsInfoKeys.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGossip(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CacheKeys.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGossip(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TargetState) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetState) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGossip(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGossip(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGossip(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CommonItem) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Key != nil {
		{
			size := m.Key.ProtoSize()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Operation != 0 {
		i = encodeVarintGossip(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommonItem_CacheKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonItem_CacheKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CacheKey != nil {
		{
			size, err := m.CacheKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CommonItem_StatsInfoKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonItem_StatsInfoKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StatsInfoKey != nil {
		{
			size, err := m.StatsInfoKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintGossip(dAtA []byte, offset int, v uint64) int {
	offset -= sovGossip(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GossipData) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.ProtoSize()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GossipData_CacheKeyItem) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheKeyItem != nil {
		l = m.CacheKeyItem.ProtoSize()
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}
func (m *GossipData_StatsInfoKeyItem) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatsInfoKeyItem != nil {
		l = m.StatsInfoKeyItem.ProtoSize()
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}
func (m *CacheKeyItem) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovGossip(uint64(m.Operation))
	}
	l = m.CacheKey.ProtoSize()
	n += 1 + l + sovGossip(uint64(l))
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatsInfoKeyItem) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovGossip(uint64(m.Operation))
	}
	l = m.StatsInfoKey.ProtoSize()
	n += 1 + l + sovGossip(uint64(l))
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalState) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CacheKeys.ProtoSize()
	n += 1 + l + sovGossip(uint64(l))
	l = m.StatsInfoKeys.ProtoSize()
	n += 1 + l + sovGossip(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TargetState) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.ProtoSize()
				l += 1 + sovGossip(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGossip(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGossip(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonItem) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovGossip(uint64(m.Operation))
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	if m.Key != nil {
		n += m.Key.ProtoSize()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonItem_CacheKey) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheKey != nil {
		l = m.CacheKey.ProtoSize()
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}
func (m *CommonItem_StatsInfoKey) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatsInfoKey != nil {
		l = m.StatsInfoKey.ProtoSize()
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}

func sovGossip(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGossip(x uint64) (n int) {
	return sovGossip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GossipData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GossipData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GossipData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKeyItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CacheKeyItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &GossipData_CacheKeyItem{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsInfoKeyItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StatsInfoKeyItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &GossipData_StatsInfoKeyItem{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheKeyItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheKeyItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheKeyItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CacheKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsInfoKeyItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsInfoKeyItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsInfoKeyItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsInfoKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StatsInfoKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CacheKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsInfoKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StatsInfoKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]*LocalState)
			}
			var mapkey string
			var mapvalue *LocalState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGossip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGossip
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGossip
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGossip
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGossip
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGossip
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGossip
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LocalState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGossip(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGossip
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &query.CacheKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &CommonItem_CacheKey{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsInfoKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &statsinfo.StatsInfoKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &CommonItem_StatsInfoKey{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGossip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGossip
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGossip
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGossip
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGossip        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGossip          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGossip = fmt.Errorf("proto: unexpected end of group")
)
