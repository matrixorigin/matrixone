// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: plan.proto

package plan

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatementType int32

const (
	StatementType_UNKNOW StatementType = 0
	StatementType_SELECT StatementType = 1
	StatementType_INSERT StatementType = 2
	StatementType_DELETE StatementType = 3
	StatementType_UPDATE StatementType = 4
	StatementType_MERGE  StatementType = 5
)

// Enum value maps for StatementType.
var (
	StatementType_name = map[int32]string{
		0: "UNKNOW",
		1: "SELECT",
		2: "INSERT",
		3: "DELETE",
		4: "UPDATE",
		5: "MERGE",
	}
	StatementType_value = map[string]int32{
		"UNKNOW": 0,
		"SELECT": 1,
		"INSERT": 2,
		"DELETE": 3,
		"UPDATE": 4,
		"MERGE":  5,
	}
)

func (x StatementType) Enum() *StatementType {
	p := new(StatementType)
	*p = x
	return p
}

func (x StatementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatementType) Descriptor() protoreflect.EnumDescriptor {
	return file_plan_proto_enumTypes[0].Descriptor()
}

func (StatementType) Type() protoreflect.EnumType {
	return &file_plan_proto_enumTypes[0]
}

func (x StatementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatementType.Descriptor instead.
func (StatementType) EnumDescriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{0}
}

type Type_TypeId int32

const (
	Type_ANY  Type_TypeId = 0
	Type_STAR Type_TypeId = 1
	Type_BOOL Type_TypeId = 10
	// INTs
	Type_INT8   Type_TypeId = 20
	Type_INT16  Type_TypeId = 21
	Type_INT32  Type_TypeId = 22
	Type_INT64  Type_TypeId = 23
	Type_INT128 Type_TypeId = 24
	// UINT are mysql quirks.
	Type_UINT8      Type_TypeId = 25
	Type_UINT16     Type_TypeId = 26
	Type_UINT32     Type_TypeId = 27
	Type_UINT64     Type_TypeId = 28
	Type_UINT128    Type_TypeId = 29
	Type_FLOAT32    Type_TypeId = 30
	Type_FLOAT64    Type_TypeId = 31
	Type_DECIMAL64  Type_TypeId = 32
	Type_DECIMAL128 Type_TypeId = 33
	Type_DECIMAL    Type_TypeId = 34
	Type_ANYINT     Type_TypeId = 37
	Type_ANYFLOAT   Type_TypeId = 38
	Type_ANYNUMBER  Type_TypeId = 39
	// Some special small (<= 32 bytes) fixed len types that worth optimize
	Type_UUID  Type_TypeId = 40 // 16 bytes,
	Type_UB160 Type_TypeId = 41 // 20 bytes, SHA-1
	Type_UB184 Type_TypeId = 42 // 23 bytes,
	Type_UB192 Type_TypeId = 43 // 24 bytes, for example, BLAKE3 output of 24 bytes.
	Type_UB224 Type_TypeId = 44 // 28 bytes, for example, SHA-224, BLAKE3-224
	Type_UB256 Type_TypeId = 45 // 32 bytes, for example, SHA-256, BLAKE3-256
	// Time
	Type_DATE      Type_TypeId = 50
	Type_TIME      Type_TypeId = 51
	Type_DATETIME  Type_TypeId = 52
	Type_TIMESTAMP Type_TypeId = 53
	Type_INTERVAL  Type_TypeId = 54
	Type_ANYTIME   Type_TypeId = 59
	// Strings and binaries
	Type_CHAR      Type_TypeId = 60
	Type_VARCHAR   Type_TypeId = 61
	Type_JSON      Type_TypeId = 62
	Type_BINARY    Type_TypeId = 70
	Type_VARBINARY Type_TypeId = 71
	// Special
	Type_ARRAY      Type_TypeId = 90
	Type_FLEXBUFFER Type_TypeId = 91
	// Physical for varlen
	Type_BYTEA8  Type_TypeId = 100
	Type_BYTEA16 Type_TypeId = 101
	Type_BYTEA   Type_TypeId = 102
	// MO Special, not sure if we really need these.
	Type_SEL   Type_TypeId = 200
	Type_TUPLE Type_TypeId = 201
)

// Enum value maps for Type_TypeId.
var (
	Type_TypeId_name = map[int32]string{
		0:   "ANY",
		1:   "STAR",
		10:  "BOOL",
		20:  "INT8",
		21:  "INT16",
		22:  "INT32",
		23:  "INT64",
		24:  "INT128",
		25:  "UINT8",
		26:  "UINT16",
		27:  "UINT32",
		28:  "UINT64",
		29:  "UINT128",
		30:  "FLOAT32",
		31:  "FLOAT64",
		32:  "DECIMAL64",
		33:  "DECIMAL128",
		34:  "DECIMAL",
		37:  "ANYINT",
		38:  "ANYFLOAT",
		39:  "ANYNUMBER",
		40:  "UUID",
		41:  "UB160",
		42:  "UB184",
		43:  "UB192",
		44:  "UB224",
		45:  "UB256",
		50:  "DATE",
		51:  "TIME",
		52:  "DATETIME",
		53:  "TIMESTAMP",
		54:  "INTERVAL",
		59:  "ANYTIME",
		60:  "CHAR",
		61:  "VARCHAR",
		62:  "JSON",
		70:  "BINARY",
		71:  "VARBINARY",
		90:  "ARRAY",
		91:  "FLEXBUFFER",
		100: "BYTEA8",
		101: "BYTEA16",
		102: "BYTEA",
		200: "SEL",
		201: "TUPLE",
	}
	Type_TypeId_value = map[string]int32{
		"ANY":        0,
		"STAR":       1,
		"BOOL":       10,
		"INT8":       20,
		"INT16":      21,
		"INT32":      22,
		"INT64":      23,
		"INT128":     24,
		"UINT8":      25,
		"UINT16":     26,
		"UINT32":     27,
		"UINT64":     28,
		"UINT128":    29,
		"FLOAT32":    30,
		"FLOAT64":    31,
		"DECIMAL64":  32,
		"DECIMAL128": 33,
		"DECIMAL":    34,
		"ANYINT":     37,
		"ANYFLOAT":   38,
		"ANYNUMBER":  39,
		"UUID":       40,
		"UB160":      41,
		"UB184":      42,
		"UB192":      43,
		"UB224":      44,
		"UB256":      45,
		"DATE":       50,
		"TIME":       51,
		"DATETIME":   52,
		"TIMESTAMP":  53,
		"INTERVAL":   54,
		"ANYTIME":    59,
		"CHAR":       60,
		"VARCHAR":    61,
		"JSON":       62,
		"BINARY":     70,
		"VARBINARY":  71,
		"ARRAY":      90,
		"FLEXBUFFER": 91,
		"BYTEA8":     100,
		"BYTEA16":    101,
		"BYTEA":      102,
		"SEL":        200,
		"TUPLE":      201,
	}
)

func (x Type_TypeId) Enum() *Type_TypeId {
	p := new(Type_TypeId)
	*p = x
	return p
}

func (x Type_TypeId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type_TypeId) Descriptor() protoreflect.EnumDescriptor {
	return file_plan_proto_enumTypes[1].Descriptor()
}

func (Type_TypeId) Type() protoreflect.EnumType {
	return &file_plan_proto_enumTypes[1]
}

func (x Type_TypeId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type_TypeId.Descriptor instead.
func (Type_TypeId) EnumDescriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{0, 0}
}

// Function flags
type Function_FuncFlag int32

const (
	Function_NONE Function_FuncFlag = 0
	// Internal function is generated by system, cannot
	// by called by user.
	Function_INTERNAL Function_FuncFlag = 1
	// Function, by default is immutable.
	Function_STABLE   Function_FuncFlag = 2
	Function_VOLATILE Function_FuncFlag = 4
	// Nulls
	Function_STRICT          Function_FuncFlag = 8
	Function_PRODUCE_NULL    Function_FuncFlag = 16
	Function_PRODUCE_NO_NULL Function_FuncFlag = 32
	// Vararg, all trailing args must be of the same type.
	Function_VARARG Function_FuncFlag = 64
	// Window and Agg
	Function_AGG Function_FuncFlag = 128
	Function_WIN Function_FuncFlag = 256
)

// Enum value maps for Function_FuncFlag.
var (
	Function_FuncFlag_name = map[int32]string{
		0:   "NONE",
		1:   "INTERNAL",
		2:   "STABLE",
		4:   "VOLATILE",
		8:   "STRICT",
		16:  "PRODUCE_NULL",
		32:  "PRODUCE_NO_NULL",
		64:  "VARARG",
		128: "AGG",
		256: "WIN",
	}
	Function_FuncFlag_value = map[string]int32{
		"NONE":            0,
		"INTERNAL":        1,
		"STABLE":          2,
		"VOLATILE":        4,
		"STRICT":          8,
		"PRODUCE_NULL":    16,
		"PRODUCE_NO_NULL": 32,
		"VARARG":          64,
		"AGG":             128,
		"WIN":             256,
	}
)

func (x Function_FuncFlag) Enum() *Function_FuncFlag {
	p := new(Function_FuncFlag)
	*p = x
	return p
}

func (x Function_FuncFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Function_FuncFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_plan_proto_enumTypes[2].Descriptor()
}

func (Function_FuncFlag) Type() protoreflect.EnumType {
	return &file_plan_proto_enumTypes[2]
}

func (x Function_FuncFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Function_FuncFlag.Descriptor instead.
func (Function_FuncFlag) EnumDescriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{9, 0}
}

type OrderBySpec_OrderByFlag int32

const (
	OrderBySpec_ASC         OrderBySpec_OrderByFlag = 0
	OrderBySpec_DESC        OrderBySpec_OrderByFlag = 1
	OrderBySpec_NULLS_FIRST OrderBySpec_OrderByFlag = 2
	OrderBySpec_NULLS_LAST  OrderBySpec_OrderByFlag = 4
	OrderBySpec_UNIQUE      OrderBySpec_OrderByFlag = 8
	OrderBySpec_INTERNAL    OrderBySpec_OrderByFlag = 16
)

// Enum value maps for OrderBySpec_OrderByFlag.
var (
	OrderBySpec_OrderByFlag_name = map[int32]string{
		0:  "ASC",
		1:  "DESC",
		2:  "NULLS_FIRST",
		4:  "NULLS_LAST",
		8:  "UNIQUE",
		16: "INTERNAL",
	}
	OrderBySpec_OrderByFlag_value = map[string]int32{
		"ASC":         0,
		"DESC":        1,
		"NULLS_FIRST": 2,
		"NULLS_LAST":  4,
		"UNIQUE":      8,
		"INTERNAL":    16,
	}
)

func (x OrderBySpec_OrderByFlag) Enum() *OrderBySpec_OrderByFlag {
	p := new(OrderBySpec_OrderByFlag)
	*p = x
	return p
}

func (x OrderBySpec_OrderByFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBySpec_OrderByFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_plan_proto_enumTypes[3].Descriptor()
}

func (OrderBySpec_OrderByFlag) Type() protoreflect.EnumType {
	return &file_plan_proto_enumTypes[3]
}

func (x OrderBySpec_OrderByFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBySpec_OrderByFlag.Descriptor instead.
func (OrderBySpec_OrderByFlag) EnumDescriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{16, 0}
}

type Node_NodeType int32

const (
	Node_UNKNOWN Node_NodeType = 0 // Node Types
	// Scans
	Node_VALUE_SCAN    Node_NodeType = 1
	Node_TABLE_SCAN    Node_NodeType = 2
	Node_FUNCTION_SCAN Node_NodeType = 3
	Node_EXTERNAL_SCAN Node_NodeType = 4
	Node_MATERIAL_SCAN Node_NodeType = 5
	// Proj, for convinience
	Node_PROJECT Node_NodeType = 10
	// External function call (UDF)
	Node_EXTERNAL_FUNCTION Node_NodeType = 11
	// Matrial, CTE, etc.
	Node_MATERIAL      Node_NodeType = 20
	Node_RECURSIVE_CTE Node_NodeType = 21
	Node_SINK          Node_NodeType = 22
	Node_SINK_SCAN     Node_NodeType = 23
	// Proper Relational Operators
	Node_AGG       Node_NodeType = 30
	Node_JOIN      Node_NodeType = 31
	Node_SAMPLE    Node_NodeType = 32
	Node_SORT      Node_NodeType = 33
	Node_UNION     Node_NodeType = 34
	Node_UNION_ALL Node_NodeType = 35
	Node_UNIQUE    Node_NodeType = 36
	Node_WINDOW    Node_NodeType = 37
	// Physical tuple mover
	Node_BROADCAST Node_NodeType = 40
	Node_SPLIT     Node_NodeType = 41
	Node_GATHER    Node_NodeType = 42
	// Misc
	Node_ASSERT Node_NodeType = 50
	//
	Node_INSERT Node_NodeType = 51
	Node_UPDATE Node_NodeType = 52
	Node_DELETE Node_NodeType = 53
)

// Enum value maps for Node_NodeType.
var (
	Node_NodeType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "VALUE_SCAN",
		2:  "TABLE_SCAN",
		3:  "FUNCTION_SCAN",
		4:  "EXTERNAL_SCAN",
		5:  "MATERIAL_SCAN",
		10: "PROJECT",
		11: "EXTERNAL_FUNCTION",
		20: "MATERIAL",
		21: "RECURSIVE_CTE",
		22: "SINK",
		23: "SINK_SCAN",
		30: "AGG",
		31: "JOIN",
		32: "SAMPLE",
		33: "SORT",
		34: "UNION",
		35: "UNION_ALL",
		36: "UNIQUE",
		37: "WINDOW",
		40: "BROADCAST",
		41: "SPLIT",
		42: "GATHER",
		50: "ASSERT",
		51: "INSERT",
		52: "UPDATE",
		53: "DELETE",
	}
	Node_NodeType_value = map[string]int32{
		"UNKNOWN":           0,
		"VALUE_SCAN":        1,
		"TABLE_SCAN":        2,
		"FUNCTION_SCAN":     3,
		"EXTERNAL_SCAN":     4,
		"MATERIAL_SCAN":     5,
		"PROJECT":           10,
		"EXTERNAL_FUNCTION": 11,
		"MATERIAL":          20,
		"RECURSIVE_CTE":     21,
		"SINK":              22,
		"SINK_SCAN":         23,
		"AGG":               30,
		"JOIN":              31,
		"SAMPLE":            32,
		"SORT":              33,
		"UNION":             34,
		"UNION_ALL":         35,
		"UNIQUE":            36,
		"WINDOW":            37,
		"BROADCAST":         40,
		"SPLIT":             41,
		"GATHER":            42,
		"ASSERT":            50,
		"INSERT":            51,
		"UPDATE":            52,
		"DELETE":            53,
	}
)

func (x Node_NodeType) Enum() *Node_NodeType {
	p := new(Node_NodeType)
	*p = x
	return p
}

func (x Node_NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_plan_proto_enumTypes[4].Descriptor()
}

func (Node_NodeType) Type() protoreflect.EnumType {
	return &file_plan_proto_enumTypes[4]
}

func (x Node_NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_NodeType.Descriptor instead.
func (Node_NodeType) EnumDescriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{19, 0}
}

type Node_JoinFlag int32

const (
	Node_INNER  Node_JoinFlag = 0
	Node_OUTER  Node_JoinFlag = 1
	Node_SEMI   Node_JoinFlag = 2
	Node_ANTI   Node_JoinFlag = 4
	Node_SINGLE Node_JoinFlag = 8
	Node_MARK   Node_JoinFlag = 16
	Node_APPLY  Node_JoinFlag = 32
)

// Enum value maps for Node_JoinFlag.
var (
	Node_JoinFlag_name = map[int32]string{
		0:  "INNER",
		1:  "OUTER",
		2:  "SEMI",
		4:  "ANTI",
		8:  "SINGLE",
		16: "MARK",
		32: "APPLY",
	}
	Node_JoinFlag_value = map[string]int32{
		"INNER":  0,
		"OUTER":  1,
		"SEMI":   2,
		"ANTI":   4,
		"SINGLE": 8,
		"MARK":   16,
		"APPLY":  32,
	}
)

func (x Node_JoinFlag) Enum() *Node_JoinFlag {
	p := new(Node_JoinFlag)
	*p = x
	return p
}

func (x Node_JoinFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_JoinFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_plan_proto_enumTypes[5].Descriptor()
}

func (Node_JoinFlag) Type() protoreflect.EnumType {
	return &file_plan_proto_enumTypes[5]
}

func (x Node_JoinFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_JoinFlag.Descriptor instead.
func (Node_JoinFlag) EnumDescriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{19, 1}
}

type Node_AggMode int32

const (
	Node_FULL   Node_AggMode = 0
	Node_BOTTOM Node_AggMode = 1
	Node_TOP    Node_AggMode = 2
)

// Enum value maps for Node_AggMode.
var (
	Node_AggMode_name = map[int32]string{
		0: "FULL",
		1: "BOTTOM",
		2: "TOP",
	}
	Node_AggMode_value = map[string]int32{
		"FULL":   0,
		"BOTTOM": 1,
		"TOP":    2,
	}
)

func (x Node_AggMode) Enum() *Node_AggMode {
	p := new(Node_AggMode)
	*p = x
	return p
}

func (x Node_AggMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_AggMode) Descriptor() protoreflect.EnumDescriptor {
	return file_plan_proto_enumTypes[6].Descriptor()
}

func (Node_AggMode) Type() protoreflect.EnumType {
	return &file_plan_proto_enumTypes[6]
}

func (x Node_AggMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_AggMode.Descriptor instead.
func (Node_AggMode) EnumDescriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{19, 2}
}

type Query_StatementType int32

const (
	Query_UNKNOWN Query_StatementType = 0
	Query_SELECT  Query_StatementType = 1
	Query_INSERT  Query_StatementType = 2
	Query_DELETE  Query_StatementType = 3
	Query_UPDATE  Query_StatementType = 4
	Query_MERGE   Query_StatementType = 5
)

// Enum value maps for Query_StatementType.
var (
	Query_StatementType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SELECT",
		2: "INSERT",
		3: "DELETE",
		4: "UPDATE",
		5: "MERGE",
	}
	Query_StatementType_value = map[string]int32{
		"UNKNOWN": 0,
		"SELECT":  1,
		"INSERT":  2,
		"DELETE":  3,
		"UPDATE":  4,
		"MERGE":   5,
	}
)

func (x Query_StatementType) Enum() *Query_StatementType {
	p := new(Query_StatementType)
	*p = x
	return p
}

func (x Query_StatementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_StatementType) Descriptor() protoreflect.EnumDescriptor {
	return file_plan_proto_enumTypes[7].Descriptor()
}

func (Query_StatementType) Type() protoreflect.EnumType {
	return &file_plan_proto_enumTypes[7]
}

func (x Query_StatementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_StatementType.Descriptor instead.
func (Query_StatementType) EnumDescriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{20, 0}
}

type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        Type_TypeId `protobuf:"varint,1,opt,name=id,proto3,enum=Type_TypeId" json:"id,omitempty"`
	Nullable  bool        `protobuf:"varint,2,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Width     int32       `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Precision int32       `protobuf:"varint,4,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *Type) Reset() {
	*x = Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{0}
}

func (x *Type) GetId() Type_TypeId {
	if x != nil {
		return x.Id
	}
	return Type_ANY
}

func (x *Type) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *Type) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Type) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

// Const: if a const value can be reprensented by int64 or
// double, use that, otherwise store a string representation.
type Const struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isnull bool `protobuf:"varint,1,opt,name=isnull,proto3" json:"isnull,omitempty"`
	// Types that are assignable to Value:
	//	*Const_Ival
	//	*Const_Dval
	//	*Const_Sval
	Value isConst_Value `protobuf_oneof:"value"`
}

func (x *Const) Reset() {
	*x = Const{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Const) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Const) ProtoMessage() {}

func (x *Const) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Const.ProtoReflect.Descriptor instead.
func (*Const) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{1}
}

func (x *Const) GetIsnull() bool {
	if x != nil {
		return x.Isnull
	}
	return false
}

func (m *Const) GetValue() isConst_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Const) GetIval() int64 {
	if x, ok := x.GetValue().(*Const_Ival); ok {
		return x.Ival
	}
	return 0
}

func (x *Const) GetDval() float64 {
	if x, ok := x.GetValue().(*Const_Dval); ok {
		return x.Dval
	}
	return 0
}

func (x *Const) GetSval() string {
	if x, ok := x.GetValue().(*Const_Sval); ok {
		return x.Sval
	}
	return ""
}

type isConst_Value interface {
	isConst_Value()
}

type Const_Ival struct {
	Ival int64 `protobuf:"varint,2,opt,name=ival,proto3,oneof"`
}

type Const_Dval struct {
	Dval float64 `protobuf:"fixed64,3,opt,name=dval,proto3,oneof"`
}

type Const_Sval struct {
	Sval string `protobuf:"bytes,4,opt,name=sval,proto3,oneof"`
}

func (*Const_Ival) isConst_Value() {}

func (*Const_Dval) isConst_Value() {}

func (*Const_Sval) isConst_Value() {}

// Bounded param for prepared statement.  User fill on execution.
type ParamRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos int32 `protobuf:"varint,1,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *ParamRef) Reset() {
	*x = ParamRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamRef) ProtoMessage() {}

func (x *ParamRef) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamRef.ProtoReflect.Descriptor instead.
func (*ParamRef) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{2}
}

func (x *ParamRef) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

// Session variable ref, compiler should fold.
type VarRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VarRef) Reset() {
	*x = VarRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarRef) ProtoMessage() {}

func (x *VarRef) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarRef.ProtoReflect.Descriptor instead.
func (*VarRef) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{3}
}

func (x *VarRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Reference a column in the proj list of a node.
type ColRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RelPos int32  `protobuf:"varint,2,opt,name=rel_pos,json=relPos,proto3" json:"rel_pos,omitempty"`
	ColPos int32  `protobuf:"varint,3,opt,name=col_pos,json=colPos,proto3" json:"col_pos,omitempty"`
}

func (x *ColRef) Reset() {
	*x = ColRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColRef) ProtoMessage() {}

func (x *ColRef) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColRef.ProtoReflect.Descriptor instead.
func (*ColRef) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{4}
}

func (x *ColRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColRef) GetRelPos() int32 {
	if x != nil {
		return x.RelPos
	}
	return 0
}

func (x *ColRef) GetColPos() int32 {
	if x != nil {
		return x.ColPos
	}
	return 0
}

// Reference a correlated column in the proj list of a node.
type CorrColRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RelPos int32  `protobuf:"varint,2,opt,name=rel_pos,json=relPos,proto3" json:"rel_pos,omitempty"`
	ColPos int32  `protobuf:"varint,3,opt,name=col_pos,json=colPos,proto3" json:"col_pos,omitempty"`
	NodeId int32  `protobuf:"varint,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *CorrColRef) Reset() {
	*x = CorrColRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrColRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrColRef) ProtoMessage() {}

func (x *CorrColRef) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrColRef.ProtoReflect.Descriptor instead.
func (*CorrColRef) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{5}
}

func (x *CorrColRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CorrColRef) GetRelPos() int32 {
	if x != nil {
		return x.RelPos
	}
	return 0
}

func (x *CorrColRef) GetColPos() int32 {
	if x != nil {
		return x.ColPos
	}
	return 0
}

func (x *CorrColRef) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// ExprList is a type of Expr
type ExprList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Expr `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ExprList) Reset() {
	*x = ExprList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprList) ProtoMessage() {}

func (x *ExprList) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprList.ProtoReflect.Descriptor instead.
func (*ExprList) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{6}
}

func (x *ExprList) GetList() []*Expr {
	if x != nil {
		return x.List
	}
	return nil
}

// Reference a subquery
type SubQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId       int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	IsCorrelated bool  `protobuf:"varint,2,opt,name=is_correlated,json=isCorrelated,proto3" json:"is_correlated,omitempty"`
	IsScalar     bool  `protobuf:"varint,3,opt,name=is_scalar,json=isScalar,proto3" json:"is_scalar,omitempty"`
}

func (x *SubQuery) Reset() {
	*x = SubQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubQuery) ProtoMessage() {}

func (x *SubQuery) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubQuery.ProtoReflect.Descriptor instead.
func (*SubQuery) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{7}
}

func (x *SubQuery) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SubQuery) GetIsCorrelated() bool {
	if x != nil {
		return x.IsCorrelated
	}
	return false
}

func (x *SubQuery) GetIsScalar() bool {
	if x != nil {
		return x.IsScalar
	}
	return false
}

// Object ref, reference a object in database, 4 part name.
type ObjectRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server     int64  `protobuf:"varint,1,opt,name=server,proto3" json:"server,omitempty"`
	Db         int64  `protobuf:"varint,2,opt,name=db,proto3" json:"db,omitempty"`
	Schema     int64  `protobuf:"varint,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Obj        int64  `protobuf:"varint,4,opt,name=obj,proto3" json:"obj,omitempty"`
	ServerName string `protobuf:"bytes,5,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	DbName     string `protobuf:"bytes,6,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	SchemaName string `protobuf:"bytes,7,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	ObjName    string `protobuf:"bytes,8,opt,name=obj_name,json=objName,proto3" json:"obj_name,omitempty"`
}

func (x *ObjectRef) Reset() {
	*x = ObjectRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRef) ProtoMessage() {}

func (x *ObjectRef) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRef.ProtoReflect.Descriptor instead.
func (*ObjectRef) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{8}
}

func (x *ObjectRef) GetServer() int64 {
	if x != nil {
		return x.Server
	}
	return 0
}

func (x *ObjectRef) GetDb() int64 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *ObjectRef) GetSchema() int64 {
	if x != nil {
		return x.Schema
	}
	return 0
}

func (x *ObjectRef) GetObj() int64 {
	if x != nil {
		return x.Obj
	}
	return 0
}

func (x *ObjectRef) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ObjectRef) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *ObjectRef) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *ObjectRef) GetObjName() string {
	if x != nil {
		return x.ObjName
	}
	return ""
}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Func *ObjectRef `protobuf:"bytes,1,opt,name=func,proto3" json:"func,omitempty"`
	Args []*Expr    `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{9}
}

func (x *Function) GetFunc() *ObjectRef {
	if x != nil {
		return x.Func
	}
	return nil
}

func (x *Function) GetArgs() []*Expr {
	if x != nil {
		return x.Args
	}
	return nil
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ   *Type  `protobuf:"bytes,1,opt,name=typ,proto3" json:"typ,omitempty"`
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	// Types that are assignable to Expr:
	//	*Expr_C
	//	*Expr_P
	//	*Expr_V
	//	*Expr_Col
	//	*Expr_F
	//	*Expr_List
	//	*Expr_Sub
	//	*Expr_Corr
	Expr isExpr_Expr `protobuf_oneof:"expr"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{10}
}

func (x *Expr) GetTyp() *Type {
	if x != nil {
		return x.Typ
	}
	return nil
}

func (x *Expr) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (m *Expr) GetExpr() isExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *Expr) GetC() *Const {
	if x, ok := x.GetExpr().(*Expr_C); ok {
		return x.C
	}
	return nil
}

func (x *Expr) GetP() *ParamRef {
	if x, ok := x.GetExpr().(*Expr_P); ok {
		return x.P
	}
	return nil
}

func (x *Expr) GetV() *VarRef {
	if x, ok := x.GetExpr().(*Expr_V); ok {
		return x.V
	}
	return nil
}

func (x *Expr) GetCol() *ColRef {
	if x, ok := x.GetExpr().(*Expr_Col); ok {
		return x.Col
	}
	return nil
}

func (x *Expr) GetF() *Function {
	if x, ok := x.GetExpr().(*Expr_F); ok {
		return x.F
	}
	return nil
}

func (x *Expr) GetList() *ExprList {
	if x, ok := x.GetExpr().(*Expr_List); ok {
		return x.List
	}
	return nil
}

func (x *Expr) GetSub() *SubQuery {
	if x, ok := x.GetExpr().(*Expr_Sub); ok {
		return x.Sub
	}
	return nil
}

func (x *Expr) GetCorr() *CorrColRef {
	if x, ok := x.GetExpr().(*Expr_Corr); ok {
		return x.Corr
	}
	return nil
}

type isExpr_Expr interface {
	isExpr_Expr()
}

type Expr_C struct {
	C *Const `protobuf:"bytes,3,opt,name=c,proto3,oneof"`
}

type Expr_P struct {
	P *ParamRef `protobuf:"bytes,4,opt,name=p,proto3,oneof"`
}

type Expr_V struct {
	V *VarRef `protobuf:"bytes,5,opt,name=v,proto3,oneof"`
}

type Expr_Col struct {
	Col *ColRef `protobuf:"bytes,6,opt,name=col,proto3,oneof"`
}

type Expr_F struct {
	F *Function `protobuf:"bytes,7,opt,name=f,proto3,oneof"`
}

type Expr_List struct {
	List *ExprList `protobuf:"bytes,8,opt,name=list,proto3,oneof"`
}

type Expr_Sub struct {
	Sub *SubQuery `protobuf:"bytes,9,opt,name=sub,proto3,oneof"`
}

type Expr_Corr struct {
	Corr *CorrColRef `protobuf:"bytes,10,opt,name=corr,proto3,oneof"`
}

func (*Expr_C) isExpr_Expr() {}

func (*Expr_P) isExpr_Expr() {}

func (*Expr_V) isExpr_Expr() {}

func (*Expr_Col) isExpr_Expr() {}

func (*Expr_F) isExpr_Expr() {}

func (*Expr_List) isExpr_Expr() {}

func (*Expr_Sub) isExpr_Expr() {}

func (*Expr_Corr) isExpr_Expr() {}

type ColDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ   *Type  `protobuf:"bytes,1,opt,name=typ,proto3" json:"typ,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pkidx int32  `protobuf:"varint,3,opt,name=pkidx,proto3" json:"pkidx,omitempty"`
}

func (x *ColDef) Reset() {
	*x = ColDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColDef) ProtoMessage() {}

func (x *ColDef) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColDef.ProtoReflect.Descriptor instead.
func (*ColDef) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{11}
}

func (x *ColDef) GetTyp() *Type {
	if x != nil {
		return x.Typ
	}
	return nil
}

func (x *ColDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColDef) GetPkidx() int32 {
	if x != nil {
		return x.Pkidx
	}
	return 0
}

type TableDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cols []*ColDef `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty"`
}

func (x *TableDef) Reset() {
	*x = TableDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDef) ProtoMessage() {}

func (x *TableDef) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDef.ProtoReflect.Descriptor instead.
func (*TableDef) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{12}
}

func (x *TableDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableDef) GetCols() []*ColDef {
	if x != nil {
		return x.Cols
	}
	return nil
}

type Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card    float64 `protobuf:"fixed64,1,opt,name=card,proto3" json:"card,omitempty"`
	Rowsize float64 `protobuf:"fixed64,2,opt,name=rowsize,proto3" json:"rowsize,omitempty"`
	Ndv     float64 `protobuf:"fixed64,3,opt,name=ndv,proto3" json:"ndv,omitempty"`
	Start   float64 `protobuf:"fixed64,4,opt,name=start,proto3" json:"start,omitempty"`
	Total   float64 `protobuf:"fixed64,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Cost) Reset() {
	*x = Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost) ProtoMessage() {}

func (x *Cost) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost.ProtoReflect.Descriptor instead.
func (*Cost) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{13}
}

func (x *Cost) GetCard() float64 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *Cost) GetRowsize() float64 {
	if x != nil {
		return x.Rowsize
	}
	return 0
}

func (x *Cost) GetNdv() float64 {
	if x != nil {
		return x.Ndv
	}
	return 0
}

func (x *Cost) GetStart() float64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Cost) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ColData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowCount  int32     `protobuf:"varint,1,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	NullCount int32     `protobuf:"varint,2,opt,name=null_count,json=nullCount,proto3" json:"null_count,omitempty"`
	Nulls     []bool    `protobuf:"varint,3,rep,packed,name=nulls,proto3" json:"nulls,omitempty"`
	I32       []int32   `protobuf:"varint,4,rep,packed,name=i32,proto3" json:"i32,omitempty"`
	I64       []int64   `protobuf:"varint,5,rep,packed,name=i64,proto3" json:"i64,omitempty"`
	F32       []float32 `protobuf:"fixed32,6,rep,packed,name=f32,proto3" json:"f32,omitempty"`
	F64       []float64 `protobuf:"fixed64,7,rep,packed,name=f64,proto3" json:"f64,omitempty"`
	S         []string  `protobuf:"bytes,8,rep,name=s,proto3" json:"s,omitempty"`
}

func (x *ColData) Reset() {
	*x = ColData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColData) ProtoMessage() {}

func (x *ColData) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColData.ProtoReflect.Descriptor instead.
func (*ColData) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{14}
}

func (x *ColData) GetRowCount() int32 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *ColData) GetNullCount() int32 {
	if x != nil {
		return x.NullCount
	}
	return 0
}

func (x *ColData) GetNulls() []bool {
	if x != nil {
		return x.Nulls
	}
	return nil
}

func (x *ColData) GetI32() []int32 {
	if x != nil {
		return x.I32
	}
	return nil
}

func (x *ColData) GetI64() []int64 {
	if x != nil {
		return x.I64
	}
	return nil
}

func (x *ColData) GetF32() []float32 {
	if x != nil {
		return x.F32
	}
	return nil
}

func (x *ColData) GetF64() []float64 {
	if x != nil {
		return x.F64
	}
	return nil
}

func (x *ColData) GetS() []string {
	if x != nil {
		return x.S
	}
	return nil
}

type RowsetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *TableDef  `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Cols   []*ColData `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty"`
}

func (x *RowsetData) Reset() {
	*x = RowsetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowsetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowsetData) ProtoMessage() {}

func (x *RowsetData) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowsetData.ProtoReflect.Descriptor instead.
func (*RowsetData) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{15}
}

func (x *RowsetData) GetSchema() *TableDef {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *RowsetData) GetCols() []*ColData {
	if x != nil {
		return x.Cols
	}
	return nil
}

type OrderBySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderBy           *Expr                   `protobuf:"bytes,1,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	OrderByCollations string                  `protobuf:"bytes,2,opt,name=order_by_collations,json=orderByCollations,proto3" json:"order_by_collations,omitempty"`
	OrderByFlags      OrderBySpec_OrderByFlag `protobuf:"varint,3,opt,name=order_by_flags,json=orderByFlags,proto3,enum=OrderBySpec_OrderByFlag" json:"order_by_flags,omitempty"`
}

func (x *OrderBySpec) Reset() {
	*x = OrderBySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBySpec) ProtoMessage() {}

func (x *OrderBySpec) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBySpec.ProtoReflect.Descriptor instead.
func (*OrderBySpec) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{16}
}

func (x *OrderBySpec) GetOrderBy() *Expr {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *OrderBySpec) GetOrderByCollations() string {
	if x != nil {
		return x.OrderByCollations
	}
	return ""
}

func (x *OrderBySpec) GetOrderByFlags() OrderBySpec_OrderByFlag {
	if x != nil {
		return x.OrderByFlags
	}
	return OrderBySpec_ASC
}

type WindowSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionBy []*Expr        `protobuf:"bytes,1,rep,name=partition_by,json=partitionBy,proto3" json:"partition_by,omitempty"`
	OderyBy     []*OrderBySpec `protobuf:"bytes,2,rep,name=odery_by,json=oderyBy,proto3" json:"odery_by,omitempty"`
	Lead        int32          `protobuf:"varint,3,opt,name=lead,proto3" json:"lead,omitempty"`
	Lag         int32          `protobuf:"varint,4,opt,name=lag,proto3" json:"lag,omitempty"`
}

func (x *WindowSpec) Reset() {
	*x = WindowSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowSpec) ProtoMessage() {}

func (x *WindowSpec) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowSpec.ProtoReflect.Descriptor instead.
func (*WindowSpec) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{17}
}

func (x *WindowSpec) GetPartitionBy() []*Expr {
	if x != nil {
		return x.PartitionBy
	}
	return nil
}

func (x *WindowSpec) GetOderyBy() []*OrderBySpec {
	if x != nil {
		return x.OderyBy
	}
	return nil
}

func (x *WindowSpec) GetLead() int32 {
	if x != nil {
		return x.Lead
	}
	return 0
}

func (x *WindowSpec) GetLag() int32 {
	if x != nil {
		return x.Lag
	}
	return 0
}

type UpdateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*Expr `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Values  []*Expr `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *UpdateList) Reset() {
	*x = UpdateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateList) ProtoMessage() {}

func (x *UpdateList) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateList.ProtoReflect.Descriptor instead.
func (*UpdateList) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateList) GetColumns() []*Expr {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *UpdateList) GetValues() []*Expr {
	if x != nil {
		return x.Values
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType     Node_NodeType  `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=Node_NodeType" json:"node_type,omitempty"`
	NodeId       int32          `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Cost         *Cost          `protobuf:"bytes,3,opt,name=cost,proto3" json:"cost,omitempty"`
	ProjectList  []*Expr        `protobuf:"bytes,4,rep,name=project_list,json=projectList,proto3" json:"project_list,omitempty"`
	Children     []int32        `protobuf:"varint,5,rep,packed,name=children,proto3" json:"children,omitempty"`
	JoinType     Node_JoinFlag  `protobuf:"varint,6,opt,name=join_type,json=joinType,proto3,enum=Node_JoinFlag" json:"join_type,omitempty"`
	OnList       []*Expr        `protobuf:"bytes,7,rep,name=on_list,json=onList,proto3" json:"on_list,omitempty"`
	WhereList    []*Expr        `protobuf:"bytes,8,rep,name=where_list,json=whereList,proto3" json:"where_list,omitempty"`
	GroupBy      []*Expr        `protobuf:"bytes,9,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	GroupingSet  []*Expr        `protobuf:"bytes,10,rep,name=grouping_set,json=groupingSet,proto3" json:"grouping_set,omitempty"`
	OrderBy      []*OrderBySpec `protobuf:"bytes,11,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	UpdateList   *UpdateList    `protobuf:"bytes,12,opt,name=update_list,json=updateList,proto3" json:"update_list,omitempty"`
	WinSpec      *WindowSpec    `protobuf:"bytes,13,opt,name=win_spec,json=winSpec,proto3" json:"win_spec,omitempty"`
	Limit        *Expr          `protobuf:"bytes,14,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       *Expr          `protobuf:"bytes,15,opt,name=offset,proto3" json:"offset,omitempty"`
	TableDef     *TableDef      `protobuf:"bytes,16,opt,name=table_def,json=tableDef,proto3" json:"table_def,omitempty"`
	ObjRef       *ObjectRef     `protobuf:"bytes,17,opt,name=obj_ref,json=objRef,proto3" json:"obj_ref,omitempty"`
	RowsetData   *RowsetData    `protobuf:"bytes,18,opt,name=rowset_data,json=rowsetData,proto3" json:"rowset_data,omitempty"`
	ExtraOptions string         `protobuf:"bytes,19,opt,name=extra_options,json=extraOptions,proto3" json:"extra_options,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{19}
}

func (x *Node) GetNodeType() Node_NodeType {
	if x != nil {
		return x.NodeType
	}
	return Node_UNKNOWN
}

func (x *Node) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Node) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Node) GetProjectList() []*Expr {
	if x != nil {
		return x.ProjectList
	}
	return nil
}

func (x *Node) GetChildren() []int32 {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Node) GetJoinType() Node_JoinFlag {
	if x != nil {
		return x.JoinType
	}
	return Node_INNER
}

func (x *Node) GetOnList() []*Expr {
	if x != nil {
		return x.OnList
	}
	return nil
}

func (x *Node) GetWhereList() []*Expr {
	if x != nil {
		return x.WhereList
	}
	return nil
}

func (x *Node) GetGroupBy() []*Expr {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *Node) GetGroupingSet() []*Expr {
	if x != nil {
		return x.GroupingSet
	}
	return nil
}

func (x *Node) GetOrderBy() []*OrderBySpec {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *Node) GetUpdateList() *UpdateList {
	if x != nil {
		return x.UpdateList
	}
	return nil
}

func (x *Node) GetWinSpec() *WindowSpec {
	if x != nil {
		return x.WinSpec
	}
	return nil
}

func (x *Node) GetLimit() *Expr {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *Node) GetOffset() *Expr {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *Node) GetTableDef() *TableDef {
	if x != nil {
		return x.TableDef
	}
	return nil
}

func (x *Node) GetObjRef() *ObjectRef {
	if x != nil {
		return x.ObjRef
	}
	return nil
}

func (x *Node) GetRowsetData() *RowsetData {
	if x != nil {
		return x.RowsetData
	}
	return nil
}

func (x *Node) GetExtraOptions() string {
	if x != nil {
		return x.ExtraOptions
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StmtType Query_StatementType `protobuf:"varint,1,opt,name=stmt_type,json=stmtType,proto3,enum=Query_StatementType" json:"stmt_type,omitempty"`
	// Each step is simply a root node.  Root node refers to other
	// node as children and the whole step is a DAG.
	Steps []int32 `protobuf:"varint,2,rep,packed,name=steps,proto3" json:"steps,omitempty"`
	// All the nodes.  It is OK to have dangle nodes, we only excute nodes
	// reachable from step roots.
	Nodes []*Node `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Bound Parameter for the query.
	Params []*Expr `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plan_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_plan_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_plan_proto_rawDescGZIP(), []int{20}
}

func (x *Query) GetStmtType() Query_StatementType {
	if x != nil {
		return x.StmtType
	}
	return Query_UNKNOWN
}

func (x *Query) GetSteps() []int32 {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Query) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Query) GetParams() []*Expr {
	if x != nil {
		return x.Params
	}
	return nil
}

var File_plan_proto protoreflect.FileDescriptor

var file_plan_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x05, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x04, 0x0a, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x4e, 0x54, 0x38, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x15,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4e, 0x54, 0x36, 0x34, 0x10, 0x17, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x54, 0x31, 0x32, 0x38,
	0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x19, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e,
	0x54, 0x33, 0x32, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10,
	0x1c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x32, 0x38, 0x10, 0x1d, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x43, 0x49,
	0x4d, 0x41, 0x4c, 0x36, 0x34, 0x10, 0x20, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x43, 0x49, 0x4d,
	0x41, 0x4c, 0x31, 0x32, 0x38, 0x10, 0x21, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d,
	0x41, 0x4c, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4e, 0x59, 0x49, 0x4e, 0x54, 0x10, 0x25,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x59, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x26, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4e, 0x59, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x27, 0x12, 0x08, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x28, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x42, 0x31, 0x36, 0x30,
	0x10, 0x29, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x42, 0x31, 0x38, 0x34, 0x10, 0x2a, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x42, 0x31, 0x39, 0x32, 0x10, 0x2b, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x42, 0x32, 0x32,
	0x34, 0x10, 0x2c, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x42, 0x32, 0x35, 0x36, 0x10, 0x2d, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x32, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x33, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x34,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x35, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x36, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x4e, 0x59, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x3b, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48,
	0x41, 0x52, 0x10, 0x3c, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x10,
	0x3d, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x3e, 0x12, 0x0a, 0x0a, 0x06, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x46, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x52, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x47, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10,
	0x5a, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x45, 0x58, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10,
	0x5b, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x59, 0x54, 0x45, 0x41, 0x38, 0x10, 0x64, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x59, 0x54, 0x45, 0x41, 0x31, 0x36, 0x10, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59,
	0x54, 0x45, 0x41, 0x10, 0x66, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x45, 0x4c, 0x10, 0xc8, 0x01, 0x12,
	0x0a, 0x0a, 0x05, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x10, 0xc9, 0x01, 0x22, 0x6a, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x04,
	0x69, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x69, 0x76,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x73, 0x76, 0x61, 0x6c, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1c, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x56, 0x61, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x50, 0x6f, 0x73, 0x22, 0x6b, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x43, 0x6f, 0x6c, 0x52, 0x65,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x25, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x22, 0xd3,
	0x01, 0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x64, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x62, 0x6a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x62, 0x6a,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x62, 0x6a,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x04, 0x66, 0x75, 0x6e,
	0x63, 0x12, 0x19, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8f, 0x01, 0x0a,
	0x08, 0x46, 0x75, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x56, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x20, 0x12, 0x0a,
	0x0a, 0x06, 0x56, 0x41, 0x52, 0x41, 0x52, 0x47, 0x10, 0x40, 0x12, 0x08, 0x0a, 0x03, 0x41, 0x47,
	0x47, 0x10, 0x80, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x57, 0x49, 0x4e, 0x10, 0x80, 0x02, 0x22, 0xa4,
	0x02, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x17, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x48, 0x00, 0x52, 0x01, 0x63, 0x12, 0x19,
	0x0a, 0x01, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x01, 0x70, 0x12, 0x17, 0x0a, 0x01, 0x76, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x01, 0x76, 0x12, 0x1b, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x43, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12,
	0x19, 0x0a, 0x01, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x01, 0x66, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x73,
	0x75, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f,
	0x72, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x43,
	0x6f, 0x6c, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x4b, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x66, 0x12,
	0x17, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6b, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6b, 0x69,
	0x64, 0x78, 0x22, 0x3b, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x66, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x22,
	0x72, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x6f, 0x77, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x6f,
	0x77, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x64, 0x76, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6e, 0x64, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x75, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x75, 0x6c, 0x6c,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03,
	0x69, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x73, 0x22, 0x4d, 0x0a, 0x0a, 0x52, 0x6f, 0x77, 0x73, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x5b, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x55,
	0x4c, 0x4c, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x10, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x27,
	0x0a, 0x08, 0x6f, 0x64, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07,
	0x6f, 0x64, 0x65, 0x72, 0x79, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x61, 0x67, 0x22, 0x4c, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xca, 0x09, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x06, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x09, 0x77, 0x68, 0x65, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x12, 0x28, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x07, 0x77, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x66, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x12, 0x23, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x52,
	0x65, 0x66, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x41, 0x4e,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53,
	0x43, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45,
	0x43, 0x55, 0x52, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x54, 0x45, 0x10, 0x15, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x49, 0x4e, 0x4b, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x43, 0x41, 0x4e, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x47, 0x47, 0x10, 0x1e, 0x12,
	0x08, 0x0a, 0x04, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x41, 0x4d,
	0x50, 0x4c, 0x45, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x21, 0x12,
	0x09, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x22, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x49,
	0x51, 0x55, 0x45, 0x10, 0x24, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10,
	0x25, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x28,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10, 0x29, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x2a, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x53, 0x45, 0x52,
	0x54, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x33, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x34, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x35, 0x22, 0x55, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4d,
	0x49, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x4e, 0x54, 0x49, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x52,
	0x4b, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x20, 0x22, 0x28,
	0x0a, 0x07, 0x41, 0x67, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x22, 0xe5, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x74, 0x6d, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x6d,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x57, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x05,
	0x2a, 0x56, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x05, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plan_proto_rawDescOnce sync.Once
	file_plan_proto_rawDescData = file_plan_proto_rawDesc
)

func file_plan_proto_rawDescGZIP() []byte {
	file_plan_proto_rawDescOnce.Do(func() {
		file_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_plan_proto_rawDescData)
	})
	return file_plan_proto_rawDescData
}

var file_plan_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_plan_proto_goTypes = []interface{}{
	(StatementType)(0),           // 0: StatementType
	(Type_TypeId)(0),             // 1: Type.TypeId
	(Function_FuncFlag)(0),       // 2: Function.FuncFlag
	(OrderBySpec_OrderByFlag)(0), // 3: OrderBySpec.OrderByFlag
	(Node_NodeType)(0),           // 4: Node.NodeType
	(Node_JoinFlag)(0),           // 5: Node.JoinFlag
	(Node_AggMode)(0),            // 6: Node.AggMode
	(Query_StatementType)(0),     // 7: Query.StatementType
	(*Type)(nil),                 // 8: Type
	(*Const)(nil),                // 9: Const
	(*ParamRef)(nil),             // 10: ParamRef
	(*VarRef)(nil),               // 11: VarRef
	(*ColRef)(nil),               // 12: ColRef
	(*CorrColRef)(nil),           // 13: CorrColRef
	(*ExprList)(nil),             // 14: ExprList
	(*SubQuery)(nil),             // 15: SubQuery
	(*ObjectRef)(nil),            // 16: ObjectRef
	(*Function)(nil),             // 17: Function
	(*Expr)(nil),                 // 18: Expr
	(*ColDef)(nil),               // 19: ColDef
	(*TableDef)(nil),             // 20: TableDef
	(*Cost)(nil),                 // 21: Cost
	(*ColData)(nil),              // 22: ColData
	(*RowsetData)(nil),           // 23: RowsetData
	(*OrderBySpec)(nil),          // 24: OrderBySpec
	(*WindowSpec)(nil),           // 25: WindowSpec
	(*UpdateList)(nil),           // 26: UpdateList
	(*Node)(nil),                 // 27: Node
	(*Query)(nil),                // 28: Query
}
var file_plan_proto_depIdxs = []int32{
	1,  // 0: Type.id:type_name -> Type.TypeId
	18, // 1: ExprList.list:type_name -> Expr
	16, // 2: Function.func:type_name -> ObjectRef
	18, // 3: Function.args:type_name -> Expr
	8,  // 4: Expr.typ:type_name -> Type
	9,  // 5: Expr.c:type_name -> Const
	10, // 6: Expr.p:type_name -> ParamRef
	11, // 7: Expr.v:type_name -> VarRef
	12, // 8: Expr.col:type_name -> ColRef
	17, // 9: Expr.f:type_name -> Function
	14, // 10: Expr.list:type_name -> ExprList
	15, // 11: Expr.sub:type_name -> SubQuery
	13, // 12: Expr.corr:type_name -> CorrColRef
	8,  // 13: ColDef.typ:type_name -> Type
	19, // 14: TableDef.cols:type_name -> ColDef
	20, // 15: RowsetData.schema:type_name -> TableDef
	22, // 16: RowsetData.cols:type_name -> ColData
	18, // 17: OrderBySpec.order_by:type_name -> Expr
	3,  // 18: OrderBySpec.order_by_flags:type_name -> OrderBySpec.OrderByFlag
	18, // 19: WindowSpec.partition_by:type_name -> Expr
	24, // 20: WindowSpec.odery_by:type_name -> OrderBySpec
	18, // 21: UpdateList.columns:type_name -> Expr
	18, // 22: UpdateList.values:type_name -> Expr
	4,  // 23: Node.node_type:type_name -> Node.NodeType
	21, // 24: Node.cost:type_name -> Cost
	18, // 25: Node.project_list:type_name -> Expr
	5,  // 26: Node.join_type:type_name -> Node.JoinFlag
	18, // 27: Node.on_list:type_name -> Expr
	18, // 28: Node.where_list:type_name -> Expr
	18, // 29: Node.group_by:type_name -> Expr
	18, // 30: Node.grouping_set:type_name -> Expr
	24, // 31: Node.order_by:type_name -> OrderBySpec
	26, // 32: Node.update_list:type_name -> UpdateList
	25, // 33: Node.win_spec:type_name -> WindowSpec
	18, // 34: Node.limit:type_name -> Expr
	18, // 35: Node.offset:type_name -> Expr
	20, // 36: Node.table_def:type_name -> TableDef
	16, // 37: Node.obj_ref:type_name -> ObjectRef
	23, // 38: Node.rowset_data:type_name -> RowsetData
	7,  // 39: Query.stmt_type:type_name -> Query.StatementType
	27, // 40: Query.nodes:type_name -> Node
	18, // 41: Query.params:type_name -> Expr
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_plan_proto_init() }
func file_plan_proto_init() {
	if File_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Const); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrColRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExprList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowsetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plan_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plan_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Const_Ival)(nil),
		(*Const_Dval)(nil),
		(*Const_Sval)(nil),
	}
	file_plan_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Expr_C)(nil),
		(*Expr_P)(nil),
		(*Expr_V)(nil),
		(*Expr_Col)(nil),
		(*Expr_F)(nil),
		(*Expr_List)(nil),
		(*Expr_Sub)(nil),
		(*Expr_Corr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plan_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plan_proto_goTypes,
		DependencyIndexes: file_plan_proto_depIdxs,
		EnumInfos:         file_plan_proto_enumTypes,
		MessageInfos:      file_plan_proto_msgTypes,
	}.Build()
	File_plan_proto = out.File
	file_plan_proto_rawDesc = nil
	file_plan_proto_goTypes = nil
	file_plan_proto_depIdxs = nil
}
