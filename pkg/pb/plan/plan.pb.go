// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plan.proto

package plan

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatementType int32

const (
	StatementType_UNKNOW StatementType = 0
	StatementType_SELECT StatementType = 1
	StatementType_INSERT StatementType = 2
	StatementType_DELETE StatementType = 3
	StatementType_UPDATE StatementType = 4
	StatementType_MERGE  StatementType = 5
)

var StatementType_name = map[int32]string{
	0: "UNKNOW",
	1: "SELECT",
	2: "INSERT",
	3: "DELETE",
	4: "UPDATE",
	5: "MERGE",
}

var StatementType_value = map[string]int32{
	"UNKNOW": 0,
	"SELECT": 1,
	"INSERT": 2,
	"DELETE": 3,
	"UPDATE": 4,
	"MERGE":  5,
}

func (x StatementType) String() string {
	return proto.EnumName(StatementType_name, int32(x))
}

func (StatementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{0}
}

type Type_TypeId int32

const (
	Type_ANY  Type_TypeId = 0
	Type_STAR Type_TypeId = 1
	Type_BOOL Type_TypeId = 10
	// INTs
	Type_INT8   Type_TypeId = 20
	Type_INT16  Type_TypeId = 21
	Type_INT32  Type_TypeId = 22
	Type_INT64  Type_TypeId = 23
	Type_INT128 Type_TypeId = 24
	// UINT are mysql quirks.
	Type_UINT8      Type_TypeId = 25
	Type_UINT16     Type_TypeId = 26
	Type_UINT32     Type_TypeId = 27
	Type_UINT64     Type_TypeId = 28
	Type_UINT128    Type_TypeId = 29
	Type_FLOAT32    Type_TypeId = 30
	Type_FLOAT64    Type_TypeId = 31
	Type_DECIMAL64  Type_TypeId = 32
	Type_DECIMAL128 Type_TypeId = 33
	Type_DECIMAL    Type_TypeId = 34
	Type_ANYINT     Type_TypeId = 37
	Type_ANYFLOAT   Type_TypeId = 38
	Type_ANYNUMBER  Type_TypeId = 39
	// Some special small (<= 32 bytes) fixed len types that worth optimize
	Type_UUID  Type_TypeId = 40
	Type_UB160 Type_TypeId = 41
	Type_UB184 Type_TypeId = 42
	Type_UB192 Type_TypeId = 43
	Type_UB224 Type_TypeId = 44
	Type_UB256 Type_TypeId = 45
	// Time
	Type_DATE      Type_TypeId = 50
	Type_TIME      Type_TypeId = 51
	Type_DATETIME  Type_TypeId = 52
	Type_TIMESTAMP Type_TypeId = 53
	Type_INTERVAL  Type_TypeId = 54
	Type_ANYTIME   Type_TypeId = 59
	// Strings and binaries
	Type_CHAR      Type_TypeId = 60
	Type_VARCHAR   Type_TypeId = 61
	Type_JSON      Type_TypeId = 62
	Type_BINARY    Type_TypeId = 70
	Type_VARBINARY Type_TypeId = 71
	// Special
	Type_ARRAY      Type_TypeId = 90
	Type_FLEXBUFFER Type_TypeId = 91
	// Physical for varlen
	Type_BYTEA8  Type_TypeId = 100
	Type_BYTEA16 Type_TypeId = 101
	Type_BYTEA   Type_TypeId = 102
	// MO Special, not sure if we really need these.
	Type_SEL   Type_TypeId = 200
	Type_TUPLE Type_TypeId = 201
)

var Type_TypeId_name = map[int32]string{
	0:   "ANY",
	1:   "STAR",
	10:  "BOOL",
	20:  "INT8",
	21:  "INT16",
	22:  "INT32",
	23:  "INT64",
	24:  "INT128",
	25:  "UINT8",
	26:  "UINT16",
	27:  "UINT32",
	28:  "UINT64",
	29:  "UINT128",
	30:  "FLOAT32",
	31:  "FLOAT64",
	32:  "DECIMAL64",
	33:  "DECIMAL128",
	34:  "DECIMAL",
	37:  "ANYINT",
	38:  "ANYFLOAT",
	39:  "ANYNUMBER",
	40:  "UUID",
	41:  "UB160",
	42:  "UB184",
	43:  "UB192",
	44:  "UB224",
	45:  "UB256",
	50:  "DATE",
	51:  "TIME",
	52:  "DATETIME",
	53:  "TIMESTAMP",
	54:  "INTERVAL",
	59:  "ANYTIME",
	60:  "CHAR",
	61:  "VARCHAR",
	62:  "JSON",
	70:  "BINARY",
	71:  "VARBINARY",
	90:  "ARRAY",
	91:  "FLEXBUFFER",
	100: "BYTEA8",
	101: "BYTEA16",
	102: "BYTEA",
	200: "SEL",
	201: "TUPLE",
}

var Type_TypeId_value = map[string]int32{
	"ANY":        0,
	"STAR":       1,
	"BOOL":       10,
	"INT8":       20,
	"INT16":      21,
	"INT32":      22,
	"INT64":      23,
	"INT128":     24,
	"UINT8":      25,
	"UINT16":     26,
	"UINT32":     27,
	"UINT64":     28,
	"UINT128":    29,
	"FLOAT32":    30,
	"FLOAT64":    31,
	"DECIMAL64":  32,
	"DECIMAL128": 33,
	"DECIMAL":    34,
	"ANYINT":     37,
	"ANYFLOAT":   38,
	"ANYNUMBER":  39,
	"UUID":       40,
	"UB160":      41,
	"UB184":      42,
	"UB192":      43,
	"UB224":      44,
	"UB256":      45,
	"DATE":       50,
	"TIME":       51,
	"DATETIME":   52,
	"TIMESTAMP":  53,
	"INTERVAL":   54,
	"ANYTIME":    59,
	"CHAR":       60,
	"VARCHAR":    61,
	"JSON":       62,
	"BINARY":     70,
	"VARBINARY":  71,
	"ARRAY":      90,
	"FLEXBUFFER": 91,
	"BYTEA8":     100,
	"BYTEA16":    101,
	"BYTEA":      102,
	"SEL":        200,
	"TUPLE":      201,
}

func (x Type_TypeId) String() string {
	return proto.EnumName(Type_TypeId_name, int32(x))
}

func (Type_TypeId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{0, 0}
}

// Function flags
type Function_FuncFlag int32

const (
	Function_NONE Function_FuncFlag = 0
	// Internal function is generated by system, cannot
	// by called by user.
	Function_INTERNAL Function_FuncFlag = 1
	// Function, by default is immutable.
	Function_STABLE   Function_FuncFlag = 2
	Function_VOLATILE Function_FuncFlag = 4
	// Nulls
	Function_STRICT          Function_FuncFlag = 8
	Function_PRODUCE_NULL    Function_FuncFlag = 16
	Function_PRODUCE_NO_NULL Function_FuncFlag = 32
	// Vararg, all trailing args must be of the same type.
	Function_VARARG Function_FuncFlag = 64
	// Window and Agg
	Function_AGG Function_FuncFlag = 128
	Function_WIN Function_FuncFlag = 256
)

var Function_FuncFlag_name = map[int32]string{
	0:   "NONE",
	1:   "INTERNAL",
	2:   "STABLE",
	4:   "VOLATILE",
	8:   "STRICT",
	16:  "PRODUCE_NULL",
	32:  "PRODUCE_NO_NULL",
	64:  "VARARG",
	128: "AGG",
	256: "WIN",
}

var Function_FuncFlag_value = map[string]int32{
	"NONE":            0,
	"INTERNAL":        1,
	"STABLE":          2,
	"VOLATILE":        4,
	"STRICT":          8,
	"PRODUCE_NULL":    16,
	"PRODUCE_NO_NULL": 32,
	"VARARG":          64,
	"AGG":             128,
	"WIN":             256,
}

func (x Function_FuncFlag) String() string {
	return proto.EnumName(Function_FuncFlag_name, int32(x))
}

func (Function_FuncFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{6, 0}
}

type OrderBySpec_OrderByFlag int32

const (
	OrderBySpec_ASC         OrderBySpec_OrderByFlag = 0
	OrderBySpec_DESC        OrderBySpec_OrderByFlag = 1
	OrderBySpec_NULLS_FIRST OrderBySpec_OrderByFlag = 2
	OrderBySpec_NULLS_LAST  OrderBySpec_OrderByFlag = 4
	OrderBySpec_UNIQUE      OrderBySpec_OrderByFlag = 8
	OrderBySpec_INTERNAL    OrderBySpec_OrderByFlag = 16
)

var OrderBySpec_OrderByFlag_name = map[int32]string{
	0:  "ASC",
	1:  "DESC",
	2:  "NULLS_FIRST",
	4:  "NULLS_LAST",
	8:  "UNIQUE",
	16: "INTERNAL",
}

var OrderBySpec_OrderByFlag_value = map[string]int32{
	"ASC":         0,
	"DESC":        1,
	"NULLS_FIRST": 2,
	"NULLS_LAST":  4,
	"UNIQUE":      8,
	"INTERNAL":    16,
}

func (x OrderBySpec_OrderByFlag) String() string {
	return proto.EnumName(OrderBySpec_OrderByFlag_name, int32(x))
}

func (OrderBySpec_OrderByFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{13, 0}
}

type Node_NodeType int32

const (
	Node_UNKNOWN Node_NodeType = 0
	// Scans
	Node_VALUE_SCAN    Node_NodeType = 1
	Node_TABLE_SCAN    Node_NodeType = 2
	Node_FUNCTION_SCAN Node_NodeType = 3
	Node_EXTERNAL_SCAN Node_NodeType = 4
	// Proj, for convinience
	Node_PROJECT Node_NodeType = 10
	// External function call (UDF)
	Node_EXTERNAL_FUNCTION Node_NodeType = 11
	// Matrial, CTE, etc.
	Node_MATERIAL      Node_NodeType = 20
	Node_RECURSIVE_CTE Node_NodeType = 21
	Node_SINK          Node_NodeType = 22
	Node_SINK_SCAN     Node_NodeType = 23
	// Proper Relational Operators
	Node_AGG       Node_NodeType = 30
	Node_JOIN      Node_NodeType = 31
	Node_SAMPLE    Node_NodeType = 32
	Node_SORT      Node_NodeType = 33
	Node_UNION     Node_NodeType = 34
	Node_UNION_ALL Node_NodeType = 35
	Node_UNIQUE    Node_NodeType = 36
	Node_WINDOW    Node_NodeType = 37
	// Physical tuple mover
	Node_BROADCAST Node_NodeType = 40
	Node_SPLIT     Node_NodeType = 41
	Node_GATHER    Node_NodeType = 42
	// Misc
	Node_ASSERT Node_NodeType = 50
)

var Node_NodeType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "VALUE_SCAN",
	2:  "TABLE_SCAN",
	3:  "FUNCTION_SCAN",
	4:  "EXTERNAL_SCAN",
	10: "PROJECT",
	11: "EXTERNAL_FUNCTION",
	20: "MATERIAL",
	21: "RECURSIVE_CTE",
	22: "SINK",
	23: "SINK_SCAN",
	30: "AGG",
	31: "JOIN",
	32: "SAMPLE",
	33: "SORT",
	34: "UNION",
	35: "UNION_ALL",
	36: "UNIQUE",
	37: "WINDOW",
	40: "BROADCAST",
	41: "SPLIT",
	42: "GATHER",
	50: "ASSERT",
}

var Node_NodeType_value = map[string]int32{
	"UNKNOWN":           0,
	"VALUE_SCAN":        1,
	"TABLE_SCAN":        2,
	"FUNCTION_SCAN":     3,
	"EXTERNAL_SCAN":     4,
	"PROJECT":           10,
	"EXTERNAL_FUNCTION": 11,
	"MATERIAL":          20,
	"RECURSIVE_CTE":     21,
	"SINK":              22,
	"SINK_SCAN":         23,
	"AGG":               30,
	"JOIN":              31,
	"SAMPLE":            32,
	"SORT":              33,
	"UNION":             34,
	"UNION_ALL":         35,
	"UNIQUE":            36,
	"WINDOW":            37,
	"BROADCAST":         40,
	"SPLIT":             41,
	"GATHER":            42,
	"ASSERT":            50,
}

func (x Node_NodeType) String() string {
	return proto.EnumName(Node_NodeType_name, int32(x))
}

func (Node_NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{15, 0}
}

type Node_JoinFlag int32

const (
	Node_INNER  Node_JoinFlag = 0
	Node_OUTER  Node_JoinFlag = 1
	Node_SEMI   Node_JoinFlag = 2
	Node_ANTI   Node_JoinFlag = 4
	Node_SINGLE Node_JoinFlag = 8
	Node_MARK   Node_JoinFlag = 16
	Node_APPLY  Node_JoinFlag = 32
)

var Node_JoinFlag_name = map[int32]string{
	0:  "INNER",
	1:  "OUTER",
	2:  "SEMI",
	4:  "ANTI",
	8:  "SINGLE",
	16: "MARK",
	32: "APPLY",
}

var Node_JoinFlag_value = map[string]int32{
	"INNER":  0,
	"OUTER":  1,
	"SEMI":   2,
	"ANTI":   4,
	"SINGLE": 8,
	"MARK":   16,
	"APPLY":  32,
}

func (x Node_JoinFlag) String() string {
	return proto.EnumName(Node_JoinFlag_name, int32(x))
}

func (Node_JoinFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{15, 1}
}

type Node_AggMode int32

const (
	Node_FULL   Node_AggMode = 0
	Node_BOTTOM Node_AggMode = 1
	Node_TOP    Node_AggMode = 2
)

var Node_AggMode_name = map[int32]string{
	0: "FULL",
	1: "BOTTOM",
	2: "TOP",
}

var Node_AggMode_value = map[string]int32{
	"FULL":   0,
	"BOTTOM": 1,
	"TOP":    2,
}

func (x Node_AggMode) String() string {
	return proto.EnumName(Node_AggMode_name, int32(x))
}

func (Node_AggMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{15, 2}
}

type Query_StatementType int32

const (
	Query_UNKNOWN Query_StatementType = 0
	Query_SELECT  Query_StatementType = 1
	Query_INSERT  Query_StatementType = 2
	Query_DELETE  Query_StatementType = 3
	Query_UPDATE  Query_StatementType = 4
	Query_MERGE   Query_StatementType = 5
)

var Query_StatementType_name = map[int32]string{
	0: "UNKNOWN",
	1: "SELECT",
	2: "INSERT",
	3: "DELETE",
	4: "UPDATE",
	5: "MERGE",
}

var Query_StatementType_value = map[string]int32{
	"UNKNOWN": 0,
	"SELECT":  1,
	"INSERT":  2,
	"DELETE":  3,
	"UPDATE":  4,
	"MERGE":   5,
}

func (x Query_StatementType) String() string {
	return proto.EnumName(Query_StatementType_name, int32(x))
}

func (Query_StatementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{16, 0}
}

type Type struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nullable             bool     `protobuf:"varint,2,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Width                int32    `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Precision            int32    `protobuf:"varint,4,opt,name=precision,proto3" json:"precision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Type) Reset()         { *m = Type{} }
func (m *Type) String() string { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()    {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{0}
}

func (m *Type) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Type.Unmarshal(m, b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Type.Marshal(b, m, deterministic)
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return xxx_messageInfo_Type.Size(m)
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

func (m *Type) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Type) GetNullable() bool {
	if m != nil {
		return m.Nullable
	}
	return false
}

func (m *Type) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Type) GetPrecision() int32 {
	if m != nil {
		return m.Precision
	}
	return 0
}

// Const: if a const value can be reprensented by int64 or
// double, use that, otherwise store a string representation.
type Const struct {
	Isnull bool `protobuf:"varint,1,opt,name=isnull,proto3" json:"isnull,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Const_Ival
	//	*Const_Dval
	//	*Const_Sval
	Value                isConst_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Const) Reset()         { *m = Const{} }
func (m *Const) String() string { return proto.CompactTextString(m) }
func (*Const) ProtoMessage()    {}
func (*Const) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{1}
}

func (m *Const) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Const.Unmarshal(m, b)
}
func (m *Const) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Const.Marshal(b, m, deterministic)
}
func (m *Const) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Const.Merge(m, src)
}
func (m *Const) XXX_Size() int {
	return xxx_messageInfo_Const.Size(m)
}
func (m *Const) XXX_DiscardUnknown() {
	xxx_messageInfo_Const.DiscardUnknown(m)
}

var xxx_messageInfo_Const proto.InternalMessageInfo

func (m *Const) GetIsnull() bool {
	if m != nil {
		return m.Isnull
	}
	return false
}

type isConst_Value interface {
	isConst_Value()
}

type Const_Ival struct {
	Ival int64 `protobuf:"varint,2,opt,name=ival,proto3,oneof"`
}

type Const_Dval struct {
	Dval float64 `protobuf:"fixed64,3,opt,name=dval,proto3,oneof"`
}

type Const_Sval struct {
	Sval string `protobuf:"bytes,4,opt,name=sval,proto3,oneof"`
}

func (*Const_Ival) isConst_Value() {}

func (*Const_Dval) isConst_Value() {}

func (*Const_Sval) isConst_Value() {}

func (m *Const) GetValue() isConst_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Const) GetIval() int64 {
	if x, ok := m.GetValue().(*Const_Ival); ok {
		return x.Ival
	}
	return 0
}

func (m *Const) GetDval() float64 {
	if x, ok := m.GetValue().(*Const_Dval); ok {
		return x.Dval
	}
	return 0
}

func (m *Const) GetSval() string {
	if x, ok := m.GetValue().(*Const_Sval); ok {
		return x.Sval
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Const) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Const_Ival)(nil),
		(*Const_Dval)(nil),
		(*Const_Sval)(nil),
	}
}

// Bounded param for prepared statement.  User fill on execution.
type ParamRef struct {
	Pos                  int32    `protobuf:"varint,1,opt,name=pos,proto3" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParamRef) Reset()         { *m = ParamRef{} }
func (m *ParamRef) String() string { return proto.CompactTextString(m) }
func (*ParamRef) ProtoMessage()    {}
func (*ParamRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{2}
}

func (m *ParamRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParamRef.Unmarshal(m, b)
}
func (m *ParamRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParamRef.Marshal(b, m, deterministic)
}
func (m *ParamRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamRef.Merge(m, src)
}
func (m *ParamRef) XXX_Size() int {
	return xxx_messageInfo_ParamRef.Size(m)
}
func (m *ParamRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamRef.DiscardUnknown(m)
}

var xxx_messageInfo_ParamRef proto.InternalMessageInfo

func (m *ParamRef) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

// Session variable ref, compiler should fold.
type VarRef struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VarRef) Reset()         { *m = VarRef{} }
func (m *VarRef) String() string { return proto.CompactTextString(m) }
func (*VarRef) ProtoMessage()    {}
func (*VarRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{3}
}

func (m *VarRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VarRef.Unmarshal(m, b)
}
func (m *VarRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VarRef.Marshal(b, m, deterministic)
}
func (m *VarRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VarRef.Merge(m, src)
}
func (m *VarRef) XXX_Size() int {
	return xxx_messageInfo_VarRef.Size(m)
}
func (m *VarRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VarRef.DiscardUnknown(m)
}

var xxx_messageInfo_VarRef proto.InternalMessageInfo

func (m *VarRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Reference a column in the proj list of a node.
type ColRef struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RelPos               int32    `protobuf:"varint,2,opt,name=rel_pos,json=relPos,proto3" json:"rel_pos,omitempty"`
	ColPos               int32    `protobuf:"varint,3,opt,name=col_pos,json=colPos,proto3" json:"col_pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColRef) Reset()         { *m = ColRef{} }
func (m *ColRef) String() string { return proto.CompactTextString(m) }
func (*ColRef) ProtoMessage()    {}
func (*ColRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{4}
}

func (m *ColRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColRef.Unmarshal(m, b)
}
func (m *ColRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColRef.Marshal(b, m, deterministic)
}
func (m *ColRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColRef.Merge(m, src)
}
func (m *ColRef) XXX_Size() int {
	return xxx_messageInfo_ColRef.Size(m)
}
func (m *ColRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ColRef.DiscardUnknown(m)
}

var xxx_messageInfo_ColRef proto.InternalMessageInfo

func (m *ColRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColRef) GetRelPos() int32 {
	if m != nil {
		return m.RelPos
	}
	return 0
}

func (m *ColRef) GetColPos() int32 {
	if m != nil {
		return m.ColPos
	}
	return 0
}

// Object ref, reference a object in database, 4 part name.
type ObjectRef struct {
	Server               int64    `protobuf:"varint,1,opt,name=server,proto3" json:"server,omitempty"`
	Db                   int64    `protobuf:"varint,2,opt,name=db,proto3" json:"db,omitempty"`
	Schema               int64    `protobuf:"varint,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Obj                  int64    `protobuf:"varint,4,opt,name=obj,proto3" json:"obj,omitempty"`
	ServerName           string   `protobuf:"bytes,5,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	DbName               string   `protobuf:"bytes,6,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	SchemaName           string   `protobuf:"bytes,7,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	ObjName              string   `protobuf:"bytes,8,opt,name=obj_name,json=objName,proto3" json:"obj_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectRef) Reset()         { *m = ObjectRef{} }
func (m *ObjectRef) String() string { return proto.CompactTextString(m) }
func (*ObjectRef) ProtoMessage()    {}
func (*ObjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{5}
}

func (m *ObjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectRef.Unmarshal(m, b)
}
func (m *ObjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectRef.Marshal(b, m, deterministic)
}
func (m *ObjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectRef.Merge(m, src)
}
func (m *ObjectRef) XXX_Size() int {
	return xxx_messageInfo_ObjectRef.Size(m)
}
func (m *ObjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectRef proto.InternalMessageInfo

func (m *ObjectRef) GetServer() int64 {
	if m != nil {
		return m.Server
	}
	return 0
}

func (m *ObjectRef) GetDb() int64 {
	if m != nil {
		return m.Db
	}
	return 0
}

func (m *ObjectRef) GetSchema() int64 {
	if m != nil {
		return m.Schema
	}
	return 0
}

func (m *ObjectRef) GetObj() int64 {
	if m != nil {
		return m.Obj
	}
	return 0
}

func (m *ObjectRef) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *ObjectRef) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *ObjectRef) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *ObjectRef) GetObjName() string {
	if m != nil {
		return m.ObjName
	}
	return ""
}

type Function struct {
	Func                 *ObjectRef `protobuf:"bytes,1,opt,name=func,proto3" json:"func,omitempty"`
	Args                 []*Expr    `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Function) Reset()         { *m = Function{} }
func (m *Function) String() string { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()    {}
func (*Function) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{6}
}

func (m *Function) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Function.Unmarshal(m, b)
}
func (m *Function) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Function.Marshal(b, m, deterministic)
}
func (m *Function) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Function.Merge(m, src)
}
func (m *Function) XXX_Size() int {
	return xxx_messageInfo_Function.Size(m)
}
func (m *Function) XXX_DiscardUnknown() {
	xxx_messageInfo_Function.DiscardUnknown(m)
}

var xxx_messageInfo_Function proto.InternalMessageInfo

func (m *Function) GetFunc() *ObjectRef {
	if m != nil {
		return m.Func
	}
	return nil
}

func (m *Function) GetArgs() []*Expr {
	if m != nil {
		return m.Args
	}
	return nil
}

type Expr struct {
	Typ *Type `protobuf:"bytes,1,opt,name=typ,proto3" json:"typ,omitempty"`
	// Types that are valid to be assigned to Expr:
	//	*Expr_C
	//	*Expr_P
	//	*Expr_V
	//	*Expr_Col
	//	*Expr_F
	Expr                 isExpr_Expr `protobuf_oneof:"expr"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Expr) Reset()         { *m = Expr{} }
func (m *Expr) String() string { return proto.CompactTextString(m) }
func (*Expr) ProtoMessage()    {}
func (*Expr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{7}
}

func (m *Expr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expr.Unmarshal(m, b)
}
func (m *Expr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expr.Marshal(b, m, deterministic)
}
func (m *Expr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expr.Merge(m, src)
}
func (m *Expr) XXX_Size() int {
	return xxx_messageInfo_Expr.Size(m)
}
func (m *Expr) XXX_DiscardUnknown() {
	xxx_messageInfo_Expr.DiscardUnknown(m)
}

var xxx_messageInfo_Expr proto.InternalMessageInfo

func (m *Expr) GetTyp() *Type {
	if m != nil {
		return m.Typ
	}
	return nil
}

type isExpr_Expr interface {
	isExpr_Expr()
}

type Expr_C struct {
	C *Const `protobuf:"bytes,2,opt,name=c,proto3,oneof"`
}

type Expr_P struct {
	P *ParamRef `protobuf:"bytes,3,opt,name=p,proto3,oneof"`
}

type Expr_V struct {
	V *VarRef `protobuf:"bytes,4,opt,name=v,proto3,oneof"`
}

type Expr_Col struct {
	Col *ColRef `protobuf:"bytes,5,opt,name=col,proto3,oneof"`
}

type Expr_F struct {
	F *Function `protobuf:"bytes,6,opt,name=f,proto3,oneof"`
}

func (*Expr_C) isExpr_Expr() {}

func (*Expr_P) isExpr_Expr() {}

func (*Expr_V) isExpr_Expr() {}

func (*Expr_Col) isExpr_Expr() {}

func (*Expr_F) isExpr_Expr() {}

func (m *Expr) GetExpr() isExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (m *Expr) GetC() *Const {
	if x, ok := m.GetExpr().(*Expr_C); ok {
		return x.C
	}
	return nil
}

func (m *Expr) GetP() *ParamRef {
	if x, ok := m.GetExpr().(*Expr_P); ok {
		return x.P
	}
	return nil
}

func (m *Expr) GetV() *VarRef {
	if x, ok := m.GetExpr().(*Expr_V); ok {
		return x.V
	}
	return nil
}

func (m *Expr) GetCol() *ColRef {
	if x, ok := m.GetExpr().(*Expr_Col); ok {
		return x.Col
	}
	return nil
}

func (m *Expr) GetF() *Function {
	if x, ok := m.GetExpr().(*Expr_F); ok {
		return x.F
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Expr) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Expr_C)(nil),
		(*Expr_P)(nil),
		(*Expr_V)(nil),
		(*Expr_Col)(nil),
		(*Expr_F)(nil),
	}
}

type ColDef struct {
	Typ                  *Type    `protobuf:"bytes,1,opt,name=typ,proto3" json:"typ,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pkidx                int32    `protobuf:"varint,3,opt,name=pkidx,proto3" json:"pkidx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColDef) Reset()         { *m = ColDef{} }
func (m *ColDef) String() string { return proto.CompactTextString(m) }
func (*ColDef) ProtoMessage()    {}
func (*ColDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{8}
}

func (m *ColDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColDef.Unmarshal(m, b)
}
func (m *ColDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColDef.Marshal(b, m, deterministic)
}
func (m *ColDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColDef.Merge(m, src)
}
func (m *ColDef) XXX_Size() int {
	return xxx_messageInfo_ColDef.Size(m)
}
func (m *ColDef) XXX_DiscardUnknown() {
	xxx_messageInfo_ColDef.DiscardUnknown(m)
}

var xxx_messageInfo_ColDef proto.InternalMessageInfo

func (m *ColDef) GetTyp() *Type {
	if m != nil {
		return m.Typ
	}
	return nil
}

func (m *ColDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColDef) GetPkidx() int32 {
	if m != nil {
		return m.Pkidx
	}
	return 0
}

type TableDef struct {
	Name                 string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cols                 []*ColDef `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TableDef) Reset()         { *m = TableDef{} }
func (m *TableDef) String() string { return proto.CompactTextString(m) }
func (*TableDef) ProtoMessage()    {}
func (*TableDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{9}
}

func (m *TableDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableDef.Unmarshal(m, b)
}
func (m *TableDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableDef.Marshal(b, m, deterministic)
}
func (m *TableDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDef.Merge(m, src)
}
func (m *TableDef) XXX_Size() int {
	return xxx_messageInfo_TableDef.Size(m)
}
func (m *TableDef) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDef.DiscardUnknown(m)
}

var xxx_messageInfo_TableDef proto.InternalMessageInfo

func (m *TableDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableDef) GetCols() []*ColDef {
	if m != nil {
		return m.Cols
	}
	return nil
}

type Cost struct {
	Card                 float64  `protobuf:"fixed64,1,opt,name=card,proto3" json:"card,omitempty"`
	Rowsize              float64  `protobuf:"fixed64,2,opt,name=rowsize,proto3" json:"rowsize,omitempty"`
	Ndv                  float64  `protobuf:"fixed64,3,opt,name=ndv,proto3" json:"ndv,omitempty"`
	Start                float64  `protobuf:"fixed64,4,opt,name=start,proto3" json:"start,omitempty"`
	Total                float64  `protobuf:"fixed64,5,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cost) Reset()         { *m = Cost{} }
func (m *Cost) String() string { return proto.CompactTextString(m) }
func (*Cost) ProtoMessage()    {}
func (*Cost) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{10}
}

func (m *Cost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cost.Unmarshal(m, b)
}
func (m *Cost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cost.Marshal(b, m, deterministic)
}
func (m *Cost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cost.Merge(m, src)
}
func (m *Cost) XXX_Size() int {
	return xxx_messageInfo_Cost.Size(m)
}
func (m *Cost) XXX_DiscardUnknown() {
	xxx_messageInfo_Cost.DiscardUnknown(m)
}

var xxx_messageInfo_Cost proto.InternalMessageInfo

func (m *Cost) GetCard() float64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *Cost) GetRowsize() float64 {
	if m != nil {
		return m.Rowsize
	}
	return 0
}

func (m *Cost) GetNdv() float64 {
	if m != nil {
		return m.Ndv
	}
	return 0
}

func (m *Cost) GetStart() float64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Cost) GetTotal() float64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ColData struct {
	RowCount             int32     `protobuf:"varint,1,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	NullCount            int32     `protobuf:"varint,2,opt,name=null_count,json=nullCount,proto3" json:"null_count,omitempty"`
	Nulls                []bool    `protobuf:"varint,3,rep,packed,name=nulls,proto3" json:"nulls,omitempty"`
	I32                  []int32   `protobuf:"varint,4,rep,packed,name=i32,proto3" json:"i32,omitempty"`
	I64                  []int64   `protobuf:"varint,5,rep,packed,name=i64,proto3" json:"i64,omitempty"`
	F32                  []float32 `protobuf:"fixed32,6,rep,packed,name=f32,proto3" json:"f32,omitempty"`
	F64                  []float64 `protobuf:"fixed64,7,rep,packed,name=f64,proto3" json:"f64,omitempty"`
	S                    []string  `protobuf:"bytes,8,rep,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ColData) Reset()         { *m = ColData{} }
func (m *ColData) String() string { return proto.CompactTextString(m) }
func (*ColData) ProtoMessage()    {}
func (*ColData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{11}
}

func (m *ColData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColData.Unmarshal(m, b)
}
func (m *ColData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColData.Marshal(b, m, deterministic)
}
func (m *ColData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColData.Merge(m, src)
}
func (m *ColData) XXX_Size() int {
	return xxx_messageInfo_ColData.Size(m)
}
func (m *ColData) XXX_DiscardUnknown() {
	xxx_messageInfo_ColData.DiscardUnknown(m)
}

var xxx_messageInfo_ColData proto.InternalMessageInfo

func (m *ColData) GetRowCount() int32 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

func (m *ColData) GetNullCount() int32 {
	if m != nil {
		return m.NullCount
	}
	return 0
}

func (m *ColData) GetNulls() []bool {
	if m != nil {
		return m.Nulls
	}
	return nil
}

func (m *ColData) GetI32() []int32 {
	if m != nil {
		return m.I32
	}
	return nil
}

func (m *ColData) GetI64() []int64 {
	if m != nil {
		return m.I64
	}
	return nil
}

func (m *ColData) GetF32() []float32 {
	if m != nil {
		return m.F32
	}
	return nil
}

func (m *ColData) GetF64() []float64 {
	if m != nil {
		return m.F64
	}
	return nil
}

func (m *ColData) GetS() []string {
	if m != nil {
		return m.S
	}
	return nil
}

type RowsetData struct {
	Schema               *TableDef  `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Cols                 []*ColData `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RowsetData) Reset()         { *m = RowsetData{} }
func (m *RowsetData) String() string { return proto.CompactTextString(m) }
func (*RowsetData) ProtoMessage()    {}
func (*RowsetData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{12}
}

func (m *RowsetData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowsetData.Unmarshal(m, b)
}
func (m *RowsetData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowsetData.Marshal(b, m, deterministic)
}
func (m *RowsetData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowsetData.Merge(m, src)
}
func (m *RowsetData) XXX_Size() int {
	return xxx_messageInfo_RowsetData.Size(m)
}
func (m *RowsetData) XXX_DiscardUnknown() {
	xxx_messageInfo_RowsetData.DiscardUnknown(m)
}

var xxx_messageInfo_RowsetData proto.InternalMessageInfo

func (m *RowsetData) GetSchema() *TableDef {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *RowsetData) GetCols() []*ColData {
	if m != nil {
		return m.Cols
	}
	return nil
}

type OrderBySpec struct {
	OrderBy              []*Expr                   `protobuf:"bytes,1,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	OrderByCollations    []int32                   `protobuf:"varint,2,rep,packed,name=order_by_collations,json=orderByCollations,proto3" json:"order_by_collations,omitempty"`
	OrderByFlags         []OrderBySpec_OrderByFlag `protobuf:"varint,3,rep,packed,name=order_by_flags,json=orderByFlags,proto3,enum=plan.OrderBySpec_OrderByFlag" json:"order_by_flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *OrderBySpec) Reset()         { *m = OrderBySpec{} }
func (m *OrderBySpec) String() string { return proto.CompactTextString(m) }
func (*OrderBySpec) ProtoMessage()    {}
func (*OrderBySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{13}
}

func (m *OrderBySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBySpec.Unmarshal(m, b)
}
func (m *OrderBySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBySpec.Marshal(b, m, deterministic)
}
func (m *OrderBySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBySpec.Merge(m, src)
}
func (m *OrderBySpec) XXX_Size() int {
	return xxx_messageInfo_OrderBySpec.Size(m)
}
func (m *OrderBySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBySpec.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBySpec proto.InternalMessageInfo

func (m *OrderBySpec) GetOrderBy() []*Expr {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *OrderBySpec) GetOrderByCollations() []int32 {
	if m != nil {
		return m.OrderByCollations
	}
	return nil
}

func (m *OrderBySpec) GetOrderByFlags() []OrderBySpec_OrderByFlag {
	if m != nil {
		return m.OrderByFlags
	}
	return nil
}

type WindowSpec struct {
	PartitionBy          []*Expr      `protobuf:"bytes,1,rep,name=partition_by,json=partitionBy,proto3" json:"partition_by,omitempty"`
	OderyBy              *OrderBySpec `protobuf:"bytes,2,opt,name=odery_by,json=oderyBy,proto3" json:"odery_by,omitempty"`
	Lead                 int32        `protobuf:"varint,3,opt,name=lead,proto3" json:"lead,omitempty"`
	Lag                  int32        `protobuf:"varint,4,opt,name=lag,proto3" json:"lag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *WindowSpec) Reset()         { *m = WindowSpec{} }
func (m *WindowSpec) String() string { return proto.CompactTextString(m) }
func (*WindowSpec) ProtoMessage()    {}
func (*WindowSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{14}
}

func (m *WindowSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WindowSpec.Unmarshal(m, b)
}
func (m *WindowSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WindowSpec.Marshal(b, m, deterministic)
}
func (m *WindowSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowSpec.Merge(m, src)
}
func (m *WindowSpec) XXX_Size() int {
	return xxx_messageInfo_WindowSpec.Size(m)
}
func (m *WindowSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WindowSpec proto.InternalMessageInfo

func (m *WindowSpec) GetPartitionBy() []*Expr {
	if m != nil {
		return m.PartitionBy
	}
	return nil
}

func (m *WindowSpec) GetOderyBy() *OrderBySpec {
	if m != nil {
		return m.OderyBy
	}
	return nil
}

func (m *WindowSpec) GetLead() int32 {
	if m != nil {
		return m.Lead
	}
	return 0
}

func (m *WindowSpec) GetLag() int32 {
	if m != nil {
		return m.Lag
	}
	return 0
}

type Node struct {
	NodeType             Node_NodeType `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=plan.Node_NodeType" json:"node_type,omitempty"`
	NodeId               int32         `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Cost                 *Cost         `protobuf:"bytes,3,opt,name=cost,proto3" json:"cost,omitempty"`
	ProjectList          []*Expr       `protobuf:"bytes,4,rep,name=project_list,json=projectList,proto3" json:"project_list,omitempty"`
	Children             []int32       `protobuf:"varint,5,rep,packed,name=children,proto3" json:"children,omitempty"`
	JoinType             Node_JoinFlag `protobuf:"varint,6,opt,name=join_type,json=joinType,proto3,enum=plan.Node_JoinFlag" json:"join_type,omitempty"`
	OnList               []*Expr       `protobuf:"bytes,7,rep,name=on_list,json=onList,proto3" json:"on_list,omitempty"`
	WhereList            []*Expr       `protobuf:"bytes,8,rep,name=where_list,json=whereList,proto3" json:"where_list,omitempty"`
	GroupBy              []*Expr       `protobuf:"bytes,9,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	GroupingSet          []*Expr       `protobuf:"bytes,10,rep,name=grouping_set,json=groupingSet,proto3" json:"grouping_set,omitempty"`
	OrderBy              *OrderBySpec  `protobuf:"bytes,11,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	WinSpec              *WindowSpec   `protobuf:"bytes,12,opt,name=win_spec,json=winSpec,proto3" json:"win_spec,omitempty"`
	Limit                *Expr         `protobuf:"bytes,13,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               *Expr         `protobuf:"bytes,14,opt,name=offset,proto3" json:"offset,omitempty"`
	TableDef             *TableDef     `protobuf:"bytes,15,opt,name=table_def,json=tableDef,proto3" json:"table_def,omitempty"`
	ObjRef               *ObjectRef    `protobuf:"bytes,16,opt,name=obj_ref,json=objRef,proto3" json:"obj_ref,omitempty"`
	RowsetData           *RowsetData   `protobuf:"bytes,17,opt,name=rowset_data,json=rowsetData,proto3" json:"rowset_data,omitempty"`
	ExtraOptions         string        `protobuf:"bytes,18,opt,name=extra_options,json=extraOptions,proto3" json:"extra_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{15}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetNodeType() Node_NodeType {
	if m != nil {
		return m.NodeType
	}
	return Node_UNKNOWN
}

func (m *Node) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Node) GetCost() *Cost {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *Node) GetProjectList() []*Expr {
	if m != nil {
		return m.ProjectList
	}
	return nil
}

func (m *Node) GetChildren() []int32 {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Node) GetJoinType() Node_JoinFlag {
	if m != nil {
		return m.JoinType
	}
	return Node_INNER
}

func (m *Node) GetOnList() []*Expr {
	if m != nil {
		return m.OnList
	}
	return nil
}

func (m *Node) GetWhereList() []*Expr {
	if m != nil {
		return m.WhereList
	}
	return nil
}

func (m *Node) GetGroupBy() []*Expr {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *Node) GetGroupingSet() []*Expr {
	if m != nil {
		return m.GroupingSet
	}
	return nil
}

func (m *Node) GetOrderBy() *OrderBySpec {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *Node) GetWinSpec() *WindowSpec {
	if m != nil {
		return m.WinSpec
	}
	return nil
}

func (m *Node) GetLimit() *Expr {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *Node) GetOffset() *Expr {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *Node) GetTableDef() *TableDef {
	if m != nil {
		return m.TableDef
	}
	return nil
}

func (m *Node) GetObjRef() *ObjectRef {
	if m != nil {
		return m.ObjRef
	}
	return nil
}

func (m *Node) GetRowsetData() *RowsetData {
	if m != nil {
		return m.RowsetData
	}
	return nil
}

func (m *Node) GetExtraOptions() string {
	if m != nil {
		return m.ExtraOptions
	}
	return ""
}

type Query struct {
	StmtType Query_StatementType `protobuf:"varint,1,opt,name=stmt_type,json=stmtType,proto3,enum=plan.Query_StatementType" json:"stmt_type,omitempty"`
	// Each step is simply a root node.  Root node refers to other
	// node as children and the whole step is a DAG.
	Steps []int32 `protobuf:"varint,2,rep,packed,name=steps,proto3" json:"steps,omitempty"`
	// All the nodes.  It is OK to have dangle nodes, we only excute nodes
	// reachable from step roots.
	Nodes []*Node `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Bound Parameter for the query.
	Params               []*Expr  `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{16}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetStmtType() Query_StatementType {
	if m != nil {
		return m.StmtType
	}
	return Query_UNKNOWN
}

func (m *Query) GetSteps() []int32 {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Query) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Query) GetParams() []*Expr {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterEnum("plan.StatementType", StatementType_name, StatementType_value)
	proto.RegisterEnum("plan.Type_TypeId", Type_TypeId_name, Type_TypeId_value)
	proto.RegisterEnum("plan.Function_FuncFlag", Function_FuncFlag_name, Function_FuncFlag_value)
	proto.RegisterEnum("plan.OrderBySpec_OrderByFlag", OrderBySpec_OrderByFlag_name, OrderBySpec_OrderByFlag_value)
	proto.RegisterEnum("plan.Node_NodeType", Node_NodeType_name, Node_NodeType_value)
	proto.RegisterEnum("plan.Node_JoinFlag", Node_JoinFlag_name, Node_JoinFlag_value)
	proto.RegisterEnum("plan.Node_AggMode", Node_AggMode_name, Node_AggMode_value)
	proto.RegisterEnum("plan.Query_StatementType", Query_StatementType_name, Query_StatementType_value)
	proto.RegisterType((*Type)(nil), "plan.Type")
	proto.RegisterType((*Const)(nil), "plan.Const")
	proto.RegisterType((*ParamRef)(nil), "plan.ParamRef")
	proto.RegisterType((*VarRef)(nil), "plan.VarRef")
	proto.RegisterType((*ColRef)(nil), "plan.ColRef")
	proto.RegisterType((*ObjectRef)(nil), "plan.ObjectRef")
	proto.RegisterType((*Function)(nil), "plan.Function")
	proto.RegisterType((*Expr)(nil), "plan.Expr")
	proto.RegisterType((*ColDef)(nil), "plan.ColDef")
	proto.RegisterType((*TableDef)(nil), "plan.TableDef")
	proto.RegisterType((*Cost)(nil), "plan.Cost")
	proto.RegisterType((*ColData)(nil), "plan.ColData")
	proto.RegisterType((*RowsetData)(nil), "plan.RowsetData")
	proto.RegisterType((*OrderBySpec)(nil), "plan.OrderBySpec")
	proto.RegisterType((*WindowSpec)(nil), "plan.WindowSpec")
	proto.RegisterType((*Node)(nil), "plan.Node")
	proto.RegisterType((*Query)(nil), "plan.Query")
}

func init() { proto.RegisterFile("plan.proto", fileDescriptor_2d655ab2f7683c23) }

var fileDescriptor_2d655ab2f7683c23 = []byte{
	// 2101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcd, 0x72, 0xdb, 0xc8,
	0x11, 0x16, 0xf8, 0x0b, 0x36, 0x25, 0x79, 0x3c, 0x2b, 0xdb, 0xf4, 0x5a, 0xb6, 0x69, 0x38, 0xde,
	0xc8, 0xf6, 0xae, 0x6b, 0x4d, 0x69, 0x59, 0x4e, 0xe5, 0xa7, 0x16, 0xa4, 0x20, 0x19, 0x36, 0x04,
	0x70, 0x87, 0xa0, 0xb4, 0xca, 0x1e, 0x58, 0x20, 0x01, 0xca, 0x50, 0x28, 0x80, 0x05, 0x40, 0x92,
	0x95, 0xd3, 0x9e, 0x72, 0x4c, 0x9e, 0x22, 0xf7, 0xe4, 0x2d, 0x76, 0xcf, 0x79, 0x82, 0xbc, 0x43,
	0x1e, 0x20, 0xd5, 0x3d, 0x20, 0x25, 0xaf, 0xec, 0xca, 0x21, 0x17, 0x54, 0x77, 0x7f, 0x3d, 0x8d,
	0x9e, 0x99, 0xee, 0x6f, 0x66, 0x00, 0x66, 0x53, 0x2f, 0x7a, 0x31, 0x4b, 0xe2, 0x2c, 0xe6, 0x25,
	0x94, 0xb5, 0xbf, 0x96, 0xa1, 0xe4, 0x5e, 0xcc, 0x02, 0xbe, 0x0a, 0x85, 0xd0, 0x6f, 0x28, 0x4d,
	0x65, 0x63, 0x45, 0x14, 0x42, 0x9f, 0x7f, 0x0e, 0x6a, 0x74, 0x3a, 0x9d, 0x7a, 0xa3, 0x69, 0xd0,
	0x28, 0x34, 0x95, 0x0d, 0x55, 0x2c, 0x74, 0xbe, 0x06, 0xe5, 0xf3, 0xd0, 0xcf, 0xde, 0x35, 0x8a,
	0x4d, 0x65, 0xa3, 0x2c, 0xa4, 0xc2, 0xd7, 0xa1, 0x36, 0x4b, 0x82, 0x71, 0x98, 0x86, 0x71, 0xd4,
	0x28, 0x11, 0x72, 0x69, 0xd0, 0xfe, 0x5e, 0x82, 0x0a, 0xfe, 0xc8, 0xf4, 0x79, 0x15, 0x8a, 0xba,
	0x7d, 0xc8, 0x96, 0xb8, 0x0a, 0xa5, 0xbe, 0xab, 0x0b, 0xa6, 0xa0, 0xd4, 0x71, 0x1c, 0x8b, 0x01,
	0x4a, 0xa6, 0xed, 0xbe, 0x62, 0x6b, 0xbc, 0x06, 0x65, 0xd3, 0x76, 0x5f, 0xb6, 0xd9, 0xad, 0x5c,
	0xdc, 0x6c, 0xb1, 0xdb, 0xb9, 0xd8, 0xde, 0x62, 0x77, 0x38, 0x40, 0x05, 0x1d, 0x5a, 0xaf, 0x58,
	0x03, 0xcd, 0x03, 0x1a, 0x77, 0x17, 0xcd, 0x03, 0x39, 0xf0, 0xf3, 0xb9, 0xbc, 0xd9, 0x62, 0xf7,
	0xe6, 0x72, 0x7b, 0x8b, 0xad, 0xf3, 0x3a, 0x54, 0x07, 0xf9, 0xd8, 0xfb, 0xa8, 0xec, 0x58, 0x8e,
	0x8e, 0x5e, 0x0f, 0x16, 0x4a, 0x7b, 0x8b, 0x3d, 0xe4, 0x2b, 0x50, 0xdb, 0x36, 0xba, 0xe6, 0x9e,
	0x6e, 0xb5, 0xb7, 0x58, 0x93, 0xaf, 0x02, 0xe4, 0x2a, 0x0e, 0x7c, 0x84, 0xbe, 0xb9, 0xce, 0x34,
	0x0c, 0xaf, 0xdb, 0x87, 0xa6, 0xed, 0xb2, 0x27, 0x7c, 0x19, 0x54, 0xdd, 0x3e, 0xa4, 0x38, 0xec,
	0x0b, 0x8c, 0xa2, 0xdb, 0x87, 0xf6, 0x60, 0xaf, 0x63, 0x08, 0xf6, 0x6b, 0x9c, 0xe1, 0x60, 0x60,
	0x6e, 0xb3, 0x0d, 0x4a, 0xba, 0xf3, 0xb2, 0xfd, 0x35, 0x7b, 0x9a, 0x8b, 0xaf, 0xb6, 0xd8, 0xb3,
	0x5c, 0xfc, 0x4d, 0x8b, 0x3d, 0x97, 0x62, 0xab, 0xb5, 0xc5, 0xbe, 0xcc, 0xc5, 0x6f, 0xda, 0xec,
	0x2b, 0x0c, 0xb0, 0xad, 0xbb, 0x06, 0x6b, 0xa1, 0xe4, 0x9a, 0x7b, 0x06, 0xdb, 0xc4, 0x3f, 0xa2,
	0x8d, 0xb4, 0x2d, 0xfc, 0x23, 0x4a, 0x7d, 0x57, 0xdf, 0xeb, 0xb1, 0x6f, 0x10, 0x34, 0x6d, 0xd7,
	0x10, 0xfb, 0xba, 0xc5, 0xda, 0x98, 0xb5, 0x6e, 0x1f, 0x92, 0xe7, 0x6f, 0x31, 0x42, 0xf7, 0xb5,
	0x2e, 0xd8, 0xef, 0xd0, 0xbc, 0xaf, 0x0b, 0x52, 0x7e, 0x8f, 0xe6, 0x37, 0x7d, 0xc7, 0x66, 0x7f,
	0xc0, 0x69, 0x75, 0x4c, 0x5b, 0x17, 0x87, 0x6c, 0x07, 0xc3, 0xee, 0xeb, 0x22, 0x57, 0x77, 0x31,
	0x25, 0x5d, 0x08, 0xfd, 0x90, 0xfd, 0x11, 0x57, 0x66, 0xc7, 0x32, 0xbe, 0xef, 0x0c, 0x76, 0x76,
	0x0c, 0xc1, 0x7e, 0xa0, 0x51, 0x87, 0xae, 0xa1, 0xbf, 0x62, 0x3e, 0x06, 0x26, 0xf9, 0x65, 0x9b,
	0x05, 0x38, 0x86, 0x14, 0x36, 0xe1, 0x2a, 0x14, 0xfb, 0x86, 0xc5, 0x7e, 0x52, 0x38, 0x40, 0xd9,
	0x1d, 0xf4, 0x2c, 0x83, 0xfd, 0xac, 0x68, 0xc7, 0x50, 0xee, 0xc6, 0x51, 0x9a, 0xf1, 0xdb, 0x50,
	0x09, 0x53, 0x2c, 0x39, 0x2a, 0x4a, 0x55, 0xe4, 0x1a, 0x5f, 0x83, 0x52, 0x78, 0xe6, 0x4d, 0xa9,
	0x28, 0x8b, 0xaf, 0x97, 0x04, 0x69, 0x68, 0xf5, 0xd1, 0x8a, 0x15, 0xa9, 0xa0, 0xd5, 0xcf, 0xad,
	0x29, 0x5a, 0xb1, 0x1a, 0x6b, 0x68, 0x45, 0xad, 0x53, 0x85, 0xf2, 0x99, 0x37, 0x3d, 0x0d, 0xb4,
	0x75, 0x50, 0x7b, 0x5e, 0xe2, 0x9d, 0x88, 0x60, 0xc2, 0x19, 0x14, 0x67, 0x71, 0x4a, 0xff, 0x2a,
	0x0b, 0x14, 0xb5, 0x75, 0xa8, 0xec, 0x7b, 0x09, 0x62, 0x1c, 0x4a, 0x91, 0x77, 0x12, 0x10, 0x58,
	0x13, 0x24, 0x6b, 0x36, 0x54, 0xba, 0xf1, 0xf4, 0x13, 0x28, 0xbf, 0x03, 0xd5, 0x24, 0x98, 0x0e,
	0x31, 0x62, 0x81, 0x22, 0x56, 0x92, 0x60, 0xda, 0x8b, 0x53, 0x04, 0xc6, 0xb1, 0x04, 0x64, 0xf3,
	0x54, 0xc6, 0x31, 0x02, 0xda, 0xbf, 0x14, 0xa8, 0x39, 0xa3, 0xe3, 0x60, 0x9c, 0x61, 0xcc, 0xdb,
	0x50, 0x49, 0x83, 0xe4, 0x2c, 0x48, 0x28, 0x6a, 0x51, 0xe4, 0x1a, 0x76, 0xa9, 0x3f, 0x92, 0x53,
	0x17, 0x05, 0x7f, 0x44, 0x7e, 0xe3, 0x77, 0xc1, 0x89, 0x47, 0xd1, 0xd0, 0x8f, 0x34, 0x9c, 0x4d,
	0x3c, 0x3a, 0xa6, 0x79, 0x17, 0x05, 0x8a, 0xfc, 0x21, 0xd4, 0x65, 0x8c, 0x21, 0x25, 0x5b, 0xa6,
	0x64, 0x41, 0x9a, 0xec, 0x3c, 0x65, 0x7f, 0x24, 0xc1, 0x0a, 0x81, 0x15, 0x7f, 0x44, 0x00, 0x8e,
	0xa4, 0xa8, 0x12, 0xac, 0xe6, 0x23, 0xc9, 0x44, 0x0e, 0x77, 0x41, 0x8d, 0x47, 0xc7, 0x12, 0x55,
	0x09, 0xad, 0xc6, 0xa3, 0x63, 0x84, 0xb4, 0x7f, 0x2b, 0xa0, 0xee, 0x9c, 0x46, 0xe3, 0x2c, 0x8c,
	0x23, 0xfe, 0x18, 0x4a, 0x93, 0xd3, 0x68, 0x4c, 0x53, 0xaa, 0xb7, 0x6e, 0xbc, 0x20, 0x32, 0x5a,
	0xcc, 0x59, 0x10, 0xc8, 0x1f, 0x40, 0xc9, 0x4b, 0x8e, 0x70, 0xd9, 0x8a, 0x1b, 0xf5, 0x16, 0x48,
	0x27, 0xe3, 0xfd, 0x2c, 0x11, 0x64, 0xd7, 0xfe, 0x96, 0x47, 0xdc, 0x99, 0x7a, 0x47, 0x58, 0xa6,
	0xb6, 0x63, 0x1b, 0x6c, 0x69, 0x51, 0xe2, 0xb6, 0x6e, 0x31, 0x2c, 0xa8, 0x4a, 0xdf, 0xd5, 0x3b,
	0x96, 0xc1, 0x0a, 0x88, 0xec, 0x3b, 0x96, 0xee, 0x9a, 0x96, 0xc1, 0x4a, 0x12, 0x11, 0x66, 0xd7,
	0x65, 0x2a, 0x67, 0xb0, 0xdc, 0x13, 0xce, 0xf6, 0xa0, 0x6b, 0x0c, 0xed, 0x81, 0x65, 0x31, 0xc6,
	0x3f, 0x83, 0x1b, 0x0b, 0x8b, 0x23, 0x8d, 0x4d, 0x1c, 0xb2, 0xaf, 0x0b, 0x5d, 0xec, 0xb2, 0x6f,
	0xb1, 0x66, 0xf5, 0xdd, 0x5d, 0xf6, 0x23, 0x32, 0x56, 0xf1, 0xc0, 0xb4, 0xd9, 0x8f, 0x05, 0xed,
	0x67, 0x05, 0x4a, 0x98, 0x20, 0x5f, 0x87, 0x62, 0x76, 0x31, 0xcb, 0xa7, 0x97, 0x67, 0x8e, 0x94,
	0x27, 0xd0, 0xcc, 0xef, 0x81, 0x32, 0xa6, 0x9d, 0xab, 0xb7, 0xea, 0x12, 0xa3, 0x3a, 0x7f, 0xbd,
	0x24, 0x14, 0x9c, 0xb5, 0x32, 0xa3, 0x2d, 0xac, 0xb7, 0x56, 0x25, 0x38, 0x2f, 0x4c, 0xc4, 0x67,
	0x7c, 0x1d, 0x94, 0x33, 0xda, 0xcd, 0x7a, 0x6b, 0x59, 0xe2, 0xb2, 0x34, 0x11, 0x3d, 0xe3, 0x4d,
	0x28, 0x8e, 0xe3, 0x29, 0xed, 0xe9, 0x02, 0x97, 0xc5, 0xf9, 0x7a, 0x49, 0x20, 0x84, 0xf1, 0x27,
	0xb4, 0xad, 0x8b, 0xf8, 0xf3, 0x5d, 0xc1, 0x08, 0x93, 0x4e, 0x05, 0x4a, 0xc1, 0xfb, 0x59, 0xa2,
	0xf5, 0xa8, 0xaa, 0xb7, 0x83, 0xc9, 0xff, 0x98, 0xcc, 0xbc, 0xe6, 0x0b, 0x57, 0x6a, 0x7e, 0x0d,
	0xca, 0xb3, 0x3f, 0x85, 0xfe, 0xfb, 0xf9, 0xa9, 0x40, 0x8a, 0xf6, 0x2d, 0xa8, 0x2e, 0x1e, 0x1a,
	0xdb, 0x9f, 0xe8, 0x94, 0x26, 0x94, 0xc6, 0xf1, 0x74, 0xbe, 0xdf, 0x97, 0xc9, 0x6f, 0x63, 0x45,
	0x20, 0xa2, 0x25, 0x50, 0xea, 0xc6, 0x69, 0x86, 0xa3, 0xc7, 0x5e, 0x22, 0xcf, 0x28, 0x45, 0x90,
	0xcc, 0x1b, 0x50, 0x4d, 0xe2, 0xf3, 0x34, 0xfc, 0xb3, 0x4c, 0x45, 0x11, 0x73, 0x15, 0x3b, 0x20,
	0xf2, 0xcf, 0x24, 0x1f, 0x08, 0x14, 0x31, 0xbf, 0x34, 0xf3, 0x92, 0x8c, 0xd6, 0x51, 0x11, 0x52,
	0x41, 0x6b, 0x16, 0x67, 0x9e, 0x5c, 0x3d, 0x45, 0x48, 0x45, 0xfb, 0xa7, 0x02, 0x55, 0x4c, 0xc2,
	0xcb, 0x3c, 0x7e, 0x0f, 0x6a, 0x49, 0x7c, 0x3e, 0x1c, 0xc7, 0xa7, 0x51, 0x96, 0xf3, 0x83, 0x9a,
	0xc4, 0xe7, 0x5d, 0xd4, 0xf9, 0x7d, 0x00, 0x64, 0xa5, 0x1c, 0x95, 0xbd, 0x5e, 0x43, 0x8b, 0x84,
	0xd7, 0xa0, 0x8c, 0x0a, 0x36, 0x7b, 0x71, 0x43, 0x15, 0x52, 0xc1, 0xdc, 0xc2, 0xcd, 0x56, 0xa3,
	0xd4, 0x2c, 0x22, 0xd7, 0x84, 0x9b, 0x2d, 0xb2, 0xb4, 0xb7, 0x1a, 0xe5, 0x66, 0x11, 0xfb, 0x35,
	0x6c, 0x6f, 0xa1, 0x65, 0xb2, 0xd9, 0x6a, 0x54, 0x9a, 0xc5, 0x8d, 0x82, 0x40, 0x91, 0x2c, 0xed,
	0xad, 0x46, 0xb5, 0x59, 0xc4, 0x19, 0x4d, 0xda, 0x5b, 0x7c, 0x19, 0x94, 0xb4, 0xa1, 0x36, 0x8b,
	0x1b, 0x35, 0xa1, 0xa4, 0xda, 0x01, 0x80, 0x88, 0xcf, 0xd3, 0x20, 0xa3, 0xac, 0xbf, 0x58, 0x30,
	0x83, 0x72, 0x75, 0xdb, 0xe7, 0x7b, 0xb1, 0x60, 0x8a, 0x47, 0x1f, 0xac, 0xff, 0xca, 0xe5, 0xfa,
	0x7b, 0x99, 0x97, 0x6f, 0xc0, 0x5f, 0x0a, 0x50, 0x77, 0x12, 0x3f, 0x48, 0x3a, 0x17, 0xfd, 0x59,
	0x30, 0xe6, 0x4f, 0x40, 0x8d, 0x51, 0x1d, 0x8e, 0x2e, 0x1a, 0xca, 0xb5, 0x36, 0xad, 0xc6, 0xd2,
	0x95, 0xbf, 0x80, 0xcf, 0xe6, 0x6e, 0xc3, 0x71, 0x3c, 0x9d, 0x7a, 0x58, 0x6e, 0xf2, 0x47, 0x65,
	0x71, 0x33, 0xf7, 0xea, 0x2e, 0x00, 0xde, 0x85, 0xd5, 0x85, 0xff, 0x64, 0xea, 0x1d, 0xc9, 0x45,
	0x5b, 0x6d, 0xdd, 0xcf, 0x89, 0xe2, 0x32, 0x83, 0xb9, 0x8c, 0x1c, 0x20, 0x96, 0xe3, 0x4b, 0x25,
	0xd5, 0x7e, 0x58, 0xa4, 0x4a, 0x04, 0x81, 0x57, 0x8d, 0x7e, 0x57, 0x5e, 0x35, 0xb6, 0x8d, 0x7e,
	0x97, 0x29, 0xfc, 0x06, 0xd4, 0xb1, 0xb1, 0xfb, 0xc3, 0x1d, 0x53, 0xf4, 0x5d, 0x56, 0xc0, 0xb3,
	0x4b, 0x1a, 0x2c, 0xbd, 0xef, 0x4a, 0x8a, 0x18, 0xd8, 0xe6, 0x77, 0x03, 0x83, 0xa9, 0x1f, 0xd0,
	0x0a, 0x43, 0xee, 0x81, 0x83, 0x30, 0xf2, 0xe3, 0x73, 0x5a, 0x87, 0xaf, 0x60, 0x79, 0xe6, 0x25,
	0x59, 0x88, 0xe9, 0x7f, 0x7c, 0x2d, 0xea, 0x0b, 0xbc, 0x73, 0xc1, 0xbf, 0x04, 0x35, 0xf6, 0x83,
	0xe4, 0x02, 0x5d, 0x25, 0x0f, 0xdc, 0xbc, 0x36, 0x33, 0x51, 0x25, 0x97, 0xce, 0x05, 0x56, 0xfb,
	0x34, 0xf0, 0xfc, 0xbc, 0x99, 0x48, 0xc6, 0x0a, 0x98, 0x7a, 0x47, 0xf9, 0xdd, 0x0a, 0x45, 0xed,
	0x1f, 0x35, 0x28, 0xd9, 0xb1, 0x1f, 0xf0, 0xaf, 0xa1, 0x16, 0xc5, 0x7e, 0x30, 0xcc, 0x2e, 0x66,
	0xb2, 0xbf, 0x56, 0x5b, 0x9f, 0xc9, 0xe8, 0x08, 0xd3, 0x87, 0xba, 0x57, 0x8d, 0x72, 0x09, 0xf9,
	0x9e, 0x46, 0x84, 0xfe, 0xfc, 0x88, 0x42, 0xd5, 0xf4, 0x91, 0x81, 0xc7, 0x71, 0x9a, 0xe5, 0x74,
	0x04, 0xf3, 0x8a, 0x48, 0x33, 0x41, 0x76, 0x9a, 0x76, 0x12, 0x23, 0x6b, 0x0f, 0xa7, 0x61, 0x9a,
	0x51, 0x19, 0xff, 0x72, 0xda, 0x12, 0xb7, 0xc2, 0x34, 0xc3, 0x8b, 0xe4, 0xf8, 0x5d, 0x38, 0xf5,
	0x93, 0x20, 0xa2, 0xfa, 0x2e, 0x8b, 0x85, 0x8e, 0x59, 0x1f, 0xc7, 0x61, 0x24, 0xb3, 0xae, 0x5c,
	0xcb, 0xfa, 0x4d, 0x1c, 0x46, 0xb4, 0xc7, 0x2a, 0x7a, 0x51, 0xd6, 0x8f, 0xa1, 0x1a, 0x47, 0xf2,
	0xbf, 0xd5, 0x6b, 0xff, 0xad, 0xc4, 0x11, 0xfd, 0xf2, 0x29, 0xc0, 0xf9, 0xbb, 0x20, 0x09, 0xa4,
	0x9f, 0x7a, 0xcd, 0xaf, 0x46, 0x28, 0xb9, 0x3e, 0x01, 0xf5, 0x28, 0x89, 0x4f, 0x67, 0xb8, 0x29,
	0xb5, 0xeb, 0xb5, 0x4c, 0x58, 0xe7, 0x02, 0xe7, 0x4c, 0x62, 0x18, 0x1d, 0x0d, 0xd3, 0x20, 0x6b,
	0xc0, 0xf5, 0x39, 0xcf, 0xf1, 0x7e, 0x90, 0xd1, 0x56, 0xcf, 0x3b, 0xa4, 0xfe, 0xe9, 0xad, 0xce,
	0x1b, 0xe5, 0x39, 0xa8, 0xe7, 0x61, 0x34, 0x4c, 0x67, 0xc1, 0xb8, 0xb1, 0x4c, 0xde, 0x4c, 0x7a,
	0x5f, 0xd6, 0x9a, 0xa8, 0x9e, 0x87, 0x11, 0x15, 0x5d, 0x13, 0xca, 0xd3, 0xf0, 0x24, 0xcc, 0x1a,
	0x2b, 0x57, 0xb7, 0x87, 0x52, 0x90, 0x00, 0xd7, 0xa0, 0x12, 0x4f, 0x26, 0x98, 0xe5, 0xea, 0x35,
	0x97, 0x1c, 0xe1, 0xcf, 0xa1, 0x96, 0x21, 0x13, 0x0c, 0xfd, 0x60, 0xd2, 0xb8, 0xf1, 0x51, 0x82,
	0x50, 0xb3, 0x39, 0x6d, 0x6f, 0x00, 0x9e, 0xe7, 0xc3, 0x24, 0x98, 0x34, 0xd8, 0xc7, 0x8f, 0xee,
	0x4a, 0x3c, 0x3a, 0xc6, 0x6b, 0xcb, 0x4b, 0xa8, 0x27, 0x44, 0x41, 0x43, 0xdf, 0xcb, 0xbc, 0xc6,
	0xcd, 0xab, 0x93, 0xb9, 0xe4, 0x26, 0x01, 0xc9, 0x25, 0x4f, 0x3d, 0x86, 0x95, 0xe0, 0x7d, 0x96,
	0x78, 0xc3, 0x78, 0x26, 0xf9, 0x81, 0xd3, 0xe1, 0xb0, 0x4c, 0x46, 0x47, 0xda, 0xb4, 0x9f, 0x0a,
	0xa0, 0xce, 0x4b, 0x98, 0xee, 0xee, 0xf6, 0x5b, 0xdb, 0x39, 0xb0, 0xd9, 0x12, 0x36, 0xef, 0xbe,
	0x6e, 0x0d, 0x8c, 0x61, 0xbf, 0xab, 0xdb, 0x4c, 0x41, 0x9d, 0x0e, 0x7e, 0xa9, 0x17, 0xf8, 0x4d,
	0x58, 0xd9, 0x19, 0xd8, 0x5d, 0xd7, 0x74, 0x6c, 0x69, 0x2a, 0xa2, 0xc9, 0xf8, 0x5e, 0xf6, 0xb4,
	0x34, 0x95, 0x30, 0x64, 0x4f, 0x38, 0x6f, 0x8c, 0xae, 0xcb, 0x80, 0xdf, 0x82, 0x9b, 0x0b, 0x7c,
	0x3e, 0x96, 0xd5, 0x91, 0x0a, 0xf6, 0x74, 0xd7, 0x10, 0xa6, 0x6e, 0xb1, 0x35, 0x0c, 0x22, 0x8c,
	0xee, 0x40, 0xf4, 0xcd, 0x7d, 0x63, 0xd8, 0x75, 0x0d, 0x76, 0x8b, 0x5e, 0x33, 0xa6, 0xfd, 0x96,
	0xdd, 0xc6, 0x7b, 0x32, 0x4a, 0x32, 0xfa, 0x1d, 0x22, 0xa1, 0xdd, 0x5d, 0xf6, 0x80, 0x6e, 0xd5,
	0x8e, 0x69, 0xb3, 0x87, 0x74, 0x0d, 0xd1, 0xf7, 0xf0, 0xca, 0xdb, 0xa4, 0x71, 0x8e, 0x70, 0xd9,
	0x23, 0xba, 0xe3, 0xdb, 0xf8, 0x37, 0x0d, 0x43, 0x90, 0x38, 0xd4, 0x2d, 0x8b, 0x3d, 0xbe, 0xc2,
	0x49, 0xbf, 0x42, 0xf9, 0xc0, 0xb4, 0xb7, 0x9d, 0x03, 0xf6, 0x04, 0xdd, 0x3a, 0xc2, 0xd1, 0xb7,
	0xbb, 0x48, 0x5d, 0xf4, 0xa0, 0xe8, 0xf7, 0x2c, 0xd3, 0x65, 0x4f, 0xd1, 0x6b, 0x57, 0x77, 0x5f,
	0x1b, 0x82, 0x3d, 0xa3, 0xa7, 0x49, 0xbf, 0x6f, 0x08, 0x97, 0xb5, 0xb4, 0x01, 0xa8, 0xf3, 0xb6,
	0x92, 0x6f, 0x29, 0xdb, 0x10, 0x6c, 0x09, 0x45, 0x67, 0xe0, 0x1a, 0xf9, 0x5b, 0xac, 0x6f, 0xec,
	0x99, 0xac, 0x80, 0x92, 0x6e, 0xbb, 0x66, 0x7e, 0x6d, 0x32, 0xed, 0x5d, 0x0b, 0x39, 0x51, 0x85,
	0xd2, 0x9e, 0x2e, 0xde, 0x32, 0x46, 0x0f, 0x80, 0x5e, 0xcf, 0x3a, 0x64, 0x4d, 0x6d, 0x03, 0xaa,
	0xfa, 0xd1, 0xd1, 0x1e, 0x52, 0x91, 0x0a, 0xa5, 0x1d, 0xbc, 0x39, 0x2d, 0xd1, 0x2b, 0xc0, 0x71,
	0x5d, 0x67, 0x8f, 0x29, 0xb8, 0x08, 0xae, 0xd3, 0x63, 0x05, 0xed, 0x3f, 0x0a, 0x94, 0xbf, 0x3b,
	0x0d, 0x92, 0x0b, 0xde, 0x86, 0x5a, 0x9a, 0x9d, 0x64, 0x57, 0x39, 0xeb, 0xae, 0xac, 0x15, 0xc2,
	0x5f, 0xf4, 0x33, 0x2f, 0x0b, 0x4e, 0x82, 0x28, 0x93, 0xcc, 0x85, 0xbe, 0x54, 0x00, 0x74, 0x90,
	0x07, 0xb3, 0xf9, 0x51, 0x22, 0x15, 0x6c, 0x0c, 0x24, 0x30, 0x79, 0x6a, 0x2c, 0xaa, 0x1e, 0xab,
	0x46, 0x48, 0x00, 0x1b, 0x63, 0x86, 0xb7, 0xaa, 0xf4, 0x23, 0x94, 0x95, 0x23, 0xda, 0x01, 0xac,
	0x7c, 0xf0, 0xdb, 0x0f, 0xab, 0x0d, 0x97, 0xc1, 0xb0, 0xb0, 0x4c, 0x14, 0xf9, 0xfa, 0xa4, 0x45,
	0x2d, 0xa0, 0xbc, 0x6d, 0x58, 0x86, 0x6b, 0xb0, 0x22, 0x6d, 0x55, 0x8f, 0xde, 0x67, 0x25, 0x5c,
	0xa0, 0x3d, 0x43, 0xec, 0x1a, 0xac, 0xfc, 0x6c, 0xff, 0x97, 0x81, 0x69, 0x4b, 0x31, 0xf0, 0xff,
	0x15, 0x77, 0x54, 0xa1, 0xd7, 0xfc, 0xe6, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xe9, 0x03,
	0xbd, 0xdb, 0x0f, 0x00, 0x00,
}
