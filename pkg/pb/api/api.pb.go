// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	plan "github.com/matrixorigin/matrixone/pkg/pb/plan"
	timestamp "github.com/matrixorigin/matrixone/pkg/pb/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpCode int32

const (
	OpCode_Nop          OpCode = 0
	OpCode_OpGetLogTail OpCode = 1000
	OpCode_OpPreCommit  OpCode = 1001
	// Debug
	OpCode_OpPing          OpCode = 2000
	OpCode_OpFlush         OpCode = 2001
	OpCode_OpCheckpoint    OpCode = 2003
	OpCode_OpInspect       OpCode = 2004
	OpCode_OpAddFaultPoint OpCode = 2005
	OpCode_OpBackup        OpCode = 2006
	OpCode_OpTraceSpan     OpCode = 2007
	OpCode_OpStorageUsage  OpCode = 2008
)

var OpCode_name = map[int32]string{
	0:    "Nop",
	1000: "OpGetLogTail",
	1001: "OpPreCommit",
	2000: "OpPing",
	2001: "OpFlush",
	2003: "OpCheckpoint",
	2004: "OpInspect",
	2005: "OpAddFaultPoint",
	2006: "OpBackup",
	2007: "OpTraceSpan",
	2008: "OpStorageUsage",
}

var OpCode_value = map[string]int32{
	"Nop":             0,
	"OpGetLogTail":    1000,
	"OpPreCommit":     1001,
	"OpPing":          2000,
	"OpFlush":         2001,
	"OpCheckpoint":    2003,
	"OpInspect":       2004,
	"OpAddFaultPoint": 2005,
	"OpBackup":        2006,
	"OpTraceSpan":     2007,
	"OpStorageUsage":  2008,
}

func (x OpCode) String() string {
	return proto.EnumName(OpCode_name, int32(x))
}

func (OpCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type AlterKind int32

const (
	AlterKind_Invalid          AlterKind = 0
	AlterKind_AddColumn        AlterKind = 1
	AlterKind_DropColumn       AlterKind = 2
	AlterKind_RenameTable      AlterKind = 3
	AlterKind_UpdateComment    AlterKind = 4
	AlterKind_UpdateConstraint AlterKind = 5
)

var AlterKind_name = map[int32]string{
	0: "Invalid",
	1: "AddColumn",
	2: "DropColumn",
	3: "RenameTable",
	4: "UpdateComment",
	5: "UpdateConstraint",
}

var AlterKind_value = map[string]int32{
	"Invalid":          0,
	"AddColumn":        1,
	"DropColumn":       2,
	"RenameTable":      3,
	"UpdateComment":    4,
	"UpdateConstraint": 5,
}

func (x AlterKind) String() string {
	return proto.EnumName(AlterKind_name, int32(x))
}

func (AlterKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type Entry_EntryType int32

const (
	Entry_Insert        Entry_EntryType = 0
	Entry_Delete        Entry_EntryType = 1
	Entry_Update        Entry_EntryType = 2
	Entry_Alter         Entry_EntryType = 3
	Entry_SpecialDelete Entry_EntryType = 4
)

var Entry_EntryType_name = map[int32]string{
	0: "Insert",
	1: "Delete",
	2: "Update",
	3: "Alter",
	4: "SpecialDelete",
}

var Entry_EntryType_value = map[string]int32{
	"Insert":        0,
	"Delete":        1,
	"Update":        2,
	"Alter":         3,
	"SpecialDelete": 4,
}

func (x Entry_EntryType) String() string {
	return proto.EnumName(Entry_EntryType_name, int32(x))
}

func (Entry_EntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9, 0}
}

// TNPingRequest ping request
type TNPingRequest struct {
	Parameter            string   `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TNPingRequest) Reset()         { *m = TNPingRequest{} }
func (m *TNPingRequest) String() string { return proto.CompactTextString(m) }
func (*TNPingRequest) ProtoMessage()    {}
func (*TNPingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *TNPingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TNPingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TNPingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TNPingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TNPingRequest.Merge(m, src)
}
func (m *TNPingRequest) XXX_Size() int {
	return m.Size()
}
func (m *TNPingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TNPingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TNPingRequest proto.InternalMessageInfo

func (m *TNPingRequest) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

// TNPingResponse ping response
type TNPingResponse struct {
	StoreID              string   `protobuf:"bytes,1,opt,name=storeID,proto3" json:"storeID,omitempty"`
	ServiceAddress       string   `protobuf:"bytes,2,opt,name=serviceAddress,proto3" json:"serviceAddress,omitempty"`
	ShardID              uint64   `protobuf:"varint,3,opt,name=shardID,proto3" json:"shardID,omitempty"`
	ReplicaID            uint64   `protobuf:"varint,4,opt,name=replicaID,proto3" json:"replicaID,omitempty"`
	LogShardID           uint64   `protobuf:"varint,5,opt,name=logShardID,proto3" json:"logShardID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TNPingResponse) Reset()         { *m = TNPingResponse{} }
func (m *TNPingResponse) String() string { return proto.CompactTextString(m) }
func (*TNPingResponse) ProtoMessage()    {}
func (*TNPingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *TNPingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TNPingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TNPingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TNPingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TNPingResponse.Merge(m, src)
}
func (m *TNPingResponse) XXX_Size() int {
	return m.Size()
}
func (m *TNPingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TNPingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TNPingResponse proto.InternalMessageInfo

func (m *TNPingResponse) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

func (m *TNPingResponse) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

func (m *TNPingResponse) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *TNPingResponse) GetReplicaID() uint64 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

func (m *TNPingResponse) GetLogShardID() uint64 {
	if m != nil {
		return m.LogShardID
	}
	return 0
}

// TNStringResponse string type response
type TNStringResponse struct {
	ReturnStr            string   `protobuf:"bytes,1,opt,name=returnStr,proto3" json:"returnStr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TNStringResponse) Reset()         { *m = TNStringResponse{} }
func (m *TNStringResponse) String() string { return proto.CompactTextString(m) }
func (*TNStringResponse) ProtoMessage()    {}
func (*TNStringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *TNStringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TNStringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TNStringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TNStringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TNStringResponse.Merge(m, src)
}
func (m *TNStringResponse) XXX_Size() int {
	return m.Size()
}
func (m *TNStringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TNStringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TNStringResponse proto.InternalMessageInfo

func (m *TNStringResponse) GetReturnStr() string {
	if m != nil {
		return m.ReturnStr
	}
	return ""
}

type Vector struct {
	Data                 []byte     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Type                 *plan.Type `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Nullable             bool       `protobuf:"varint,3,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Nsp                  []byte     `protobuf:"bytes,4,opt,name=nsp,proto3" json:"nsp,omitempty"`
	IsConst              bool       `protobuf:"varint,5,opt,name=is_const,json=isConst,proto3" json:"is_const,omitempty"`
	Len                  uint32     `protobuf:"varint,6,opt,name=len,proto3" json:"len,omitempty"`
	Area                 []byte     `protobuf:"bytes,7,opt,name=area,proto3" json:"area,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *Vector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Vector) GetType() *plan.Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Vector) GetNullable() bool {
	if m != nil {
		return m.Nullable
	}
	return false
}

func (m *Vector) GetNsp() []byte {
	if m != nil {
		return m.Nsp
	}
	return nil
}

func (m *Vector) GetIsConst() bool {
	if m != nil {
		return m.IsConst
	}
	return false
}

func (m *Vector) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *Vector) GetArea() []byte {
	if m != nil {
		return m.Area
	}
	return nil
}

type Batch struct {
	Attrs                []string  `protobuf:"bytes,1,rep,name=attrs,proto3" json:"attrs,omitempty"`
	Vecs                 []*Vector `protobuf:"bytes,2,rep,name=vecs,proto3" json:"vecs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetAttrs() []string {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *Batch) GetVecs() []*Vector {
	if m != nil {
		return m.Vecs
	}
	return nil
}

type TableID struct {
	DbId                 uint64   `protobuf:"varint,1,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	TbId                 uint64   `protobuf:"varint,2,opt,name=tb_id,json=tbId,proto3" json:"tb_id,omitempty"`
	PartitionId          uint64   `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableID) Reset()         { *m = TableID{} }
func (m *TableID) String() string { return proto.CompactTextString(m) }
func (*TableID) ProtoMessage()    {}
func (*TableID) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *TableID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableID.Merge(m, src)
}
func (m *TableID) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TableID) XXX_DiscardUnknown() {
	xxx_messageInfo_TableID.DiscardUnknown(m)
}

var xxx_messageInfo_TableID proto.InternalMessageInfo

func (m *TableID) GetDbId() uint64 {
	if m != nil {
		return m.DbId
	}
	return 0
}

func (m *TableID) GetTbId() uint64 {
	if m != nil {
		return m.TbId
	}
	return 0
}

func (m *TableID) GetPartitionId() uint64 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

// CN pull the log tail of table from TN.
type SyncLogTailReq struct {
	CnHave               *timestamp.Timestamp `protobuf:"bytes,1,opt,name=cn_have,json=cnHave,proto3" json:"cn_have,omitempty"`
	CnWant               *timestamp.Timestamp `protobuf:"bytes,2,opt,name=cn_want,json=cnWant,proto3" json:"cn_want,omitempty"`
	Table                *TableID             `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SyncLogTailReq) Reset()         { *m = SyncLogTailReq{} }
func (m *SyncLogTailReq) String() string { return proto.CompactTextString(m) }
func (*SyncLogTailReq) ProtoMessage()    {}
func (*SyncLogTailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *SyncLogTailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncLogTailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncLogTailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncLogTailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncLogTailReq.Merge(m, src)
}
func (m *SyncLogTailReq) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncLogTailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncLogTailReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncLogTailReq proto.InternalMessageInfo

func (m *SyncLogTailReq) GetCnHave() *timestamp.Timestamp {
	if m != nil {
		return m.CnHave
	}
	return nil
}

func (m *SyncLogTailReq) GetCnWant() *timestamp.Timestamp {
	if m != nil {
		return m.CnWant
	}
	return nil
}

func (m *SyncLogTailReq) GetTable() *TableID {
	if m != nil {
		return m.Table
	}
	return nil
}

type SyncLogTailResp struct {
	// ckp_location is a checkpoint location list.
	// How to get checkpoint data on S3 by the ckp_location ,
	// pls ref to disttae/logtail.go/consumeLogTail function.
	CkpLocation string `protobuf:"bytes,1,opt,name=ckp_location,json=ckpLocation,proto3" json:"ckp_location,omitempty"`
	// commands is log tail for a system or user table,
	// pls ref to tae/logtail/handle.go/HandleSyncLogTailReq function.
	Commands             []*Entry `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncLogTailResp) Reset()         { *m = SyncLogTailResp{} }
func (m *SyncLogTailResp) String() string { return proto.CompactTextString(m) }
func (*SyncLogTailResp) ProtoMessage()    {}
func (*SyncLogTailResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *SyncLogTailResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncLogTailResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncLogTailResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncLogTailResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncLogTailResp.Merge(m, src)
}
func (m *SyncLogTailResp) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncLogTailResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncLogTailResp.DiscardUnknown(m)
}

var xxx_messageInfo_SyncLogTailResp proto.InternalMessageInfo

func (m *SyncLogTailResp) GetCkpLocation() string {
	if m != nil {
		return m.CkpLocation
	}
	return ""
}

func (m *SyncLogTailResp) GetCommands() []*Entry {
	if m != nil {
		return m.Commands
	}
	return nil
}

// How to parse and handle PrecommiWriteCmd , pls ref to
// tae/rpc/handle.go/HandlePreCommit function
type PrecommitWriteCmd struct {
	EntryList            []*Entry `protobuf:"bytes,1,rep,name=entry_list,json=entryList,proto3" json:"entry_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrecommitWriteCmd) Reset()         { *m = PrecommitWriteCmd{} }
func (m *PrecommitWriteCmd) String() string { return proto.CompactTextString(m) }
func (*PrecommitWriteCmd) ProtoMessage()    {}
func (*PrecommitWriteCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *PrecommitWriteCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrecommitWriteCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrecommitWriteCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrecommitWriteCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecommitWriteCmd.Merge(m, src)
}
func (m *PrecommitWriteCmd) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PrecommitWriteCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecommitWriteCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PrecommitWriteCmd proto.InternalMessageInfo

func (m *PrecommitWriteCmd) GetEntryList() []*Entry {
	if m != nil {
		return m.EntryList
	}
	return nil
}

type Entry struct {
	EntryType    Entry_EntryType `protobuf:"varint,1,opt,name=entry_type,json=entryType,proto3,enum=api.Entry_EntryType" json:"entry_type,omitempty"`
	TableId      uint64          `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	DatabaseId   uint64          `protobuf:"varint,3,opt,name=database_id,json=databaseId,proto3" json:"database_id,omitempty"`
	TableName    string          `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	DatabaseName string          `protobuf:"bytes,5,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	FileName     string          `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Bat          *Batch          `protobuf:"bytes,7,opt,name=bat,proto3" json:"bat,omitempty"`
	// whether TN do the PK uniqueness check against txn's workspace or not.
	PkCheckByTn          int32    `protobuf:"varint,8,opt,name=pk_check_by_tn,json=pkCheckByTn,proto3" json:"pk_check_by_tn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetEntryType() Entry_EntryType {
	if m != nil {
		return m.EntryType
	}
	return Entry_Insert
}

func (m *Entry) GetTableId() uint64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *Entry) GetDatabaseId() uint64 {
	if m != nil {
		return m.DatabaseId
	}
	return 0
}

func (m *Entry) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *Entry) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func (m *Entry) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Entry) GetBat() *Batch {
	if m != nil {
		return m.Bat
	}
	return nil
}

func (m *Entry) GetPkCheckByTn() int32 {
	if m != nil {
		return m.PkCheckByTn
	}
	return 0
}

// CatalogCkp contains information about database and tables in the system,and
// MetadataCkp contains information about blocks.
type Checkpoint struct {
	// min_ts TN is the lower bounds of the checkpoint
	//  CN maybe don't care about it.
	MinTs *timestamp.Timestamp `protobuf:"bytes,1,opt,name=min_ts,json=minTs,proto3" json:"min_ts,omitempty"`
	// max_ts is the upper bounds of the checkpoint.
	//  CN maybe don't care about it.
	MaxTs                *timestamp.Timestamp `protobuf:"bytes,2,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
	Bat                  *Batch               `protobuf:"bytes,3,opt,name=bat,proto3" json:"bat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Checkpoint) Reset()         { *m = Checkpoint{} }
func (m *Checkpoint) String() string { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()    {}
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *Checkpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Checkpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Checkpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Checkpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checkpoint.Merge(m, src)
}
func (m *Checkpoint) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Checkpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Checkpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Checkpoint proto.InternalMessageInfo

func (m *Checkpoint) GetMinTs() *timestamp.Timestamp {
	if m != nil {
		return m.MinTs
	}
	return nil
}

func (m *Checkpoint) GetMaxTs() *timestamp.Timestamp {
	if m != nil {
		return m.MaxTs
	}
	return nil
}

func (m *Checkpoint) GetBat() *Batch {
	if m != nil {
		return m.Bat
	}
	return nil
}

// catalog checkpoint:
// one Batch represents a table, such as : mo_databases, mo_tables,
// mo_columns,... etc. knowing more about system tables, pls ref to
// pkg/vm/engine/tae/catalog/model.go
type CatalogCkp struct {
	MinTs                *timestamp.Timestamp `protobuf:"bytes,1,opt,name=min_ts,json=minTs,proto3" json:"min_ts,omitempty"`
	MaxTs                *timestamp.Timestamp `protobuf:"bytes,2,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
	Bat                  *Batch               `protobuf:"bytes,3,opt,name=bat,proto3" json:"bat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CatalogCkp) Reset()         { *m = CatalogCkp{} }
func (m *CatalogCkp) String() string { return proto.CompactTextString(m) }
func (*CatalogCkp) ProtoMessage()    {}
func (*CatalogCkp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *CatalogCkp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatalogCkp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatalogCkp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatalogCkp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogCkp.Merge(m, src)
}
func (m *CatalogCkp) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CatalogCkp) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogCkp.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogCkp proto.InternalMessageInfo

func (m *CatalogCkp) GetMinTs() *timestamp.Timestamp {
	if m != nil {
		return m.MinTs
	}
	return nil
}

func (m *CatalogCkp) GetMaxTs() *timestamp.Timestamp {
	if m != nil {
		return m.MaxTs
	}
	return nil
}

func (m *CatalogCkp) GetBat() *Batch {
	if m != nil {
		return m.Bat
	}
	return nil
}

// metadata checkpoint:
//
//	Batch is a batch of block metadata for a table,
//	one row of Batch represents a block meta data.
//	TODO::
//	knowing more about block meta data , pls ref to ...
type MetadataCkp struct {
	MinTs *timestamp.Timestamp `protobuf:"bytes,1,opt,name=min_ts,json=minTs,proto3" json:"min_ts,omitempty"`
	MaxTs *timestamp.Timestamp `protobuf:"bytes,2,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
	// block meta data for a table;
	Bat                  *Batch   `protobuf:"bytes,3,opt,name=bat,proto3" json:"bat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetadataCkp) Reset()         { *m = MetadataCkp{} }
func (m *MetadataCkp) String() string { return proto.CompactTextString(m) }
func (*MetadataCkp) ProtoMessage()    {}
func (*MetadataCkp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *MetadataCkp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataCkp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataCkp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataCkp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataCkp.Merge(m, src)
}
func (m *MetadataCkp) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetadataCkp) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataCkp.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataCkp proto.InternalMessageInfo

func (m *MetadataCkp) GetMinTs() *timestamp.Timestamp {
	if m != nil {
		return m.MinTs
	}
	return nil
}

func (m *MetadataCkp) GetMaxTs() *timestamp.Timestamp {
	if m != nil {
		return m.MaxTs
	}
	return nil
}

func (m *MetadataCkp) GetBat() *Batch {
	if m != nil {
		return m.Bat
	}
	return nil
}

type AlterTableConstraint struct {
	Constraints          []byte   `protobuf:"bytes,1,opt,name=constraints,proto3" json:"constraints,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlterTableConstraint) Reset()         { *m = AlterTableConstraint{} }
func (m *AlterTableConstraint) String() string { return proto.CompactTextString(m) }
func (*AlterTableConstraint) ProtoMessage()    {}
func (*AlterTableConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *AlterTableConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlterTableConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlterTableConstraint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlterTableConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlterTableConstraint.Merge(m, src)
}
func (m *AlterTableConstraint) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AlterTableConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_AlterTableConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_AlterTableConstraint proto.InternalMessageInfo

func (m *AlterTableConstraint) GetConstraints() []byte {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type AlterTableComment struct {
	Comment              string   `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlterTableComment) Reset()         { *m = AlterTableComment{} }
func (m *AlterTableComment) String() string { return proto.CompactTextString(m) }
func (*AlterTableComment) ProtoMessage()    {}
func (*AlterTableComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *AlterTableComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlterTableComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlterTableComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlterTableComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlterTableComment.Merge(m, src)
}
func (m *AlterTableComment) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AlterTableComment) XXX_DiscardUnknown() {
	xxx_messageInfo_AlterTableComment.DiscardUnknown(m)
}

var xxx_messageInfo_AlterTableComment proto.InternalMessageInfo

func (m *AlterTableComment) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type AlterTableRenameTable struct {
	OldName              string   `protobuf:"bytes,1,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName              string   `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlterTableRenameTable) Reset()         { *m = AlterTableRenameTable{} }
func (m *AlterTableRenameTable) String() string { return proto.CompactTextString(m) }
func (*AlterTableRenameTable) ProtoMessage()    {}
func (*AlterTableRenameTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *AlterTableRenameTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlterTableRenameTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlterTableRenameTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlterTableRenameTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlterTableRenameTable.Merge(m, src)
}
func (m *AlterTableRenameTable) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AlterTableRenameTable) XXX_DiscardUnknown() {
	xxx_messageInfo_AlterTableRenameTable.DiscardUnknown(m)
}

var xxx_messageInfo_AlterTableRenameTable proto.InternalMessageInfo

func (m *AlterTableRenameTable) GetOldName() string {
	if m != nil {
		return m.OldName
	}
	return ""
}

func (m *AlterTableRenameTable) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type AlterTableAddColumn struct {
	Column               *plan.ColDef `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	InsertPosition       int32        `protobuf:"varint,2,opt,name=insert_position,json=insertPosition,proto3" json:"insert_position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AlterTableAddColumn) Reset()         { *m = AlterTableAddColumn{} }
func (m *AlterTableAddColumn) String() string { return proto.CompactTextString(m) }
func (*AlterTableAddColumn) ProtoMessage()    {}
func (*AlterTableAddColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *AlterTableAddColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlterTableAddColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlterTableAddColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlterTableAddColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlterTableAddColumn.Merge(m, src)
}
func (m *AlterTableAddColumn) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AlterTableAddColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_AlterTableAddColumn.DiscardUnknown(m)
}

var xxx_messageInfo_AlterTableAddColumn proto.InternalMessageInfo

func (m *AlterTableAddColumn) GetColumn() *plan.ColDef {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *AlterTableAddColumn) GetInsertPosition() int32 {
	if m != nil {
		return m.InsertPosition
	}
	return 0
}

type AlterTableDropColumn struct {
	LogicalIdx           uint32   `protobuf:"varint,1,opt,name=logical_idx,json=logicalIdx,proto3" json:"logical_idx,omitempty"`
	SequenceNum          uint32   `protobuf:"varint,2,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlterTableDropColumn) Reset()         { *m = AlterTableDropColumn{} }
func (m *AlterTableDropColumn) String() string { return proto.CompactTextString(m) }
func (*AlterTableDropColumn) ProtoMessage()    {}
func (*AlterTableDropColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *AlterTableDropColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlterTableDropColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlterTableDropColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlterTableDropColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlterTableDropColumn.Merge(m, src)
}
func (m *AlterTableDropColumn) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AlterTableDropColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_AlterTableDropColumn.DiscardUnknown(m)
}

var xxx_messageInfo_AlterTableDropColumn proto.InternalMessageInfo

func (m *AlterTableDropColumn) GetLogicalIdx() uint32 {
	if m != nil {
		return m.LogicalIdx
	}
	return 0
}

func (m *AlterTableDropColumn) GetSequenceNum() uint32 {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

type AlterTableReq struct {
	TableId uint64    `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	DbId    uint64    `protobuf:"varint,2,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	Kind    AlterKind `protobuf:"varint,3,opt,name=kind,proto3,enum=api.AlterKind" json:"kind,omitempty"`
	// Types that are valid to be assigned to Operation:
	//	*AlterTableReq_AddColumn
	//	*AlterTableReq_DropColumn
	//	*AlterTableReq_RenameTable
	//	*AlterTableReq_UpdateComment
	//	*AlterTableReq_UpdateCstr
	Operation            isAlterTableReq_Operation `protobuf_oneof:"operation"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AlterTableReq) Reset()         { *m = AlterTableReq{} }
func (m *AlterTableReq) String() string { return proto.CompactTextString(m) }
func (*AlterTableReq) ProtoMessage()    {}
func (*AlterTableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *AlterTableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlterTableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlterTableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlterTableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlterTableReq.Merge(m, src)
}
func (m *AlterTableReq) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AlterTableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AlterTableReq.DiscardUnknown(m)
}

var xxx_messageInfo_AlterTableReq proto.InternalMessageInfo

type isAlterTableReq_Operation interface {
	isAlterTableReq_Operation()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type AlterTableReq_AddColumn struct {
	AddColumn *AlterTableAddColumn `protobuf:"bytes,4,opt,name=add_column,json=addColumn,proto3,oneof" json:"add_column,omitempty"`
}
type AlterTableReq_DropColumn struct {
	DropColumn *AlterTableDropColumn `protobuf:"bytes,5,opt,name=drop_column,json=dropColumn,proto3,oneof" json:"drop_column,omitempty"`
}
type AlterTableReq_RenameTable struct {
	RenameTable *AlterTableRenameTable `protobuf:"bytes,6,opt,name=rename_table,json=renameTable,proto3,oneof" json:"rename_table,omitempty"`
}
type AlterTableReq_UpdateComment struct {
	UpdateComment *AlterTableComment `protobuf:"bytes,7,opt,name=update_comment,json=updateComment,proto3,oneof" json:"update_comment,omitempty"`
}
type AlterTableReq_UpdateCstr struct {
	UpdateCstr *AlterTableConstraint `protobuf:"bytes,8,opt,name=update_cstr,json=updateCstr,proto3,oneof" json:"update_cstr,omitempty"`
}

func (*AlterTableReq_AddColumn) isAlterTableReq_Operation()     {}
func (*AlterTableReq_DropColumn) isAlterTableReq_Operation()    {}
func (*AlterTableReq_RenameTable) isAlterTableReq_Operation()   {}
func (*AlterTableReq_UpdateComment) isAlterTableReq_Operation() {}
func (*AlterTableReq_UpdateCstr) isAlterTableReq_Operation()    {}

func (m *AlterTableReq) GetOperation() isAlterTableReq_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *AlterTableReq) GetTableId() uint64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *AlterTableReq) GetDbId() uint64 {
	if m != nil {
		return m.DbId
	}
	return 0
}

func (m *AlterTableReq) GetKind() AlterKind {
	if m != nil {
		return m.Kind
	}
	return AlterKind_Invalid
}

func (m *AlterTableReq) GetAddColumn() *AlterTableAddColumn {
	if x, ok := m.GetOperation().(*AlterTableReq_AddColumn); ok {
		return x.AddColumn
	}
	return nil
}

func (m *AlterTableReq) GetDropColumn() *AlterTableDropColumn {
	if x, ok := m.GetOperation().(*AlterTableReq_DropColumn); ok {
		return x.DropColumn
	}
	return nil
}

func (m *AlterTableReq) GetRenameTable() *AlterTableRenameTable {
	if x, ok := m.GetOperation().(*AlterTableReq_RenameTable); ok {
		return x.RenameTable
	}
	return nil
}

func (m *AlterTableReq) GetUpdateComment() *AlterTableComment {
	if x, ok := m.GetOperation().(*AlterTableReq_UpdateComment); ok {
		return x.UpdateComment
	}
	return nil
}

func (m *AlterTableReq) GetUpdateCstr() *AlterTableConstraint {
	if x, ok := m.GetOperation().(*AlterTableReq_UpdateCstr); ok {
		return x.UpdateCstr
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AlterTableReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AlterTableReq_AddColumn)(nil),
		(*AlterTableReq_DropColumn)(nil),
		(*AlterTableReq_RenameTable)(nil),
		(*AlterTableReq_UpdateComment)(nil),
		(*AlterTableReq_UpdateCstr)(nil),
	}
}

type SchemaExtra struct {
	NextColSeqnum uint32 `protobuf:"varint,1,opt,name=next_col_seqnum,json=nextColSeqnum,proto3" json:"next_col_seqnum,omitempty"`
	// sending mo_columns deletes according to this.
	DroppedAttrs  []string `protobuf:"bytes,2,rep,name=dropped_attrs,json=droppedAttrs,proto3" json:"dropped_attrs,omitempty"`
	ColumnChanged bool     `protobuf:"varint,3,opt,name=column_changed,json=columnChanged,proto3" json:"column_changed,omitempty"`
	// sending mo_tables deletes by this.
	OldName              string   `protobuf:"bytes,4,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaExtra) Reset()         { *m = SchemaExtra{} }
func (m *SchemaExtra) String() string { return proto.CompactTextString(m) }
func (*SchemaExtra) ProtoMessage()    {}
func (*SchemaExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *SchemaExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaExtra.Merge(m, src)
}
func (m *SchemaExtra) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SchemaExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaExtra.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaExtra proto.InternalMessageInfo

func (m *SchemaExtra) GetNextColSeqnum() uint32 {
	if m != nil {
		return m.NextColSeqnum
	}
	return 0
}

func (m *SchemaExtra) GetDroppedAttrs() []string {
	if m != nil {
		return m.DroppedAttrs
	}
	return nil
}

func (m *SchemaExtra) GetColumnChanged() bool {
	if m != nil {
		return m.ColumnChanged
	}
	return false
}

func (m *SchemaExtra) GetOldName() string {
	if m != nil {
		return m.OldName
	}
	return ""
}

// Int64Map mainly used in unit test
type Int64Map struct {
	M                    map[int64]int64 `protobuf:"bytes,1,rep,name=m,proto3" json:"m,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Int64Map) Reset()         { *m = Int64Map{} }
func (m *Int64Map) String() string { return proto.CompactTextString(m) }
func (*Int64Map) ProtoMessage()    {}
func (*Int64Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *Int64Map) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Int64Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Int64Map.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Int64Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int64Map.Merge(m, src)
}
func (m *Int64Map) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Int64Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Int64Map.DiscardUnknown(m)
}

var xxx_messageInfo_Int64Map proto.InternalMessageInfo

func (m *Int64Map) GetM() map[int64]int64 {
	if m != nil {
		return m.M
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.OpCode", OpCode_name, OpCode_value)
	proto.RegisterEnum("api.AlterKind", AlterKind_name, AlterKind_value)
	proto.RegisterEnum("api.Entry_EntryType", Entry_EntryType_name, Entry_EntryType_value)
	proto.RegisterType((*TNPingRequest)(nil), "api.TNPingRequest")
	proto.RegisterType((*TNPingResponse)(nil), "api.TNPingResponse")
	proto.RegisterType((*TNStringResponse)(nil), "api.TNStringResponse")
	proto.RegisterType((*Vector)(nil), "api.Vector")
	proto.RegisterType((*Batch)(nil), "api.Batch")
	proto.RegisterType((*TableID)(nil), "api.TableID")
	proto.RegisterType((*SyncLogTailReq)(nil), "api.SyncLogTailReq")
	proto.RegisterType((*SyncLogTailResp)(nil), "api.SyncLogTailResp")
	proto.RegisterType((*PrecommitWriteCmd)(nil), "api.PrecommitWriteCmd")
	proto.RegisterType((*Entry)(nil), "api.Entry")
	proto.RegisterType((*Checkpoint)(nil), "api.Checkpoint")
	proto.RegisterType((*CatalogCkp)(nil), "api.CatalogCkp")
	proto.RegisterType((*MetadataCkp)(nil), "api.MetadataCkp")
	proto.RegisterType((*AlterTableConstraint)(nil), "api.AlterTableConstraint")
	proto.RegisterType((*AlterTableComment)(nil), "api.AlterTableComment")
	proto.RegisterType((*AlterTableRenameTable)(nil), "api.AlterTableRenameTable")
	proto.RegisterType((*AlterTableAddColumn)(nil), "api.AlterTableAddColumn")
	proto.RegisterType((*AlterTableDropColumn)(nil), "api.AlterTableDropColumn")
	proto.RegisterType((*AlterTableReq)(nil), "api.AlterTableReq")
	proto.RegisterType((*SchemaExtra)(nil), "api.SchemaExtra")
	proto.RegisterType((*Int64Map)(nil), "api.Int64Map")
	proto.RegisterMapType((map[int64]int64)(nil), "api.Int64Map.MEntry")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcd, 0x6e, 0x23, 0xc7,
	0x11, 0xe6, 0xf0, 0x9f, 0x35, 0xfc, 0x99, 0xed, 0x55, 0x02, 0xae, 0xe2, 0x48, 0xca, 0x38, 0xd9,
	0x28, 0x4e, 0x56, 0x02, 0x64, 0x23, 0x71, 0x16, 0xc6, 0x1a, 0x12, 0x65, 0x47, 0x44, 0x56, 0xa2,
	0x30, 0xe4, 0xda, 0x80, 0x11, 0x60, 0xd0, 0x9c, 0xe9, 0x25, 0x07, 0x9c, 0xe9, 0x69, 0xf5, 0x34,
	0xb5, 0xd2, 0x3d, 0x79, 0x81, 0x9c, 0x73, 0xb0, 0x8f, 0x41, 0xae, 0x79, 0x80, 0x1c, 0x73, 0x74,
	0x90, 0xdf, 0xa3, 0xb1, 0xb9, 0x24, 0xc8, 0x4b, 0x04, 0x5d, 0x3d, 0x43, 0x52, 0x4a, 0xec, 0xab,
	0x2f, 0x44, 0xd5, 0x57, 0x55, 0x3d, 0x55, 0xd5, 0x5f, 0x77, 0x35, 0xa1, 0x45, 0x45, 0x74, 0x20,
	0x64, 0xaa, 0x52, 0x52, 0xa1, 0x22, 0xda, 0x7e, 0x32, 0x8b, 0xd4, 0x7c, 0x39, 0x3d, 0x08, 0xd2,
	0xe4, 0x70, 0x96, 0xce, 0xd2, 0x43, 0xb4, 0x4d, 0x97, 0x2f, 0x51, 0x43, 0x05, 0x25, 0x13, 0xb3,
	0xdd, 0x53, 0x51, 0xc2, 0x32, 0x45, 0x13, 0x91, 0x03, 0x20, 0x62, 0xca, 0x8d, 0xec, 0xfe, 0x04,
	0x3a, 0x93, 0x8b, 0xcb, 0x88, 0xcf, 0x3c, 0x76, 0xb5, 0x64, 0x99, 0x22, 0x6f, 0x40, 0x4b, 0x50,
	0x49, 0x13, 0xa6, 0x98, 0xec, 0x5b, 0x7b, 0xd6, 0x7e, 0xcb, 0x5b, 0x03, 0x4f, 0x9b, 0x9f, 0x7e,
	0xb6, 0x6b, 0x7d, 0xf1, 0xd9, 0x6e, 0xc9, 0xfd, 0xbd, 0x05, 0xdd, 0x22, 0x32, 0x13, 0x29, 0xcf,
	0x18, 0xe9, 0x43, 0x23, 0x53, 0xa9, 0x64, 0xc3, 0xd3, 0x3c, 0xb0, 0x50, 0xc9, 0x63, 0xe8, 0x66,
	0x4c, 0x5e, 0x47, 0x01, 0x3b, 0x0e, 0x43, 0xc9, 0xb2, 0xac, 0x5f, 0x46, 0x87, 0x7b, 0x28, 0xae,
	0x30, 0xa7, 0x32, 0x1c, 0x9e, 0xf6, 0x2b, 0x7b, 0xd6, 0x7e, 0xd5, 0x2b, 0x54, 0x9d, 0x96, 0x64,
	0x22, 0x8e, 0x02, 0x3a, 0x3c, 0xed, 0x57, 0xd1, 0xb6, 0x06, 0xc8, 0x0e, 0x40, 0x9c, 0xce, 0xc6,
	0x79, 0x68, 0x0d, 0xcd, 0x1b, 0xc8, 0x46, 0xda, 0x4f, 0xc1, 0x99, 0x5c, 0x8c, 0x95, 0xdc, 0xcc,
	0x1b, 0xd7, 0x56, 0x4b, 0xc9, 0xc7, 0x6a, 0x55, 0xf2, 0x0a, 0xd8, 0x88, 0xfd, 0x9d, 0x05, 0xf5,
	0x8f, 0x58, 0xa0, 0x52, 0x49, 0x08, 0x54, 0x43, 0xaa, 0x28, 0x7a, 0xb7, 0x3d, 0x94, 0xc9, 0x0e,
	0x54, 0xd5, 0xad, 0x60, 0x58, 0x9a, 0x7d, 0x04, 0x07, 0xd8, 0xe5, 0xc9, 0xad, 0x60, 0x1e, 0xe2,
	0x64, 0x1b, 0x9a, 0x7c, 0x19, 0xc7, 0x74, 0x1a, 0x33, 0xac, 0xae, 0xe9, 0xad, 0x74, 0xe2, 0x40,
	0x85, 0x67, 0x02, 0x0b, 0x6b, 0x7b, 0x5a, 0x24, 0x8f, 0xa0, 0x19, 0x65, 0x7e, 0x90, 0xf2, 0x4c,
	0x61, 0x41, 0x4d, 0xaf, 0x11, 0x65, 0x03, 0xad, 0x6a, 0xe7, 0x98, 0xf1, 0x7e, 0x7d, 0xcf, 0xda,
	0xef, 0x78, 0x5a, 0xd4, 0xe9, 0x50, 0xc9, 0x68, 0xbf, 0x61, 0xd2, 0xd1, 0xb2, 0xfb, 0x0c, 0x6a,
	0x27, 0x54, 0x05, 0x73, 0xb2, 0x05, 0x35, 0xaa, 0x94, 0xcc, 0xfa, 0xd6, 0x5e, 0x65, 0xbf, 0xe5,
	0x19, 0x85, 0xec, 0x42, 0xf5, 0x9a, 0x05, 0x7a, 0x23, 0x2a, 0xfb, 0xf6, 0x91, 0x7d, 0xa0, 0x39,
	0x66, 0x8a, 0xf3, 0xd0, 0xe0, 0x7e, 0x04, 0x8d, 0x89, 0xce, 0x6d, 0x78, 0x4a, 0x1e, 0x42, 0x2d,
	0x9c, 0xfa, 0x51, 0x88, 0xe5, 0x56, 0xbd, 0x6a, 0x38, 0x1d, 0x86, 0x1a, 0x54, 0x08, 0x96, 0x0d,
	0xa8, 0x34, 0xf8, 0x1d, 0x68, 0x0b, 0x2a, 0x55, 0xa4, 0xa2, 0x94, 0x6b, 0x9b, 0xd9, 0x45, 0x7b,
	0x85, 0x0d, 0x43, 0xf7, 0xd7, 0x16, 0x74, 0xc7, 0xb7, 0x3c, 0x78, 0x9e, 0xce, 0x26, 0x34, 0x8a,
	0x3d, 0x76, 0x45, 0x9e, 0x40, 0x23, 0xe0, 0xfe, 0x9c, 0x5e, 0x33, 0xfc, 0x82, 0x7d, 0xb4, 0x75,
	0xb0, 0xe6, 0xec, 0xa4, 0x90, 0xbc, 0x7a, 0xc0, 0xcf, 0xe8, 0x35, 0xcb, 0xdd, 0x5f, 0x51, 0xae,
	0xf2, 0x5e, 0x7f, 0xa9, 0xfb, 0xc7, 0x94, 0x2b, 0xe2, 0x42, 0x4d, 0xad, 0x9a, 0x6e, 0x1f, 0xb5,
	0xb1, 0xd4, 0xbc, 0x34, 0xcf, 0x98, 0xdc, 0x5f, 0x40, 0xef, 0x4e, 0x4e, 0x99, 0xd0, 0xa5, 0x04,
	0x0b, 0xe1, 0xc7, 0x69, 0x40, 0x75, 0xe6, 0x39, 0x31, 0xec, 0x60, 0x21, 0x9e, 0xe7, 0x10, 0x79,
	0x0c, 0xcd, 0x20, 0x4d, 0x12, 0xca, 0xc3, 0xa2, 0x8f, 0x80, 0x8b, 0x7f, 0xc0, 0x95, 0xbc, 0xf5,
	0x56, 0x36, 0xf7, 0x19, 0x3c, 0xb8, 0x94, 0x4c, 0xab, 0x91, 0xfa, 0x58, 0x46, 0x8a, 0x0d, 0x92,
	0x90, 0xfc, 0x00, 0x80, 0x69, 0x3f, 0x3f, 0x8e, 0x32, 0x85, 0x7b, 0x73, 0x37, 0xbc, 0x85, 0xd6,
	0xe7, 0x51, 0xa6, 0xdc, 0xff, 0x94, 0xa1, 0x86, 0x20, 0x79, 0xbb, 0x08, 0x42, 0xa6, 0xe9, 0x94,
	0xba, 0x47, 0x5b, 0xeb, 0x20, 0xf3, 0x8b, 0x9c, 0x33, 0xe1, 0x5a, 0xd4, 0x54, 0xc2, 0x2a, 0xd7,
	0x9b, 0xd5, 0x40, 0x7d, 0x18, 0x92, 0x5d, 0xb0, 0x35, 0x77, 0xa7, 0x34, 0x63, 0xeb, 0xed, 0x82,
	0x02, 0x1a, 0x86, 0xe4, 0xdb, 0x00, 0x26, 0x96, 0xd3, 0x84, 0x21, 0x3f, 0x5b, 0x5e, 0x0b, 0x91,
	0x0b, 0x9a, 0x30, 0xf2, 0x26, 0x74, 0x56, 0xf1, 0xe8, 0x51, 0x43, 0x8f, 0x76, 0x01, 0xa2, 0xd3,
	0xb7, 0xa0, 0xf5, 0x32, 0x2a, 0x96, 0xa8, 0xa3, 0x43, 0x53, 0x03, 0x68, 0x7c, 0x03, 0x2a, 0x53,
	0xaa, 0x90, 0xb9, 0x45, 0xfd, 0x48, 0x5b, 0x4f, 0xc3, 0xe4, 0x4d, 0xe8, 0x8a, 0x85, 0x1f, 0xcc,
	0x59, 0xb0, 0xf0, 0xa7, 0xb7, 0xbe, 0xe2, 0xfd, 0xe6, 0x9e, 0xb5, 0x5f, 0xf3, 0x6c, 0xb1, 0x18,
	0x68, 0xf0, 0xe4, 0x76, 0xc2, 0xdd, 0x73, 0x68, 0xad, 0xea, 0x26, 0x00, 0xf5, 0x21, 0xcf, 0x98,
	0x54, 0x4e, 0x49, 0xcb, 0xa7, 0x2c, 0x66, 0x8a, 0x39, 0x96, 0x96, 0x5f, 0x88, 0x90, 0x2a, 0xe6,
	0x94, 0x49, 0x0b, 0x6a, 0xc7, 0xb1, 0x62, 0xd2, 0xa9, 0x90, 0x07, 0xd0, 0x19, 0x0b, 0x16, 0x44,
	0x34, 0xce, 0x3d, 0xab, 0xee, 0x2f, 0x2d, 0x00, 0x5c, 0x5c, 0xa4, 0x11, 0x57, 0xe4, 0x87, 0x50,
	0x4f, 0x22, 0xee, 0xab, 0xec, 0x2b, 0xb9, 0x59, 0x4b, 0x22, 0x3e, 0xc9, 0xd0, 0x99, 0xde, 0x68,
	0xe7, 0xf2, 0x57, 0x3a, 0xd3, 0x9b, 0x49, 0x56, 0x94, 0x5e, 0xf9, 0xbf, 0xa5, 0x9b, 0x34, 0xa8,
	0xa2, 0x71, 0x3a, 0x1b, 0x2c, 0xc4, 0xd7, 0x96, 0xc6, 0xaf, 0x2c, 0xb0, 0xcf, 0x99, 0xa2, 0x7a,
	0x47, 0xbf, 0xce, 0x3c, 0xde, 0x85, 0x2d, 0xdc, 0x33, 0x3c, 0xb8, 0x78, 0x0f, 0x4a, 0xaa, 0xb7,
	0x67, 0x0f, 0xec, 0x60, 0xa5, 0x65, 0xf9, 0x85, 0xbc, 0x09, 0xb9, 0x4f, 0xe0, 0xc1, 0x66, 0x64,
	0x92, 0x30, 0xae, 0xf4, 0xa4, 0x09, 0x8c, 0x58, 0xcc, 0xaa, 0x5c, 0x75, 0xcf, 0xe1, 0x1b, 0x6b,
	0x77, 0x8f, 0x69, 0xd2, 0xa2, 0xa8, 0x8f, 0x51, 0x1a, 0x87, 0x86, 0xc5, 0x79, 0x4c, 0x1a, 0x87,
	0x48, 0xe2, 0x47, 0xd0, 0xe4, 0xec, 0x95, 0x31, 0x99, 0xc9, 0xd6, 0xe0, 0xec, 0x95, 0x36, 0xb9,
	0x21, 0x3c, 0x5c, 0x2f, 0x77, 0x1c, 0x86, 0x83, 0x34, 0x5e, 0x26, 0x9c, 0x7c, 0x17, 0xea, 0x01,
	0x4a, 0x79, 0x1b, 0xdb, 0x66, 0x5c, 0x0c, 0xd2, 0xf8, 0x94, 0xbd, 0xf4, 0x72, 0x1b, 0xf9, 0x3e,
	0xf4, 0x22, 0x24, 0xb3, 0x2f, 0xd2, 0x0c, 0x2f, 0x50, 0x5c, 0xbe, 0xe6, 0x75, 0x0d, 0x7c, 0x99,
	0xa3, 0xee, 0x27, 0x9b, 0xdd, 0x39, 0x95, 0xa9, 0xc8, 0x3f, 0xb3, 0x0b, 0x76, 0x9c, 0xce, 0xa2,
	0x80, 0xc6, 0x7e, 0x14, 0xde, 0xe0, 0xb7, 0x3a, 0x38, 0x19, 0x35, 0x34, 0x0c, 0x6f, 0xf4, 0x2d,
	0x97, 0xe9, 0xc9, 0xcf, 0x03, 0xe6, 0xf3, 0x65, 0x82, 0xcb, 0x77, 0x3c, 0xbb, 0xc0, 0x2e, 0x96,
	0x89, 0xfb, 0xdb, 0x0a, 0x74, 0x36, 0x3b, 0x72, 0x75, 0xe7, 0x42, 0xb1, 0xee, 0x5e, 0x28, 0xab,
	0x51, 0x51, 0xde, 0x18, 0x15, 0x2e, 0x54, 0x17, 0x11, 0x37, 0xd7, 0x4b, 0xf7, 0xa8, 0x8b, 0x5b,
	0x8b, 0x2b, 0xfe, 0x3c, 0xe2, 0xa1, 0x87, 0x36, 0xf2, 0x53, 0x00, 0x1a, 0x86, 0x7e, 0xde, 0x94,
	0x2a, 0x36, 0xa5, 0xbf, 0xf6, 0xbc, 0xdb, 0xbe, 0xb3, 0x92, 0xd7, 0xa2, 0xab, 0x5e, 0xbe, 0x07,
	0x76, 0x28, 0x53, 0x51, 0xc4, 0xd6, 0x30, 0xf6, 0xd1, 0xbd, 0xd8, 0x75, 0x53, 0xce, 0x4a, 0x1e,
	0x84, 0xeb, 0x16, 0xbd, 0x0f, 0x6d, 0x89, 0xbb, 0xec, 0x9b, 0x29, 0x51, 0xc7, 0xf0, 0xed, 0x7b,
	0xe1, 0x1b, 0x44, 0x38, 0x2b, 0x79, 0xb6, 0xdc, 0xe0, 0xc5, 0xfb, 0xd0, 0x5d, 0xe2, 0xcd, 0xe2,
	0x17, 0x8c, 0x32, 0x97, 0xd9, 0x37, 0xef, 0x2d, 0x91, 0x53, 0xef, 0xac, 0xe4, 0x75, 0x8c, 0x7f,
	0xc1, 0xc5, 0xf7, 0xc0, 0x2e, 0x16, 0xc8, 0x94, 0xc4, 0x1b, 0xee, 0x7f, 0xf3, 0x5f, 0x53, 0x5e,
	0xe7, 0x9f, 0x2f, 0x90, 0x29, 0x79, 0x62, 0x43, 0x2b, 0x15, 0x4c, 0xe2, 0x44, 0x72, 0x7f, 0x63,
	0x81, 0x3d, 0x0e, 0xe6, 0x2c, 0xa1, 0x1f, 0xdc, 0x28, 0x49, 0xc9, 0x63, 0xe8, 0x71, 0x76, 0xa3,
	0x74, 0x6b, 0xfc, 0x8c, 0x5d, 0xe9, 0x1d, 0x36, 0x1c, 0xe8, 0x68, 0x78, 0x90, 0xc6, 0x63, 0x04,
	0xf1, 0x1e, 0x97, 0xa9, 0x10, 0x2c, 0xf4, 0xcd, 0x5b, 0xa1, 0x8c, 0x6f, 0x85, 0x76, 0x0e, 0x1e,
	0xe3, 0x93, 0xe1, 0x7b, 0xd0, 0x35, 0x2d, 0xf6, 0x83, 0x39, 0xe5, 0x33, 0x16, 0xe6, 0xcf, 0x98,
	0x8e, 0x41, 0x07, 0x06, 0xbc, 0x73, 0x4e, 0xaa, 0x77, 0xce, 0x89, 0x1b, 0x42, 0x73, 0xc8, 0xd5,
	0x8f, 0xdf, 0x39, 0xa7, 0x82, 0xb8, 0x60, 0x25, 0xf9, 0xd8, 0x33, 0x13, 0xac, 0xb0, 0x1c, 0x9c,
	0x9b, 0x01, 0x68, 0x25, 0xdb, 0xef, 0x40, 0xdd, 0x28, 0xfa, 0xcd, 0xb3, 0x60, 0xb7, 0x98, 0x7c,
	0xc5, 0xd3, 0xa2, 0x7e, 0xd6, 0x5c, 0xd3, 0x78, 0x69, 0x0e, 0x5c, 0xc5, 0x33, 0xca, 0xd3, 0xf2,
	0xbb, 0xd6, 0x5b, 0x7f, 0xb0, 0xa0, 0x3e, 0x12, 0x83, 0x34, 0x64, 0xa4, 0x01, 0x95, 0x8b, 0x54,
	0x38, 0x25, 0xf2, 0x00, 0xda, 0x23, 0xf1, 0x33, 0xa6, 0xf2, 0x09, 0xef, 0xfc, 0xab, 0x41, 0x1c,
	0xb0, 0x47, 0xe2, 0x52, 0xe2, 0x36, 0x44, 0xca, 0xf9, 0x77, 0x83, 0xd8, 0x3a, 0x4e, 0x3f, 0x69,
	0x9d, 0xcf, 0x7b, 0xa4, 0x0d, 0x8d, 0x91, 0xf8, 0x30, 0x5e, 0x66, 0x73, 0xe7, 0x4f, 0x3d, 0x13,
	0xbf, 0x9e, 0x0a, 0xce, 0x9f, 0x7b, 0xa4, 0x0b, 0xad, 0x91, 0x18, 0xf2, 0x4c, 0xb0, 0x40, 0x39,
	0x7f, 0xe9, 0x91, 0x2d, 0xe8, 0x8d, 0xc4, 0x71, 0x18, 0x7e, 0x48, 0x97, 0xb1, 0xba, 0x44, 0xaf,
	0xbf, 0xf6, 0x48, 0x07, 0x9a, 0x23, 0x71, 0x42, 0x83, 0xc5, 0x52, 0x38, 0x7f, 0xeb, 0x99, 0x8f,
	0x4e, 0x24, 0x0d, 0xd8, 0x58, 0x50, 0xee, 0xfc, 0xbd, 0x47, 0x1e, 0x42, 0x77, 0x24, 0xc6, 0x2a,
	0x95, 0x74, 0xc6, 0x5e, 0x64, 0x74, 0xc6, 0x9c, 0x7f, 0xf4, 0xde, 0xba, 0x82, 0xd6, 0xea, 0x80,
	0x10, 0x1b, 0x1a, 0x43, 0x7e, 0x4d, 0xe3, 0x28, 0x74, 0x4a, 0xa4, 0x03, 0xad, 0xd5, 0x31, 0x70,
	0x2c, 0xd2, 0x05, 0x58, 0x33, 0xdb, 0x29, 0x93, 0x1e, 0xd8, 0x1b, 0x54, 0x35, 0x03, 0xee, 0xc5,
	0x26, 0xdb, 0x9c, 0x2a, 0xd9, 0x02, 0xa7, 0x80, 0x0a, 0x4e, 0x39, 0xb5, 0x93, 0x67, 0x7f, 0x7c,
	0xbd, 0x63, 0x7d, 0xfe, 0x7a, 0xc7, 0xfa, 0xe2, 0xf5, 0x4e, 0xe9, 0xd3, 0x7f, 0xee, 0x58, 0x9f,
	0xfc, 0x68, 0xe3, 0x7f, 0x46, 0x42, 0x95, 0x8c, 0x6e, 0x52, 0x19, 0xcd, 0x22, 0x5e, 0x28, 0x9c,
	0x1d, 0x8a, 0xc5, 0xec, 0x50, 0x4c, 0x0f, 0xa9, 0x88, 0xa6, 0x75, 0xfc, 0x43, 0xf1, 0xf6, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x93, 0x30, 0xfb, 0x72, 0xae, 0x0c, 0x00, 0x00,
}

func (m *TNPingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TNPingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TNPingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TNPingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TNPingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TNPingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogShardID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LogShardID))
		i--
		dAtA[i] = 0x28
	}
	if m.ReplicaID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x20
	}
	if m.ShardID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ServiceAddress) > 0 {
		i -= len(m.ServiceAddress)
		copy(dAtA[i:], m.ServiceAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServiceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreID) > 0 {
		i -= len(m.StoreID)
		copy(dAtA[i:], m.StoreID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StoreID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TNStringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TNStringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TNStringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReturnStr) > 0 {
		i -= len(m.ReturnStr)
		copy(dAtA[i:], m.ReturnStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReturnStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vector) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Area) > 0 {
		i -= len(m.Area)
		copy(dAtA[i:], m.Area)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Len != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x30
	}
	if m.IsConst {
		i--
		if m.IsConst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Nsp) > 0 {
		i -= len(m.Nsp)
		copy(dAtA[i:], m.Nsp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Nsp)))
		i--
		dAtA[i] = 0x22
	}
	if m.Nullable {
		i--
		if m.Nullable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vecs) > 0 {
		for iNdEx := len(m.Vecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Attrs) > 0 {
		for iNdEx := len(m.Attrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Attrs[iNdEx])
			copy(dAtA[i:], m.Attrs[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Attrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TableID) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableID) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PartitionId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PartitionId))
		i--
		dAtA[i] = 0x18
	}
	if m.TbId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TbId))
		i--
		dAtA[i] = 0x10
	}
	if m.DbId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DbId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncLogTailReq) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncLogTailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncLogTailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Table != nil {
		{
			size, err := m.Table.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CnWant != nil {
		{
			size, err := m.CnWant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CnHave != nil {
		{
			size, err := m.CnHave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncLogTailResp) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncLogTailResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncLogTailResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CkpLocation) > 0 {
		i -= len(m.CkpLocation)
		copy(dAtA[i:], m.CkpLocation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CkpLocation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrecommitWriteCmd) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrecommitWriteCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrecommitWriteCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EntryList) > 0 {
		for iNdEx := len(m.EntryList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntryList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PkCheckByTn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PkCheckByTn))
		i--
		dAtA[i] = 0x40
	}
	if m.Bat != nil {
		{
			size, err := m.Bat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DatabaseName) > 0 {
		i -= len(m.DatabaseName)
		copy(dAtA[i:], m.DatabaseName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DatabaseName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x22
	}
	if m.DatabaseId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DatabaseId))
		i--
		dAtA[i] = 0x18
	}
	if m.TableId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TableId))
		i--
		dAtA[i] = 0x10
	}
	if m.EntryType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EntryType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Checkpoint) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checkpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Checkpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bat != nil {
		{
			size, err := m.Bat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxTs != nil {
		{
			size, err := m.MaxTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MinTs != nil {
		{
			size, err := m.MinTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CatalogCkp) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatalogCkp) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatalogCkp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bat != nil {
		{
			size, err := m.Bat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxTs != nil {
		{
			size, err := m.MaxTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MinTs != nil {
		{
			size, err := m.MinTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataCkp) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataCkp) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataCkp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bat != nil {
		{
			size, err := m.Bat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxTs != nil {
		{
			size, err := m.MaxTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MinTs != nil {
		{
			size, err := m.MinTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlterTableConstraint) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlterTableConstraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableConstraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Constraints) > 0 {
		i -= len(m.Constraints)
		copy(dAtA[i:], m.Constraints)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Constraints)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlterTableComment) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlterTableComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlterTableRenameTable) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlterTableRenameTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableRenameTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NewName) > 0 {
		i -= len(m.NewName)
		copy(dAtA[i:], m.NewName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NewName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldName) > 0 {
		i -= len(m.OldName)
		copy(dAtA[i:], m.OldName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OldName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlterTableAddColumn) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlterTableAddColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableAddColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InsertPosition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InsertPosition))
		i--
		dAtA[i] = 0x10
	}
	if m.Column != nil {
		{
			size, err := m.Column.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlterTableDropColumn) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlterTableDropColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableDropColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SequenceNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SequenceNum))
		i--
		dAtA[i] = 0x10
	}
	if m.LogicalIdx != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LogicalIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlterTableReq) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlterTableReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Operation != nil {
		{
			size := m.Operation.ProtoSize()
			i -= size
			if _, err := m.Operation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Kind != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x18
	}
	if m.DbId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DbId))
		i--
		dAtA[i] = 0x10
	}
	if m.TableId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TableId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlterTableReq_AddColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableReq_AddColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddColumn != nil {
		{
			size, err := m.AddColumn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AlterTableReq_DropColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableReq_DropColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DropColumn != nil {
		{
			size, err := m.DropColumn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AlterTableReq_RenameTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableReq_RenameTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RenameTable != nil {
		{
			size, err := m.RenameTable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AlterTableReq_UpdateComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableReq_UpdateComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateComment != nil {
		{
			size, err := m.UpdateComment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AlterTableReq_UpdateCstr) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterTableReq_UpdateCstr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateCstr != nil {
		{
			size, err := m.UpdateCstr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SchemaExtra) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OldName) > 0 {
		i -= len(m.OldName)
		copy(dAtA[i:], m.OldName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OldName)))
		i--
		dAtA[i] = 0x22
	}
	if m.ColumnChanged {
		i--
		if m.ColumnChanged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DroppedAttrs) > 0 {
		for iNdEx := len(m.DroppedAttrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DroppedAttrs[iNdEx])
			copy(dAtA[i:], m.DroppedAttrs[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.DroppedAttrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NextColSeqnum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NextColSeqnum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Int64Map) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Int64Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.M) > 0 {
		for k := range m.M {
			v := m.M[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TNPingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TNPingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServiceAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovApi(uint64(m.ShardID))
	}
	if m.ReplicaID != 0 {
		n += 1 + sovApi(uint64(m.ReplicaID))
	}
	if m.LogShardID != 0 {
		n += 1 + sovApi(uint64(m.LogShardID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TNStringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReturnStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Nullable {
		n += 2
	}
	l = len(m.Nsp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsConst {
		n += 2
	}
	if m.Len != 0 {
		n += 1 + sovApi(uint64(m.Len))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Batch) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attrs) > 0 {
		for _, s := range m.Attrs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Vecs) > 0 {
		for _, e := range m.Vecs {
			l = e.ProtoSize()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableID) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DbId != 0 {
		n += 1 + sovApi(uint64(m.DbId))
	}
	if m.TbId != 0 {
		n += 1 + sovApi(uint64(m.TbId))
	}
	if m.PartitionId != 0 {
		n += 1 + sovApi(uint64(m.PartitionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncLogTailReq) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CnHave != nil {
		l = m.CnHave.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CnWant != nil {
		l = m.CnWant.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Table != nil {
		l = m.Table.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncLogTailResp) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CkpLocation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.ProtoSize()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrecommitWriteCmd) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EntryList) > 0 {
		for _, e := range m.EntryList {
			l = e.ProtoSize()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Entry) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntryType != 0 {
		n += 1 + sovApi(uint64(m.EntryType))
	}
	if m.TableId != 0 {
		n += 1 + sovApi(uint64(m.TableId))
	}
	if m.DatabaseId != 0 {
		n += 1 + sovApi(uint64(m.DatabaseId))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DatabaseName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Bat != nil {
		l = m.Bat.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PkCheckByTn != 0 {
		n += 1 + sovApi(uint64(m.PkCheckByTn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Checkpoint) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinTs != nil {
		l = m.MinTs.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MaxTs != nil {
		l = m.MaxTs.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Bat != nil {
		l = m.Bat.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CatalogCkp) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinTs != nil {
		l = m.MinTs.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MaxTs != nil {
		l = m.MaxTs.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Bat != nil {
		l = m.Bat.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataCkp) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinTs != nil {
		l = m.MinTs.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MaxTs != nil {
		l = m.MaxTs.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Bat != nil {
		l = m.Bat.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlterTableConstraint) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Constraints)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlterTableComment) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlterTableRenameTable) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlterTableAddColumn) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Column != nil {
		l = m.Column.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.InsertPosition != 0 {
		n += 1 + sovApi(uint64(m.InsertPosition))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlterTableDropColumn) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogicalIdx != 0 {
		n += 1 + sovApi(uint64(m.LogicalIdx))
	}
	if m.SequenceNum != 0 {
		n += 1 + sovApi(uint64(m.SequenceNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlterTableReq) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableId != 0 {
		n += 1 + sovApi(uint64(m.TableId))
	}
	if m.DbId != 0 {
		n += 1 + sovApi(uint64(m.DbId))
	}
	if m.Kind != 0 {
		n += 1 + sovApi(uint64(m.Kind))
	}
	if m.Operation != nil {
		n += m.Operation.ProtoSize()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlterTableReq_AddColumn) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddColumn != nil {
		l = m.AddColumn.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *AlterTableReq_DropColumn) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DropColumn != nil {
		l = m.DropColumn.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *AlterTableReq_RenameTable) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RenameTable != nil {
		l = m.RenameTable.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *AlterTableReq_UpdateComment) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateComment != nil {
		l = m.UpdateComment.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *AlterTableReq_UpdateCstr) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateCstr != nil {
		l = m.UpdateCstr.ProtoSize()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SchemaExtra) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextColSeqnum != 0 {
		n += 1 + sovApi(uint64(m.NextColSeqnum))
	}
	if len(m.DroppedAttrs) > 0 {
		for _, s := range m.DroppedAttrs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.ColumnChanged {
		n += 2
	}
	l = len(m.OldName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Int64Map) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.M) > 0 {
		for k, v := range m.M {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TNPingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TNPingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TNPingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TNPingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TNPingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TNPingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogShardID", wireType)
			}
			m.LogShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TNStringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TNStringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TNStringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &plan.Type{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nullable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nsp = append(m.Nsp[:0], dAtA[iNdEx:postIndex]...)
			if m.Nsp == nil {
				m.Nsp = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConst = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = append(m.Area[:0], dAtA[iNdEx:postIndex]...)
			if m.Area == nil {
				m.Area = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attrs = append(m.Attrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vecs = append(m.Vecs, &Vector{})
			if err := m.Vecs[len(m.Vecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			m.DbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TbId", wireType)
			}
			m.TbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TbId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			m.PartitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncLogTailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncLogTailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncLogTailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CnHave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CnHave == nil {
				m.CnHave = &timestamp.Timestamp{}
			}
			if err := m.CnHave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CnWant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CnWant == nil {
				m.CnWant = &timestamp.Timestamp{}
			}
			if err := m.CnWant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Table == nil {
				m.Table = &TableID{}
			}
			if err := m.Table.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncLogTailResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncLogTailResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncLogTailResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CkpLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CkpLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &Entry{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrecommitWriteCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrecommitWriteCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrecommitWriteCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryList = append(m.EntryList, &Entry{})
			if err := m.EntryList[len(m.EntryList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			m.EntryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryType |= Entry_EntryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseId", wireType)
			}
			m.DatabaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DatabaseId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bat == nil {
				m.Bat = &Batch{}
			}
			if err := m.Bat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkCheckByTn", wireType)
			}
			m.PkCheckByTn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkCheckByTn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Checkpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checkpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checkpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinTs == nil {
				m.MinTs = &timestamp.Timestamp{}
			}
			if err := m.MinTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTs == nil {
				m.MaxTs = &timestamp.Timestamp{}
			}
			if err := m.MaxTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bat == nil {
				m.Bat = &Batch{}
			}
			if err := m.Bat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogCkp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogCkp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogCkp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinTs == nil {
				m.MinTs = &timestamp.Timestamp{}
			}
			if err := m.MinTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTs == nil {
				m.MaxTs = &timestamp.Timestamp{}
			}
			if err := m.MaxTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bat == nil {
				m.Bat = &Batch{}
			}
			if err := m.Bat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataCkp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataCkp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataCkp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinTs == nil {
				m.MinTs = &timestamp.Timestamp{}
			}
			if err := m.MinTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTs == nil {
				m.MaxTs = &timestamp.Timestamp{}
			}
			if err := m.MaxTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bat == nil {
				m.Bat = &Batch{}
			}
			if err := m.Bat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlterTableConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlterTableConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlterTableConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints[:0], dAtA[iNdEx:postIndex]...)
			if m.Constraints == nil {
				m.Constraints = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlterTableComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlterTableComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlterTableComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlterTableRenameTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlterTableRenameTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlterTableRenameTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlterTableAddColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlterTableAddColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlterTableAddColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Column == nil {
				m.Column = &plan.ColDef{}
			}
			if err := m.Column.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertPosition", wireType)
			}
			m.InsertPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertPosition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlterTableDropColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlterTableDropColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlterTableDropColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalIdx", wireType)
			}
			m.LogicalIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogicalIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNum", wireType)
			}
			m.SequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlterTableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlterTableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlterTableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			m.DbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= AlterKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddColumn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AlterTableAddColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &AlterTableReq_AddColumn{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropColumn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AlterTableDropColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &AlterTableReq_DropColumn{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenameTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AlterTableRenameTable{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &AlterTableReq_RenameTable{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateComment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AlterTableComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &AlterTableReq_UpdateComment{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCstr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AlterTableConstraint{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &AlterTableReq_UpdateCstr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextColSeqnum", wireType)
			}
			m.NextColSeqnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextColSeqnum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAttrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DroppedAttrs = append(m.DroppedAttrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnChanged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ColumnChanged = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.M == nil {
				m.M = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.M[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
