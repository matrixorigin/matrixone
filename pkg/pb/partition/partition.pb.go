// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: partition.proto

package partition

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	plan "github.com/matrixorigin/matrixone/pkg/pb/plan"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PartitionMethod partition method
type PartitionMethod int32

const (
	PartitionMethod_Key        PartitionMethod = 0
	PartitionMethod_LinearKey  PartitionMethod = 1
	PartitionMethod_Hash       PartitionMethod = 2
	PartitionMethod_LinearHash PartitionMethod = 3
	PartitionMethod_Range      PartitionMethod = 4
	PartitionMethod_List       PartitionMethod = 5
)

var PartitionMethod_name = map[int32]string{
	0: "Key",
	1: "LinearKey",
	2: "Hash",
	3: "LinearHash",
	4: "Range",
	5: "List",
}

var PartitionMethod_value = map[string]int32{
	"Key":        0,
	"LinearKey":  1,
	"Hash":       2,
	"LinearHash": 3,
	"Range":      4,
	"List":       5,
}

func (x PartitionMethod) String() string {
	return proto.EnumName(PartitionMethod_name, int32(x))
}

func (PartitionMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12ead894473a209c, []int{0}
}

type PartitionMetadata struct {
	TableID              uint64          `protobuf:"varint,1,opt,name=TableID,proto3" json:"TableID,omitempty"`
	TableName            string          `protobuf:"bytes,2,opt,name=TableName,proto3" json:"TableName,omitempty"`
	DatabaseName         string          `protobuf:"bytes,3,opt,name=DatabaseName,proto3" json:"DatabaseName,omitempty"`
	Method               PartitionMethod `protobuf:"varint,4,opt,name=Method,proto3,enum=partition.PartitionMethod" json:"Method,omitempty"`
	Description          string          `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	Columns              []string        `protobuf:"bytes,6,rep,name=Columns,proto3" json:"Columns,omitempty"`
	Partitions           []Partition     `protobuf:"bytes,7,rep,name=Partitions,proto3" json:"Partitions"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PartitionMetadata) Reset()         { *m = PartitionMetadata{} }
func (m *PartitionMetadata) String() string { return proto.CompactTextString(m) }
func (*PartitionMetadata) ProtoMessage()    {}
func (*PartitionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ead894473a209c, []int{0}
}
func (m *PartitionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionMetadata.Merge(m, src)
}
func (m *PartitionMetadata) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PartitionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionMetadata proto.InternalMessageInfo

func (m *PartitionMetadata) GetTableID() uint64 {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *PartitionMetadata) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *PartitionMetadata) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func (m *PartitionMetadata) GetMethod() PartitionMethod {
	if m != nil {
		return m.Method
	}
	return PartitionMethod_Key
}

func (m *PartitionMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PartitionMetadata) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *PartitionMetadata) GetPartitions() []Partition {
	if m != nil {
		return m.Partitions
	}
	return nil
}

type Partition struct {
	PartitionID          uint64     `protobuf:"varint,1,opt,name=PartitionID,proto3" json:"PartitionID,omitempty"`
	PartitionTableName   string     `protobuf:"bytes,2,opt,name=PartitionTableName,proto3" json:"PartitionTableName,omitempty"`
	PrimaryTableID       uint64     `protobuf:"varint,3,opt,name=PrimaryTableID,proto3" json:"PrimaryTableID,omitempty"`
	Name                 string     `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Position             uint32     `protobuf:"varint,5,opt,name=Position,proto3" json:"Position,omitempty"`
	ExprStr              string     `protobuf:"bytes,6,opt,name=ExprStr,proto3" json:"ExprStr,omitempty"`
	Expr                 *plan.Expr `protobuf:"bytes,7,opt,name=Expr,proto3" json:"Expr,omitempty"`
	ExprWithRowID        *plan.Expr `protobuf:"bytes,8,opt,name=ExprWithRowID,proto3" json:"ExprWithRowID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Partition) Reset()         { *m = Partition{} }
func (m *Partition) String() string { return proto.CompactTextString(m) }
func (*Partition) ProtoMessage()    {}
func (*Partition) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ead894473a209c, []int{1}
}
func (m *Partition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Partition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Partition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Partition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Partition.Merge(m, src)
}
func (m *Partition) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Partition) XXX_DiscardUnknown() {
	xxx_messageInfo_Partition.DiscardUnknown(m)
}

var xxx_messageInfo_Partition proto.InternalMessageInfo

func (m *Partition) GetPartitionID() uint64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *Partition) GetPartitionTableName() string {
	if m != nil {
		return m.PartitionTableName
	}
	return ""
}

func (m *Partition) GetPrimaryTableID() uint64 {
	if m != nil {
		return m.PrimaryTableID
	}
	return 0
}

func (m *Partition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Partition) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Partition) GetExprStr() string {
	if m != nil {
		return m.ExprStr
	}
	return ""
}

func (m *Partition) GetExpr() *plan.Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (m *Partition) GetExprWithRowID() *plan.Expr {
	if m != nil {
		return m.ExprWithRowID
	}
	return nil
}

func init() {
	proto.RegisterEnum("partition.PartitionMethod", PartitionMethod_name, PartitionMethod_value)
	proto.RegisterType((*PartitionMetadata)(nil), "partition.PartitionMetadata")
	proto.RegisterType((*Partition)(nil), "partition.Partition")
}

func init() { proto.RegisterFile("partition.proto", fileDescriptor_12ead894473a209c) }

var fileDescriptor_12ead894473a209c = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0xb1, 0xf3, 0xc7, 0x13, 0x92, 0x86, 0x11, 0x87, 0x55, 0x84, 0x8c, 0x95, 0x03,
	0xb2, 0x90, 0xb0, 0x91, 0xb9, 0x71, 0x2c, 0x41, 0x6a, 0x45, 0x8b, 0x22, 0x83, 0x04, 0xe2, 0xb6,
	0x6e, 0x8c, 0xbd, 0x22, 0xf6, 0x5a, 0xeb, 0x8d, 0x68, 0x9f, 0x85, 0x0b, 0xbc, 0x4d, 0x8f, 0x7d,
	0x02, 0x04, 0xe1, 0x45, 0x90, 0x37, 0xb5, 0xeb, 0x86, 0x9c, 0x3c, 0xbf, 0x6f, 0x3f, 0x7f, 0x1e,
	0xcf, 0x0e, 0x1c, 0x15, 0x4c, 0x2a, 0xae, 0xb8, 0xc8, 0xbd, 0x42, 0x0a, 0x25, 0xd0, 0x6a, 0x84,
	0x19, 0x14, 0x6b, 0x76, 0x2b, 0xcf, 0x9e, 0x27, 0x5c, 0xa5, 0x9b, 0xc8, 0xbb, 0x10, 0x99, 0x9f,
	0x88, 0x44, 0xf8, 0x5a, 0x8e, 0x36, 0x5f, 0x34, 0x69, 0xd0, 0xd5, 0xce, 0x3e, 0xff, 0xde, 0x85,
	0x87, 0xcb, 0x3a, 0xe8, 0x3c, 0x56, 0x6c, 0xc5, 0x14, 0x43, 0x0a, 0x83, 0x0f, 0x2c, 0x5a, 0xc7,
	0xa7, 0x0b, 0x4a, 0x1c, 0xe2, 0x9a, 0x61, 0x8d, 0xf8, 0x18, 0x2c, 0x5d, 0xbe, 0x63, 0x59, 0x4c,
	0xbb, 0x0e, 0x71, 0xad, 0xf0, 0x4e, 0xc0, 0x39, 0x3c, 0x58, 0x30, 0xc5, 0x22, 0x56, 0xee, 0x0c,
	0x86, 0x36, 0xdc, 0xd3, 0x30, 0x80, 0xfe, 0x79, 0xac, 0x52, 0xb1, 0xa2, 0xa6, 0x43, 0xdc, 0x49,
	0x30, 0xf3, 0xee, 0xfe, 0xac, 0xdd, 0x49, 0x2a, 0x56, 0xe1, 0xad, 0x13, 0x1d, 0x18, 0x2d, 0xe2,
	0xf2, 0x42, 0xf2, 0xa2, 0x3a, 0xa4, 0x3d, 0x1d, 0xdb, 0x96, 0xaa, 0x8e, 0x5f, 0x8b, 0xf5, 0x26,
	0xcb, 0x4b, 0xda, 0x77, 0x0c, 0xd7, 0x0a, 0x6b, 0xc4, 0x57, 0x00, 0x4d, 0x6c, 0x49, 0x07, 0x8e,
	0xe1, 0x8e, 0x82, 0x47, 0x87, 0xbe, 0x79, 0x6c, 0x5e, 0xff, 0x7a, 0xd2, 0x09, 0x5b, 0xee, 0xf9,
	0xcf, 0x2e, 0x58, 0x0d, 0x56, 0x5d, 0x34, 0xd0, 0x4c, 0xa6, 0x2d, 0xa1, 0x07, 0xd8, 0xe0, 0xfe,
	0x98, 0x0e, 0x9c, 0xe0, 0x53, 0x98, 0x2c, 0x25, 0xcf, 0x98, 0xbc, 0xaa, 0xc7, 0x6d, 0xe8, 0xd0,
	0x3d, 0x15, 0x11, 0x4c, 0x9d, 0x64, 0xea, 0x24, 0x5d, 0xe3, 0x0c, 0x86, 0x4b, 0x51, 0xf2, 0x66,
	0x20, 0xe3, 0xb0, 0xe1, 0x6a, 0x1a, 0x6f, 0x2e, 0x0b, 0xf9, 0x5e, 0x49, 0xda, 0xd7, 0xaf, 0xd4,
	0x88, 0x36, 0x98, 0x55, 0x49, 0x07, 0x0e, 0x71, 0x47, 0x01, 0x78, 0x7a, 0x73, 0x2a, 0x25, 0xd4,
	0x3a, 0xbe, 0x80, 0x71, 0xf5, 0xfc, 0xc8, 0x55, 0x1a, 0x8a, 0x6f, 0xa7, 0x0b, 0x3a, 0xfc, 0xcf,
	0x78, 0xdf, 0xf0, 0xec, 0x13, 0x1c, 0xed, 0x5d, 0x1b, 0x0e, 0xc0, 0x78, 0x1b, 0x5f, 0x4d, 0x3b,
	0x38, 0x06, 0xeb, 0x8c, 0xe7, 0x31, 0x93, 0x15, 0x12, 0x1c, 0x82, 0x79, 0xc2, 0xca, 0x74, 0xda,
	0xc5, 0x09, 0xc0, 0xee, 0x40, 0xb3, 0x81, 0x16, 0xf4, 0x42, 0x96, 0x27, 0xf1, 0xd4, 0xac, 0x4c,
	0x67, 0xbc, 0x54, 0xd3, 0xde, 0xf1, 0xc9, 0xcd, 0x1f, 0x9b, 0x5c, 0x6f, 0x6d, 0x72, 0xb3, 0xb5,
	0xc9, 0xef, 0xad, 0xdd, 0xf9, 0xf1, 0xd7, 0x26, 0x9f, 0x83, 0xd6, 0x82, 0x67, 0x4c, 0x49, 0x7e,
	0x29, 0x24, 0x4f, 0x78, 0x5e, 0x43, 0x1e, 0xfb, 0xc5, 0xd7, 0xc4, 0x2f, 0x22, 0xbf, 0xb9, 0xe3,
	0xa8, 0xaf, 0x97, 0xfd, 0xe5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0xf8, 0x25, 0x16, 0x45,
	0x03, 0x00, 0x00,
}

func (m *PartitionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Partitions) > 0 {
		for iNdEx := len(m.Partitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPartition(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Columns[iNdEx])
			copy(dAtA[i:], m.Columns[iNdEx])
			i = encodeVarintPartition(dAtA, i, uint64(len(m.Columns[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPartition(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Method != 0 {
		i = encodeVarintPartition(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DatabaseName) > 0 {
		i -= len(m.DatabaseName)
		copy(dAtA[i:], m.DatabaseName)
		i = encodeVarintPartition(dAtA, i, uint64(len(m.DatabaseName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintPartition(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x12
	}
	if m.TableID != 0 {
		i = encodeVarintPartition(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Partition) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Partition) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Partition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExprWithRowID != nil {
		{
			size, err := m.ExprWithRowID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPartition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Expr != nil {
		{
			size, err := m.Expr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPartition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExprStr) > 0 {
		i -= len(m.ExprStr)
		copy(dAtA[i:], m.ExprStr)
		i = encodeVarintPartition(dAtA, i, uint64(len(m.ExprStr)))
		i--
		dAtA[i] = 0x32
	}
	if m.Position != 0 {
		i = encodeVarintPartition(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPartition(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.PrimaryTableID != 0 {
		i = encodeVarintPartition(dAtA, i, uint64(m.PrimaryTableID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PartitionTableName) > 0 {
		i -= len(m.PartitionTableName)
		copy(dAtA[i:], m.PartitionTableName)
		i = encodeVarintPartition(dAtA, i, uint64(len(m.PartitionTableName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PartitionID != 0 {
		i = encodeVarintPartition(dAtA, i, uint64(m.PartitionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPartition(dAtA []byte, offset int, v uint64) int {
	offset -= sovPartition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartitionMetadata) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovPartition(uint64(m.TableID))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovPartition(uint64(l))
	}
	l = len(m.DatabaseName)
	if l > 0 {
		n += 1 + l + sovPartition(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovPartition(uint64(m.Method))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPartition(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovPartition(uint64(l))
		}
	}
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.ProtoSize()
			n += 1 + l + sovPartition(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Partition) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovPartition(uint64(m.PartitionID))
	}
	l = len(m.PartitionTableName)
	if l > 0 {
		n += 1 + l + sovPartition(uint64(l))
	}
	if m.PrimaryTableID != 0 {
		n += 1 + sovPartition(uint64(m.PrimaryTableID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPartition(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovPartition(uint64(m.Position))
	}
	l = len(m.ExprStr)
	if l > 0 {
		n += 1 + l + sovPartition(uint64(l))
	}
	if m.Expr != nil {
		l = m.Expr.ProtoSize()
		n += 1 + l + sovPartition(uint64(l))
	}
	if m.ExprWithRowID != nil {
		l = m.ExprWithRowID.ProtoSize()
		n += 1 + l + sovPartition(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPartition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPartition(x uint64) (n int) {
	return sovPartition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PartitionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= PartitionMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, Partition{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPartition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPartition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Partition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Partition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Partition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionTableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionTableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryTableID", wireType)
			}
			m.PrimaryTableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryTableID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExprStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExprStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expr == nil {
				m.Expr = &plan.Expr{}
			}
			if err := m.Expr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExprWithRowID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExprWithRowID == nil {
				m.ExprWithRowID = &plan.Expr{}
			}
			if err := m.ExprWithRowID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPartition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPartition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPartition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPartition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPartition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPartition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPartition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPartition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPartition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPartition = fmt.Errorf("proto: unexpected end of group")
)
