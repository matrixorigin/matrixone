// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hakeeper.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ConfigChangeType change replica type
type ConfigChangeType int32

const (
	AddNode    ConfigChangeType = 0
	RemoveNode ConfigChangeType = 1
	StartNode  ConfigChangeType = 2
	StopNode   ConfigChangeType = 3
)

var ConfigChangeType_name = map[int32]string{
	0: "AddNode",
	1: "RemoveNode",
	2: "StartNode",
	3: "StopNode",
}

var ConfigChangeType_value = map[string]int32{
	"AddNode":    0,
	"RemoveNode": 1,
	"StartNode":  2,
	"StopNode":   3,
}

func (x ConfigChangeType) String() string {
	return proto.EnumName(ConfigChangeType_name, int32(x))
}

func (ConfigChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e1506f3aa5330eb, []int{0}
}

// ServiceType specifies type of service
type ServiceType int32

const (
	LogService ServiceType = 0
	DnService  ServiceType = 1
)

var ServiceType_name = map[int32]string{
	0: "LogService",
	1: "DnService",
}

var ServiceType_value = map[string]int32{
	"LogService": 0,
	"DnService":  1,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e1506f3aa5330eb, []int{1}
}

// Replica of the shard
type Replica struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	InitialMember        bool     `protobuf:"varint,4,opt,name=initialMember,proto3" json:"initialMember,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Replica) Reset()         { *m = Replica{} }
func (m *Replica) String() string { return proto.CompactTextString(m) }
func (*Replica) ProtoMessage()    {}
func (*Replica) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e1506f3aa5330eb, []int{0}
}
func (m *Replica) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Replica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Replica.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Replica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Replica.Merge(m, src)
}
func (m *Replica) XXX_Size() int {
	return m.Size()
}
func (m *Replica) XXX_DiscardUnknown() {
	xxx_messageInfo_Replica.DiscardUnknown(m)
}

var xxx_messageInfo_Replica proto.InternalMessageInfo

func (m *Replica) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Replica) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Replica) GetInitialMember() bool {
	if m != nil {
		return m.InitialMember
	}
	return false
}

// ChangePeer change peer
type ConfigChange struct {
	Replica              Replica          `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica"`
	ChangeType           ConfigChangeType `protobuf:"varint,2,opt,name=changeType,proto3,enum=pb.ConfigChangeType" json:"changeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ConfigChange) Reset()         { *m = ConfigChange{} }
func (m *ConfigChange) String() string { return proto.CompactTextString(m) }
func (*ConfigChange) ProtoMessage()    {}
func (*ConfigChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e1506f3aa5330eb, []int{1}
}
func (m *ConfigChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigChange.Merge(m, src)
}
func (m *ConfigChange) XXX_Size() int {
	return m.Size()
}
func (m *ConfigChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigChange.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigChange proto.InternalMessageInfo

func (m *ConfigChange) GetReplica() Replica {
	if m != nil {
		return m.Replica
	}
	return Replica{}
}

func (m *ConfigChange) GetChangeType() ConfigChangeType {
	if m != nil {
		return m.ChangeType
	}
	return AddNode
}

// ScheduleCommand shard heartbeat response.
type ScheduleCommand struct {
	ShardID      uint64        `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	ShardEpoch   uint64        `protobuf:"varint,2,opt,name=shardEpoch,proto3" json:"shardEpoch,omitempty"`
	ConfigChange *ConfigChange `protobuf:"bytes,4,opt,name=configChange,proto3" json:"configChange,omitempty"`
	// Which service does this command schedule for
	ServiceType          ServiceType `protobuf:"varint,11,opt,name=serviceType,proto3,enum=pb.ServiceType" json:"serviceType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ScheduleCommand) Reset()         { *m = ScheduleCommand{} }
func (m *ScheduleCommand) String() string { return proto.CompactTextString(m) }
func (*ScheduleCommand) ProtoMessage()    {}
func (*ScheduleCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e1506f3aa5330eb, []int{2}
}
func (m *ScheduleCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleCommand.Merge(m, src)
}
func (m *ScheduleCommand) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleCommand proto.InternalMessageInfo

func (m *ScheduleCommand) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *ScheduleCommand) GetShardEpoch() uint64 {
	if m != nil {
		return m.ShardEpoch
	}
	return 0
}

func (m *ScheduleCommand) GetConfigChange() *ConfigChange {
	if m != nil {
		return m.ConfigChange
	}
	return nil
}

func (m *ScheduleCommand) GetServiceType() ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return LogService
}

func init() {
	proto.RegisterEnum("pb.ConfigChangeType", ConfigChangeType_name, ConfigChangeType_value)
	proto.RegisterEnum("pb.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterType((*Replica)(nil), "pb.Replica")
	proto.RegisterType((*ConfigChange)(nil), "pb.ConfigChange")
	proto.RegisterType((*ScheduleCommand)(nil), "pb.ScheduleCommand")
}

func init() { proto.RegisterFile("hakeeper.proto", fileDescriptor_5e1506f3aa5330eb) }

var fileDescriptor_5e1506f3aa5330eb = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xd1, 0x8e, 0x93, 0x40,
	0x14, 0x86, 0x19, 0x24, 0xcb, 0xee, 0xa1, 0xdb, 0x25, 0x13, 0x63, 0x88, 0x17, 0x6c, 0xd3, 0x78,
	0xd1, 0xac, 0xca, 0xc6, 0xba, 0x2f, 0x60, 0x5b, 0x2f, 0x36, 0xa9, 0x5e, 0x0c, 0xde, 0x79, 0x05,
	0xcc, 0x14, 0x26, 0x16, 0x66, 0xa4, 0xd0, 0xc4, 0xf7, 0xf2, 0x21, 0x7a, 0xd9, 0x27, 0x68, 0x94,
	0x27, 0x31, 0x1c, 0xda, 0x48, 0x7b, 0x77, 0xfe, 0x7f, 0xfe, 0x9f, 0xef, 0x9c, 0x04, 0x18, 0x66,
	0xd1, 0x0f, 0x21, 0xb4, 0x28, 0x03, 0x5d, 0xaa, 0x4a, 0x51, 0x53, 0xc7, 0xaf, 0xdf, 0xa7, 0xb2,
	0xca, 0xea, 0x38, 0x48, 0x54, 0xfe, 0x98, 0xaa, 0x54, 0x3d, 0xe2, 0x53, 0x5c, 0xaf, 0x50, 0xa1,
	0xc0, 0xa9, 0xab, 0x8c, 0xbf, 0x83, 0xcd, 0x84, 0x5e, 0xcb, 0x24, 0xa2, 0xaf, 0xc0, 0x94, 0xdc,
	0x23, 0x23, 0x32, 0xb1, 0x66, 0x57, 0xcd, 0xe1, 0xde, 0x7c, 0x5e, 0x30, 0x53, 0x72, 0x4a, 0xc1,
	0xaa, 0x6b, 0xc9, 0x3d, 0x73, 0x44, 0x26, 0x37, 0x0c, 0x67, 0xfa, 0x06, 0x6e, 0x65, 0x21, 0x2b,
	0x19, 0xad, 0xbf, 0x88, 0x3c, 0x16, 0xa5, 0x67, 0x8d, 0xc8, 0xe4, 0x9a, 0x9d, 0x9b, 0xe3, 0x9f,
	0x30, 0x98, 0xab, 0x62, 0x25, 0xd3, 0x79, 0x16, 0x15, 0xa9, 0xa0, 0x6f, 0xc1, 0x2e, 0x3b, 0x18,
	0x62, 0x9c, 0xa9, 0x13, 0xe8, 0x38, 0x38, 0xf2, 0x67, 0xd6, 0xee, 0x70, 0x6f, 0xb0, 0x53, 0x82,
	0x3e, 0x01, 0x24, 0x58, 0xfb, 0xf6, 0x4b, 0x0b, 0x84, 0x0f, 0xa7, 0x2f, 0xdb, 0x7c, 0xff, 0x93,
	0xed, 0x1b, 0xeb, 0xe5, 0xc6, 0xbf, 0x09, 0xdc, 0x85, 0x49, 0x26, 0x78, 0xbd, 0x16, 0x73, 0x95,
	0xe7, 0x51, 0xc1, 0xa9, 0x07, 0xf6, 0x26, 0x8b, 0x4a, 0xfe, 0xbc, 0xe8, 0xae, 0x63, 0x27, 0x49,
	0x7d, 0x00, 0x1c, 0x3f, 0x6b, 0x95, 0x64, 0xc8, 0xb0, 0x58, 0xcf, 0xa1, 0x4f, 0x30, 0x48, 0x7a,
	0x34, 0xbc, 0xd2, 0x99, 0xba, 0x97, 0x5b, 0xb0, 0xb3, 0x14, 0xfd, 0x00, 0xce, 0x46, 0x94, 0x5b,
	0x99, 0x74, 0xab, 0x3b, 0xb8, 0xfa, 0x5d, 0x5b, 0x0a, 0xff, 0xdb, 0xac, 0x9f, 0x79, 0x58, 0x82,
	0x7b, 0x79, 0x16, 0x75, 0xc0, 0xfe, 0xc4, 0xf9, 0x57, 0xc5, 0x85, 0x6b, 0xd0, 0x21, 0x00, 0x13,
	0xb9, 0xda, 0x0a, 0xd4, 0x84, 0xde, 0xc2, 0x4d, 0x58, 0x45, 0x65, 0x85, 0xd2, 0xa4, 0x03, 0xb8,
	0x0e, 0x2b, 0xa5, 0x51, 0xbd, 0x78, 0x78, 0x07, 0x4e, 0x8f, 0xd4, 0x76, 0x97, 0x2a, 0x3d, 0x3a,
	0xae, 0xd1, 0x76, 0x17, 0xc5, 0x49, 0x92, 0x99, 0xbb, 0xff, 0xeb, 0x1b, 0xbb, 0xc6, 0x27, 0xfb,
	0xc6, 0x27, 0x7f, 0x1a, 0x9f, 0xc4, 0x57, 0xf8, 0x6f, 0x7c, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff,
	0xb5, 0x33, 0xb3, 0x0b, 0x60, 0x02, 0x00, 0x00,
}

func (m *Replica) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replica) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Replica) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InitialMember {
		i--
		if m.InitialMember {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintHakeeper(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintHakeeper(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangeType != 0 {
		i = encodeVarintHakeeper(dAtA, i, uint64(m.ChangeType))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Replica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHakeeper(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ScheduleCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServiceType != 0 {
		i = encodeVarintHakeeper(dAtA, i, uint64(m.ServiceType))
		i--
		dAtA[i] = 0x58
	}
	if m.ConfigChange != nil {
		{
			size, err := m.ConfigChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHakeeper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ShardEpoch != 0 {
		i = encodeVarintHakeeper(dAtA, i, uint64(m.ShardEpoch))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintHakeeper(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHakeeper(dAtA []byte, offset int, v uint64) int {
	offset -= sovHakeeper(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Replica) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovHakeeper(uint64(m.ID))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovHakeeper(uint64(l))
	}
	if m.InitialMember {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Replica.Size()
	n += 1 + l + sovHakeeper(uint64(l))
	if m.ChangeType != 0 {
		n += 1 + sovHakeeper(uint64(m.ChangeType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScheduleCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovHakeeper(uint64(m.ShardID))
	}
	if m.ShardEpoch != 0 {
		n += 1 + sovHakeeper(uint64(m.ShardEpoch))
	}
	if m.ConfigChange != nil {
		l = m.ConfigChange.Size()
		n += 1 + l + sovHakeeper(uint64(l))
	}
	if m.ServiceType != 0 {
		n += 1 + sovHakeeper(uint64(m.ServiceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHakeeper(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHakeeper(x uint64) (n int) {
	return sovHakeeper(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Replica) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHakeeper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replica: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replica: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHakeeper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHakeeper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMember", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialMember = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHakeeper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHakeeper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHakeeper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHakeeper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHakeeper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Replica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			m.ChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeType |= ConfigChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHakeeper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHakeeper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHakeeper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardEpoch", wireType)
			}
			m.ShardEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHakeeper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHakeeper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigChange == nil {
				m.ConfigChange = &ConfigChange{}
			}
			if err := m.ConfigChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHakeeper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHakeeper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHakeeper(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHakeeper
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHakeeper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHakeeper
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHakeeper
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHakeeper
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHakeeper        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHakeeper          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHakeeper = fmt.Errorf("proto: unexpected end of group")
)
