// Code generated by tool; DO NOT EDIT.
package config

import (
	"fmt"
	"github.com/BurntSushi/toml"
	"sync"
)

//all parameters in the system
type SystemVariables struct {
	//read and write lock
	rwlock sync.RWMutex

	/**
	Name:	rootname
	Scope:	[global]
	Access:	[file]
	DataType:	string
	DomainType:	set
	Values:	[root]
	Comment:	root name
	UpdateMode:	fix
	*/
	rootname string

	/**
	Name:	rootpassword
	Scope:	[global]
	Access:	[file]
	DataType:	string
	DomainType:	set
	Values:	[]
	Comment:	root password
	UpdateMode:	dynamic
	*/
	rootpassword string

	/**
	Name:	dumpuser
	Scope:	[global]
	Access:	[file]
	DataType:	string
	DomainType:	set
	Values:	[dump]
	Comment:	dump user name
	UpdateMode:	fix
	*/
	dumpuser string

	/**
	Name:	dumppassword
	Scope:	[global]
	Access:	[file]
	DataType:	string
	DomainType:	set
	Values:	[111]
	Comment:	dump user password
	UpdateMode:	fix
	*/
	dumppassword string

	/**
	Name:	port
	Scope:	[global]
	Access:	[file]
	DataType:	int64
	DomainType:	set
	Values:	[6001]
	Comment:	port
	UpdateMode:	fix
	*/
	port int64

	/**
	Name:	host
	Scope:	[global]
	Access:	[file]
	DataType:	string
	DomainType:	set
	Values:	[localhost 127.0.0.1 0.0.0.0]
	Comment:	listening ip
	UpdateMode:	fix
	*/
	host string

	//parameter name -> parameter definition string
	name2definition map[string]string
} //end SystemVariables

//all parameters can be set in the configuration file.
type varsConfig struct {
	//read and write lock
	rwlock sync.RWMutex

	/**
	Name:	rootpassword
	Scope:	[global]
	Access:	[file]
	DataType:	string
	DomainType:	set
	Values:	[]
	Comment:	root password
	UpdateMode:	dynamic
	*/
	Rootpassword string `toml:"rootpassword"`

	//parameter name -> updated flag
	name2updatedFlags map[string]bool
} //end varsConfig

/**
prepare something before anything else.
it is unsafe in multi-thread environment.
*/
func (ap *SystemVariables) prepareAnything() {
	if ap.name2definition == nil {
		ap.name2definition = make(map[string]string)
	}
}

/**
set parameter and its string of the definition.
*/
func (ap *SystemVariables) PrepareDefinition() {
	ap.rwlock.Lock()
	defer ap.rwlock.Unlock()

	ap.prepareAnything()

	ap.name2definition["rootname"] = "	Name:	rootname	Scope:	[global]	Access:	[file]	DataType:	string	DomainType:	set	Values:	[root]	Comment:	root name	UpdateMode:	fix	"

	ap.name2definition["rootpassword"] = "	Name:	rootpassword	Scope:	[global]	Access:	[file]	DataType:	string	DomainType:	set	Values:	[]	Comment:	root password	UpdateMode:	dynamic	"

	ap.name2definition["dumpuser"] = "	Name:	dumpuser	Scope:	[global]	Access:	[file]	DataType:	string	DomainType:	set	Values:	[dump]	Comment:	dump user name	UpdateMode:	fix	"

	ap.name2definition["dumppassword"] = "	Name:	dumppassword	Scope:	[global]	Access:	[file]	DataType:	string	DomainType:	set	Values:	[111]	Comment:	dump user password	UpdateMode:	fix	"

	ap.name2definition["port"] = "	Name:	port	Scope:	[global]	Access:	[file]	DataType:	int64	DomainType:	set	Values:	[6001]	Comment:	port	UpdateMode:	fix	"

	ap.name2definition["host"] = "	Name:	host	Scope:	[global]	Access:	[file]	DataType:	string	DomainType:	set	Values:	[localhost 127.0.0.1 0.0.0.0]	Comment:	listening ip	UpdateMode:	fix	"

}

/**
get the definition of the parameter.
*/
func (ap *SystemVariables) GetDefinition(name string) (string, error) {
	ap.rwlock.RLock()
	defer ap.rwlock.RUnlock()
	ap.prepareAnything()
	if p, ok := ap.name2definition[name]; !ok {
		return "", fmt.Errorf("there is no parameter %s", name)
	} else {
		return p, nil
	}
}

/**
check if there is the parameter
*/
func (ap *SystemVariables) HasParameter(name string) bool {
	ap.rwlock.RLock()
	defer ap.rwlock.RUnlock()
	ap.prepareAnything()
	if _, ok := ap.name2definition[name]; !ok {
		return false
	} else {
		return true
	}
}

/**
Load the initial values of all parameters.
*/
func (ap *SystemVariables) LoadInitialValues() error {
	ap.PrepareDefinition()
	var err error

	rootnamechoices := []string{

		"root",
	}
	if len(rootnamechoices) != 0 {
		if err = ap.setRootname(rootnamechoices[0]); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Rootname", err)
		}
	} else {
		//empty string
		if err = ap.setRootname(""); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Rootname", err)
		}
	}

	rootpasswordchoices := []string{

		"",
	}
	if len(rootpasswordchoices) != 0 {
		if err = ap.setRootpassword(rootpasswordchoices[0]); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Rootpassword", err)
		}
	} else {
		//empty string
		if err = ap.setRootpassword(""); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Rootpassword", err)
		}
	}

	dumpuserchoices := []string{

		"dump",
	}
	if len(dumpuserchoices) != 0 {
		if err = ap.setDumpuser(dumpuserchoices[0]); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Dumpuser", err)
		}
	} else {
		//empty string
		if err = ap.setDumpuser(""); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Dumpuser", err)
		}
	}

	dumppasswordchoices := []string{

		"111",
	}
	if len(dumppasswordchoices) != 0 {
		if err = ap.setDumppassword(dumppasswordchoices[0]); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Dumppassword", err)
		}
	} else {
		//empty string
		if err = ap.setDumppassword(""); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Dumppassword", err)
		}
	}

	portchoices := []int64{

		6001,
	}
	if len(portchoices) != 0 {
		if err = ap.setPort(portchoices[0]); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Port", err)
		}
	} else {

		if err = ap.setPort(0); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Port", err)
		}

	}

	hostchoices := []string{

		"localhost",

		"127.0.0.1",

		"0.0.0.0",
	}
	if len(hostchoices) != 0 {
		if err = ap.setHost(hostchoices[0]); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Host", err)
		}
	} else {
		//empty string
		if err = ap.setHost(""); err != nil {
			return fmt.Errorf("set%s failed.error:%v", "Host", err)
		}
	}

	return nil
}

/**
Get the value of the parameter rootname
*/
func (ap *SystemVariables) GetRootname() string {
	ap.rwlock.RLock()
	defer ap.rwlock.RUnlock()
	return ap.rootname
}

/**
Get the value of the parameter rootpassword
*/
func (ap *SystemVariables) GetRootpassword() string {
	ap.rwlock.RLock()
	defer ap.rwlock.RUnlock()
	return ap.rootpassword
}

/**
Get the value of the parameter dumpuser
*/
func (ap *SystemVariables) GetDumpuser() string {
	ap.rwlock.RLock()
	defer ap.rwlock.RUnlock()
	return ap.dumpuser
}

/**
Get the value of the parameter dumppassword
*/
func (ap *SystemVariables) GetDumppassword() string {
	ap.rwlock.RLock()
	defer ap.rwlock.RUnlock()
	return ap.dumppassword
}

/**
Get the value of the parameter port
*/
func (ap *SystemVariables) GetPort() int64 {
	ap.rwlock.RLock()
	defer ap.rwlock.RUnlock()
	return ap.port
}

/**
Get the value of the parameter host
*/
func (ap *SystemVariables) GetHost() string {
	ap.rwlock.RLock()
	defer ap.rwlock.RUnlock()
	return ap.host
}

/**
Set the value of the parameter rootpassword
*/
func (ap *SystemVariables) SetRootpassword(value string) error {
	return ap.setRootpassword(value)
}

/**
Set the value of the parameter rootname
*/
func (ap *SystemVariables) setRootname(value string) error {
	ap.rwlock.Lock()
	defer ap.rwlock.Unlock()

	choices := []string{

		"root",
	}
	if len(choices) != 0 {
		if !isInSlice(value, choices) {
			return fmt.Errorf("setRootname,the value %s is not in set %v", value, choices)
		}
	} //else means any string

	ap.rootname = value
	return nil
}

/**
Set the value of the parameter rootpassword
*/
func (ap *SystemVariables) setRootpassword(value string) error {
	ap.rwlock.Lock()
	defer ap.rwlock.Unlock()

	choices := []string{

		"",
	}
	if len(choices) != 0 {
		if !isInSlice(value, choices) {
			return fmt.Errorf("setRootpassword,the value %s is not in set %v", value, choices)
		}
	} //else means any string

	ap.rootpassword = value
	return nil
}

/**
Set the value of the parameter dumpuser
*/
func (ap *SystemVariables) setDumpuser(value string) error {
	ap.rwlock.Lock()
	defer ap.rwlock.Unlock()

	choices := []string{

		"dump",
	}
	if len(choices) != 0 {
		if !isInSlice(value, choices) {
			return fmt.Errorf("setDumpuser,the value %s is not in set %v", value, choices)
		}
	} //else means any string

	ap.dumpuser = value
	return nil
}

/**
Set the value of the parameter dumppassword
*/
func (ap *SystemVariables) setDumppassword(value string) error {
	ap.rwlock.Lock()
	defer ap.rwlock.Unlock()

	choices := []string{

		"111",
	}
	if len(choices) != 0 {
		if !isInSlice(value, choices) {
			return fmt.Errorf("setDumppassword,the value %s is not in set %v", value, choices)
		}
	} //else means any string

	ap.dumppassword = value
	return nil
}

/**
Set the value of the parameter port
*/
func (ap *SystemVariables) setPort(value int64) error {
	ap.rwlock.Lock()
	defer ap.rwlock.Unlock()

	choices := []int64{

		6001,
	}
	if len(choices) != 0 {
		if !isInSliceInt64(value, choices) {
			return fmt.Errorf("setPort,the value %d is not in set %v", value, choices)
		}
	} //else means any int64

	ap.port = value
	return nil
}

/**
Set the value of the parameter host
*/
func (ap *SystemVariables) setHost(value string) error {
	ap.rwlock.Lock()
	defer ap.rwlock.Unlock()

	choices := []string{

		"localhost",

		"127.0.0.1",

		"0.0.0.0",
	}
	if len(choices) != 0 {
		if !isInSlice(value, choices) {
			return fmt.Errorf("setHost,the value %s is not in set %v", value, choices)
		}
	} //else means any string

	ap.host = value
	return nil
}

/**
prepare something before anything else.
it is unsafe in multi-thread environment.
*/
func (config *varsConfig) prepareAnything() {
	if config.name2updatedFlags == nil {
		config.name2updatedFlags = make(map[string]bool)
	}
}

/**
reset update flags of configuration items
*/
func (config *varsConfig) resetUpdatedFlags() {
	config.rwlock.Lock()
	defer config.rwlock.Unlock()
	config.prepareAnything()

	config.name2updatedFlags["rootpassword"] = false

}

/**
set update flag of configuration item
*/
func (config *varsConfig) setUpdatedFlag(name string, updated bool) {
	config.rwlock.Lock()
	defer config.rwlock.Unlock()
	config.prepareAnything()
	config.name2updatedFlags[name] = updated
}

/**
get update flag of configuration item
*/
func (config *varsConfig) getUpdatedFlag(name string) bool {
	config.rwlock.RLock()
	defer config.rwlock.RUnlock()
	config.prepareAnything()
	return config.name2updatedFlags[name]
}

/**
Load parameters' values in the configuration string.
*/
func (config *varsConfig) LoadConfigurationFromString(input string) error {
	config.resetUpdatedFlags()

	metadata, err := toml.Decode(input, config)
	if err != nil {
		return err
	} else if failed := metadata.Undecoded(); len(failed) > 0 {
		var failedItems []string
		for _, item := range failed {
			failedItems = append(failedItems, item.String())
		}
		return fmt.Errorf("decode failed %s. error:%v", failedItems, err)
	}

	for _, k := range metadata.Keys() {
		config.setUpdatedFlag(k[0], true)
	}

	return nil
}

/**
Load parameters' values in the configuration file.
*/
func (config *varsConfig) LoadConfigurationFromFile(fname string) error {
	config.resetUpdatedFlags()

	metadata, err := toml.DecodeFile(fname, config)
	if err != nil {
		return err
	} else if failed := metadata.Undecoded(); len(failed) > 0 {
		var failedItems []string
		for _, item := range failed {
			failedItems = append(failedItems, item.String())
		}
		return fmt.Errorf("decode failed %s. error:%v", failedItems, err)
	}

	for _, k := range metadata.Keys() {
		config.setUpdatedFlag(k[0], true)
	}

	return nil
}

/**
Update parameters' values with configuration.
*/
func (ap *SystemVariables) UpdateParametersWithConfiguration(config *varsConfig) error {
	var err error

	if config.getUpdatedFlag("rootpassword") {
		if err = ap.setRootpassword(config.Rootpassword); err != nil {
			return fmt.Errorf("update parameter rootpassword failed.error:%v", err)
		}
	}

	return nil
}

/**
Load configuration from file into varsConfig.
Then update items into SystemVariables
*/
func LoadvarsConfigFromFile(filename string, params *SystemVariables) error {
	config := &varsConfig{}
	if err := config.LoadConfigurationFromFile(filename); err != nil {
		return err
	}

	if err := params.UpdateParametersWithConfiguration(config); err != nil {
		return err
	}
	return nil
}
