// Code generated by tool; DO NOT EDIT.
package config

import (
	"sync"
	"testing"
)

func TestVariables_LoadInitialValues(t *testing.T) {
	ap := &Variables{}
	if err := ap.LoadInitialValues(); err != nil {
		t.Errorf("LoadInitialValues failed. error:%v", err)
	}
}

func isvconfigEqual(c1, c2 *vconfig) bool {

	if c1.Autoload != c2.Autoload {
		return false
	}

	if c1.Rootname != c2.Rootname {
		return false
	}

	if c1.Rootpassword != c2.Rootpassword {
		return false
	}

	if c1.Dumpuser != c2.Dumpuser {
		return false
	}

	if c1.Dumppassword != c2.Dumppassword {
		return false
	}

	if c1.Port != c2.Port {
		return false
	}

	if c1.Ip != c2.Ip {
		return false
	}

	return true
}

func Test_vconfig_LoadConfigurationFromString(t *testing.T) {
	t1 := `

autoload= false

rootname= "root"

rootpassword= ""

dumpuser= "dump"

dumppassword= "111"

port=9000

ip= "localhost"
		
`
	t1_config := &vconfig{
		rwlock: sync.RWMutex{},

		Autoload: false,

		Rootname: "root",

		Rootpassword: "",

		Dumpuser: "dump",

		Dumppassword: "111",

		Port: 9000,

		Ip: "localhost",

		name2updatedFlags: nil,
	}

	type args struct {
		input  string
		config *vconfig
	}
	tests := []struct {
		name     string
		args     args
		wantErr  bool
		wantErr2 bool
		wantErr3 bool
	}{
		{"t1", args{t1, t1_config}, false, false, false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ap := &Variables{}
			if err := ap.LoadInitialValues(); err != nil {
				t.Errorf("LoadInitialValues failed.error %v", err)
			}
			config := &vconfig{}
			if err := config.LoadConfigurationFromString(tt.args.input); (err != nil) != tt.wantErr {
				t.Errorf("LoadConfigurationFromString() error = %v, wantErr %v", err, tt.wantErr)
			} else if err != nil {
				return
			}

			if err := ap.UpdateParametersWithConfiguration(config); (err != nil) != tt.wantErr2 {
				t.Errorf("UpdateParametersWithConfiguration failed. error:%v", err)
			}

			if (isvconfigEqual(config, tt.args.config) != true) != tt.wantErr3 {
				t.Errorf("Configuration are not equal. %v vs %v ", config, tt.args.config)
				return
			}
		})
	}
}
