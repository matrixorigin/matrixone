// Code generated by command: go run fplus_amd64.go -out fplus_amd64.s. DO NOT EDIT.

#include "textflag.h"

// func fPlusAvx(x []float64, y []float64, r []float64)
// Requires: AVX
TEXT Â·fPlusAvx(SB), NOSPLIT, $0-72
	MOVQ x_base+0(FP), AX
	MOVQ y_base+24(FP), CX
	MOVQ r_base+48(FP), DX
	MOVQ x_len+8(FP), BX

blockloop:
	CMPQ    BX, $0x00000018
	JL      tailloop
	VMOVUPD (AX), Y0
	VMOVUPD 32(AX), Y1
	VMOVUPD 64(AX), Y2
	VMOVUPD 96(AX), Y3
	VMOVUPD 128(AX), Y4
	VMOVUPD 160(AX), Y5
	VADDPD  (CX), Y0, Y0
	VADDPD  32(CX), Y1, Y1
	VADDPD  64(CX), Y2, Y2
	VADDPD  96(CX), Y3, Y3
	VADDPD  128(CX), Y4, Y4
	VADDPD  160(CX), Y5, Y5
	VMOVUPD Y0, (DX)
	VMOVUPD Y1, 32(DX)
	VMOVUPD Y2, 64(DX)
	VMOVUPD Y3, 96(DX)
	VMOVUPD Y4, 128(DX)
	VMOVUPD Y5, 160(DX)
	ADDQ    $0x000000c0, AX
	ADDQ    $0x000000c0, CX
	ADDQ    $0x000000c0, DX
	SUBQ    $0x00000018, BX
	JMP     blockloop

tailloop:
	CMPQ    BX, $0x00000004
	JL      done
	VMOVUPD (AX), Y0
	VADDPD  (CX), Y0, Y0
	VMOVUPD Y0, (DX)
	ADDQ    $0x00000020, AX
	ADDQ    $0x00000020, CX
	ADDQ    $0x00000020, DX
	SUBQ    $0x00000004, BX
	JMP     tailloop

done:
	RET
