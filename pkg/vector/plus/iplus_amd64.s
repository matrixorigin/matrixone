// Code generated by command: go run iplus_amd64.go -out iplus_amd64.s. DO NOT EDIT.

#include "textflag.h"

// func iPlusAvx(x []int64, y []int64, r []int64)
// Requires: AVX, AVX2
TEXT Â·iPlusAvx(SB), NOSPLIT, $0-72
	MOVQ x_base+0(FP), AX
	MOVQ y_base+24(FP), CX
	MOVQ r_base+48(FP), DX
	MOVQ x_len+8(FP), BX

blockloop:
	CMPQ    BX, $0x00000018
	JL      tailloop
	VMOVDQU (AX), Y0
	VMOVDQU 32(AX), Y1
	VMOVDQU 64(AX), Y2
	VMOVDQU 96(AX), Y3
	VMOVDQU 128(AX), Y4
	VMOVDQU 160(AX), Y5
	VPADDQ  (CX), Y0, Y0
	VPADDQ  32(CX), Y1, Y1
	VPADDQ  64(CX), Y2, Y2
	VPADDQ  96(CX), Y3, Y3
	VPADDQ  128(CX), Y4, Y4
	VPADDQ  160(CX), Y5, Y5
	VMOVDQU Y0, (DX)
	VMOVDQU Y1, 32(DX)
	VMOVDQU Y2, 64(DX)
	VMOVDQU Y3, 96(DX)
	VMOVDQU Y4, 128(DX)
	VMOVDQU Y5, 160(DX)
	ADDQ    $0x000000c0, AX
	ADDQ    $0x000000c0, CX
	ADDQ    $0x000000c0, DX
	SUBQ    $0x00000018, BX
	JMP     blockloop

tailloop:
	CMPQ    BX, $0x00000004
	JL      done
	VMOVDQU (AX), Y0
	VPADDQ  (CX), Y0, Y0
	VMOVDQU Y0, (DX)
	ADDQ    $0x00000020, AX
	ADDQ    $0x00000020, CX
	ADDQ    $0x00000020, DX
	SUBQ    $0x00000004, BX
	JMP     tailloop

done:
	RET
