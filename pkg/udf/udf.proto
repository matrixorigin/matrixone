// Copyright 2023 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package udf;

option go_package = "github.com/matrixorigin/matrixone/pkg/udf";

// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ./udf.proto

service Service {
  rpc run(stream Request) returns (stream Response) {}
}

enum RequestType {
  UnknownRequest = 0;
  DataRequest = 1; // request with data for function result
  PkgResponse = 2; // response with package
}

message Request {
  Udf udf = 1;
  repeated DataVector vectors = 2;
  int64 length = 3;
  RequestType type = 4;
  map<string, string> context = 5; // currently just transfer, not used
}

enum ResponseType {
  UnknownResponse = 0;
  DataResponse = 1; // response with function result
  PkgRequest = 2; // request for package
}

message Response {
  DataVector vector = 1;
  ResponseType type = 2;
}

message Udf {
  string handler = 1;
  bool isImport = 2;
  string body = 3;
  Package importPkg = 4;
  DataType retType = 5;
  string language = 6;
  string modifiedTime = 7;
  string db = 8;
}

message Package {
  bytes data = 1;
  bool last = 2;
}

message DataVector {
  repeated Data data = 1;
  bool const = 2;
  int64 length = 3;
  DataType type = 4;
  int32 scale = 5;
}

enum DataType {
  UNKNOWN = 0;

  BOOL = 10;

  INT8 = 20;
  INT16 = 21;
  INT32 = 22;
  INT64 = 23;

  UINT8 = 30;
  UINT16 = 31;
  UINT32 = 32;
  UINT64 = 33;

  FLOAT32 = 40;
  FLOAT64 = 41;

  CHAR = 50;
  VARCHAR = 51;
  TEXT = 52;
  JSON = 53;
  UUID = 54;

  TIME = 60;
  DATE = 61;
  DATETIME = 62;
  TIMESTAMP = 63;

  DECIMAL64 = 70;
  DECIMAL128 = 71;


  BINARY = 80;
  VARBINARY = 81;
  BLOB = 82;
}

message Data {
  oneof val {
    bool boolVal = 1; // bool
    sint32 intVal = 2; // int8, int16, int32
    sint64 int64Val = 3; // int64
    uint32 uintVal = 4; // uint8, uint16, uint32
    uint64 uint64Val = 5; // uint64
    float floatVal = 6; // float32
    double doubleVal = 7; // float64
    string stringVal = 8; // char, varchar, text, json, uuid | time, date, datetime, timestamp | Decimal64, Decimal128
    bytes bytesVal = 9; // binary, varbinary, blob
  }
}