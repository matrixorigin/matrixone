// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../vendor/github.com/fagongzi/goetty/v2/session.go

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	net "net"
	reflect "reflect"
	time "time"

	buf "github.com/fagongzi/goetty/v2/buf"
	gomock "github.com/golang/mock/gomock"
	goetty "github.com/fagongzi/goetty/v2"
)

// MockIOSession is a mock of IOSession interface.
type MockIOSession struct {
	ctrl     *gomock.Controller
	recorder *MockIOSessionMockRecorder
}

// MockIOSessionMockRecorder is the mock recorder for MockIOSession.
type MockIOSessionMockRecorder struct {
	mock *MockIOSession
}

// NewMockIOSession creates a new mock instance.
func NewMockIOSession(ctrl *gomock.Controller) *MockIOSession {
	mock := &MockIOSession{ctrl: ctrl}
	mock.recorder = &MockIOSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOSession) EXPECT() *MockIOSessionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIOSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIOSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIOSession)(nil).Close))
}

// Connect mocks base method.
func (m *MockIOSession) Connect(addr string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", addr, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockIOSessionMockRecorder) Connect(addr, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIOSession)(nil).Connect), addr, timeout)
}

// Connected mocks base method.
func (m *MockIOSession) Connected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Connected indicates an expected call of Connected.
func (mr *MockIOSessionMockRecorder) Connected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockIOSession)(nil).Connected))
}

// Disconnect mocks base method.
func (m *MockIOSession) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockIOSessionMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockIOSession)(nil).Disconnect))
}

// Flush mocks base method.
func (m *MockIOSession) Flush(timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockIOSessionMockRecorder) Flush(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockIOSession)(nil).Flush), timeout)
}

// ID mocks base method.
func (m *MockIOSession) ID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockIOSessionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockIOSession)(nil).ID))
}

// OutBuf mocks base method.
func (m *MockIOSession) OutBuf() *buf.ByteBuf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutBuf")
	ret0, _ := ret[0].(*buf.ByteBuf)
	return ret0
}

// OutBuf indicates an expected call of OutBuf.
func (mr *MockIOSessionMockRecorder) OutBuf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutBuf", reflect.TypeOf((*MockIOSession)(nil).OutBuf))
}

// RawConn mocks base method.
func (m *MockIOSession) RawConn() net.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawConn")
	ret0, _ := ret[0].(net.Conn)
	return ret0
}

// RawConn indicates an expected call of RawConn.
func (mr *MockIOSessionMockRecorder) RawConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawConn", reflect.TypeOf((*MockIOSession)(nil).RawConn))
}

// Read mocks base method.
func (m *MockIOSession) Read(option goetty.ReadOptions) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", option)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIOSessionMockRecorder) Read(option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIOSession)(nil).Read), option)
}

// Ref mocks base method.
func (m *MockIOSession) Ref() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ref")
}

// Ref indicates an expected call of Ref.
func (mr *MockIOSessionMockRecorder) Ref() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockIOSession)(nil).Ref))
}

// RemoteAddress mocks base method.
func (m *MockIOSession) RemoteAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteAddress indicates an expected call of RemoteAddress.
func (mr *MockIOSessionMockRecorder) RemoteAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddress", reflect.TypeOf((*MockIOSession)(nil).RemoteAddress))
}

// UseConn mocks base method.
func (m *MockIOSession) UseConn(arg0 net.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseConn", arg0)
}

// UseConn indicates an expected call of UseConn.
func (mr *MockIOSessionMockRecorder) UseConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseConn", reflect.TypeOf((*MockIOSession)(nil).UseConn), arg0)
}

// Write mocks base method.
func (m *MockIOSession) Write(msg any, options goetty.WriteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", msg, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockIOSessionMockRecorder) Write(msg, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIOSession)(nil).Write), msg, options)
}
