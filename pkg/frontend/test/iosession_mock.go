// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package mock_goetty is a generated GoMock package.
package mock_frontend

import (
	net "net"
	reflect "reflect"
	time "time"

	buf "github.com/fagongzi/goetty/buf"
	gomock "github.com/golang/mock/gomock"
)

// MockIOSession is a mock of IOSession interface.
type MockIOSession struct {
	ctrl     *gomock.Controller
	recorder *MockIOSessionMockRecorder
}

// MockIOSessionMockRecorder is the mock recorder for MockIOSession.
type MockIOSessionMockRecorder struct {
	mock *MockIOSession
}

// NewMockIOSession creates a new mock instance.
func NewMockIOSession(ctrl *gomock.Controller) *MockIOSession {
	mock := &MockIOSession{ctrl: ctrl}
	mock.recorder = &MockIOSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOSession) EXPECT() *MockIOSessionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIOSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIOSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIOSession)(nil).Close))
}

// Connect mocks base method.
func (m *MockIOSession) Connect(addr string, timeout time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", addr, timeout)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockIOSessionMockRecorder) Connect(addr, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIOSession)(nil).Connect), addr, timeout)
}

// Connected mocks base method.
func (m *MockIOSession) Connected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Connected indicates an expected call of Connected.
func (mr *MockIOSessionMockRecorder) Connected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockIOSession)(nil).Connected))
}

// Flush mocks base method.
func (m *MockIOSession) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockIOSessionMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockIOSession)(nil).Flush))
}

// GetAttr mocks base method.
func (m *MockIOSession) GetAttr(key string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttr", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetAttr indicates an expected call of GetAttr.
func (mr *MockIOSessionMockRecorder) GetAttr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttr", reflect.TypeOf((*MockIOSession)(nil).GetAttr), key)
}

// ID mocks base method.
func (m *MockIOSession) ID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockIOSessionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockIOSession)(nil).ID))
}

// InBuf mocks base method.
func (m *MockIOSession) InBuf() *buf.ByteBuf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InBuf")
	ret0, _ := ret[0].(*buf.ByteBuf)
	return ret0
}

// InBuf indicates an expected call of InBuf.
func (mr *MockIOSessionMockRecorder) InBuf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InBuf", reflect.TypeOf((*MockIOSession)(nil).InBuf))
}

// OutBuf mocks base method.
func (m *MockIOSession) OutBuf() *buf.ByteBuf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutBuf")
	ret0, _ := ret[0].(*buf.ByteBuf)
	return ret0
}

// OutBuf indicates an expected call of OutBuf.
func (mr *MockIOSessionMockRecorder) OutBuf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutBuf", reflect.TypeOf((*MockIOSession)(nil).OutBuf))
}

// RawConn mocks base method.
func (m *MockIOSession) RawConn() (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawConn")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawConn indicates an expected call of RawConn.
func (mr *MockIOSessionMockRecorder) RawConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawConn", reflect.TypeOf((*MockIOSession)(nil).RawConn))
}

// Read mocks base method.
func (m *MockIOSession) Read() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIOSessionMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIOSession)(nil).Read))
}

// RemoteAddr mocks base method.
func (m *MockIOSession) RemoteAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockIOSessionMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockIOSession)(nil).RemoteAddr))
}

// RemoteIP mocks base method.
func (m *MockIOSession) RemoteIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteIP indicates an expected call of RemoteIP.
func (mr *MockIOSessionMockRecorder) RemoteIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteIP", reflect.TypeOf((*MockIOSession)(nil).RemoteIP))
}

// SetAttr mocks base method.
func (m *MockIOSession) SetAttr(key string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAttr", key, value)
}

// SetAttr indicates an expected call of SetAttr.
func (mr *MockIOSessionMockRecorder) SetAttr(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttr", reflect.TypeOf((*MockIOSession)(nil).SetAttr), key, value)
}

// Write mocks base method.
func (m *MockIOSession) Write(msg interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockIOSessionMockRecorder) Write(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIOSession)(nil).Write), msg)
}

// WriteAndFlush mocks base method.
func (m *MockIOSession) WriteAndFlush(msg interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAndFlush", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAndFlush indicates an expected call of WriteAndFlush.
func (mr *MockIOSessionMockRecorder) WriteAndFlush(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAndFlush", reflect.TypeOf((*MockIOSession)(nil).WriteAndFlush), msg)
}
