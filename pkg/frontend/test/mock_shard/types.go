// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/shardservice/types.go

// Package mock_shard is a generated GoMock package.
// mockgen -source pkg/shardservice/types.go --destination pkg/frontend/test/mock_shard/types.go -package=mock_shard
package mock_shard

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	morpc "github.com/matrixorigin/matrixone/pkg/common/morpc"
	metadata "github.com/matrixorigin/matrixone/pkg/pb/metadata"
	shard "github.com/matrixorigin/matrixone/pkg/pb/shard"
	timestamp "github.com/matrixorigin/matrixone/pkg/pb/timestamp"
	shardservice "github.com/matrixorigin/matrixone/pkg/shardservice"
	client "github.com/matrixorigin/matrixone/pkg/txn/client"
)

// MockShardServer is a mock of ShardServer interface.
type MockShardServer struct {
	ctrl     *gomock.Controller
	recorder *MockShardServerMockRecorder
}

// MockShardServerMockRecorder is the mock recorder for MockShardServer.
type MockShardServerMockRecorder struct {
	mock *MockShardServer
}

// NewMockShardServer creates a new mock instance.
func NewMockShardServer(ctrl *gomock.Controller) *MockShardServer {
	mock := &MockShardServer{ctrl: ctrl}
	mock.recorder = &MockShardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardServer) EXPECT() *MockShardServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockShardServer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShardServerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShardServer)(nil).Close))
}

// MockShardService is a mock of ShardService interface.
type MockShardService struct {
	ctrl     *gomock.Controller
	recorder *MockShardServiceMockRecorder
}

// MockShardServiceMockRecorder is the mock recorder for MockShardService.
type MockShardServiceMockRecorder struct {
	mock *MockShardService
}

// NewMockShardService creates a new mock instance.
func NewMockShardService(ctrl *gomock.Controller) *MockShardService {
	mock := &MockShardService{ctrl: ctrl}
	mock.recorder = &MockShardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardService) EXPECT() *MockShardServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockShardService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShardServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShardService)(nil).Close))
}

// Config mocks base method.
func (m *MockShardService) Config() shardservice.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(shardservice.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockShardServiceMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockShardService)(nil).Config))
}

// Create mocks base method.
func (m *MockShardService) Create(ctx context.Context, table uint64, txnOp client.TxnOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, table, txnOp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockShardServiceMockRecorder) Create(ctx, table, txnOp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShardService)(nil).Create), ctx, table, txnOp)
}

// Delete mocks base method.
func (m *MockShardService) Delete(ctx context.Context, table uint64, txnOp client.TxnOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, table, txnOp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockShardServiceMockRecorder) Delete(ctx, table, txnOp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShardService)(nil).Delete), ctx, table, txnOp)
}

// GetShardInfo mocks base method.
func (m *MockShardService) GetShardInfo(table uint64) (uint64, shard.Policy, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardInfo", table)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(shard.Policy)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetShardInfo indicates an expected call of GetShardInfo.
func (mr *MockShardServiceMockRecorder) GetShardInfo(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardInfo", reflect.TypeOf((*MockShardService)(nil).GetShardInfo), table)
}

// GetStorage mocks base method.
func (m *MockShardService) GetStorage() shardservice.ShardStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage")
	ret0, _ := ret[0].(shardservice.ShardStorage)
	return ret0
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockShardServiceMockRecorder) GetStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockShardService)(nil).GetStorage))
}

// HasAllLocalReplicas mocks base method.
func (m *MockShardService) HasAllLocalReplicas(tableID uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAllLocalReplicas", tableID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAllLocalReplicas indicates an expected call of HasAllLocalReplicas.
func (mr *MockShardServiceMockRecorder) HasAllLocalReplicas(tableID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAllLocalReplicas", reflect.TypeOf((*MockShardService)(nil).HasAllLocalReplicas), tableID)
}

// HasLocalReplica mocks base method.
func (m *MockShardService) HasLocalReplica(tableID, shardID uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLocalReplica", tableID, shardID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLocalReplica indicates an expected call of HasLocalReplica.
func (mr *MockShardServiceMockRecorder) HasLocalReplica(tableID, shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLocalReplica", reflect.TypeOf((*MockShardService)(nil).HasLocalReplica), tableID, shardID)
}

// Read mocks base method.
func (m *MockShardService) Read(ctx context.Context, req shardservice.ReadRequest, opts shardservice.ReadOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, req, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockShardServiceMockRecorder) Read(ctx, req, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockShardService)(nil).Read), ctx, req, opts)
}

// ReplicaCount mocks base method.
func (m *MockShardService) ReplicaCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ReplicaCount indicates an expected call of ReplicaCount.
func (mr *MockShardServiceMockRecorder) ReplicaCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaCount", reflect.TypeOf((*MockShardService)(nil).ReplicaCount))
}

// TableReplicaCount mocks base method.
func (m *MockShardService) TableReplicaCount(tableID uint64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableReplicaCount", tableID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// TableReplicaCount indicates an expected call of TableReplicaCount.
func (mr *MockShardServiceMockRecorder) TableReplicaCount(tableID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableReplicaCount", reflect.TypeOf((*MockShardService)(nil).TableReplicaCount), tableID)
}

// Mockscheduler is a mock of scheduler interface.
type Mockscheduler struct {
	ctrl     *gomock.Controller
	recorder *MockschedulerMockRecorder
}

// MockschedulerMockRecorder is the mock recorder for Mockscheduler.
type MockschedulerMockRecorder struct {
	mock *Mockscheduler
}

// NewMockscheduler creates a new mock instance.
func NewMockscheduler(ctrl *gomock.Controller) *Mockscheduler {
	mock := &Mockscheduler{ctrl: ctrl}
	mock.recorder = &MockschedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockscheduler) EXPECT() *MockschedulerMockRecorder {
	return m.recorder
}

// MockEnv is a mock of Env interface.
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv.
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance.
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// Available mocks base method.
func (m *MockEnv) Available(accountID uint64, cn string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Available", accountID, cn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Available indicates an expected call of Available.
func (mr *MockEnvMockRecorder) Available(accountID, cn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Available", reflect.TypeOf((*MockEnv)(nil).Available), accountID, cn)
}

// Draining mocks base method.
func (m *MockEnv) Draining(cn string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Draining", cn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Draining indicates an expected call of Draining.
func (mr *MockEnvMockRecorder) Draining(cn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Draining", reflect.TypeOf((*MockEnv)(nil).Draining), cn)
}

// HasCN mocks base method.
func (m *MockEnv) HasCN(serviceID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCN", serviceID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCN indicates an expected call of HasCN.
func (mr *MockEnvMockRecorder) HasCN(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCN", reflect.TypeOf((*MockEnv)(nil).HasCN), serviceID)
}

// UpdateState mocks base method.
func (m *MockEnv) UpdateState(cn string, state metadata.WorkState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateState", cn, state)
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockEnvMockRecorder) UpdateState(cn, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockEnv)(nil).UpdateState), cn, state)
}

// Mockfilter is a mock of filter interface.
type Mockfilter struct {
	ctrl     *gomock.Controller
	recorder *MockfilterMockRecorder
}

// MockfilterMockRecorder is the mock recorder for Mockfilter.
type MockfilterMockRecorder struct {
	mock *Mockfilter
}

// NewMockfilter creates a new mock instance.
func NewMockfilter(ctrl *gomock.Controller) *Mockfilter {
	mock := &Mockfilter{ctrl: ctrl}
	mock.recorder = &MockfilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockfilter) EXPECT() *MockfilterMockRecorder {
	return m.recorder
}

// MockShardStorage is a mock of ShardStorage interface.
type MockShardStorage struct {
	ctrl     *gomock.Controller
	recorder *MockShardStorageMockRecorder
}

// MockShardStorageMockRecorder is the mock recorder for MockShardStorage.
type MockShardStorageMockRecorder struct {
	mock *MockShardStorage
}

// NewMockShardStorage creates a new mock instance.
func NewMockShardStorage(ctrl *gomock.Controller) *MockShardStorage {
	mock := &MockShardStorage{ctrl: ctrl}
	mock.recorder = &MockShardStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardStorage) EXPECT() *MockShardStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockShardStorage) Create(ctx context.Context, table uint64, txnOp client.TxnOperator) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, table, txnOp)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockShardStorageMockRecorder) Create(ctx, table, txnOp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShardStorage)(nil).Create), ctx, table, txnOp)
}

// Delete mocks base method.
func (m *MockShardStorage) Delete(ctx context.Context, table uint64, txnOp client.TxnOperator) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, table, txnOp)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockShardStorageMockRecorder) Delete(ctx, table, txnOp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShardStorage)(nil).Delete), ctx, table, txnOp)
}

// Get mocks base method.
func (m *MockShardStorage) Get(table uint64) (uint64, shard.ShardsMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", table)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(shard.ShardsMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockShardStorageMockRecorder) Get(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShardStorage)(nil).Get), table)
}

// GetChanged mocks base method.
func (m *MockShardStorage) GetChanged(tables map[uint64]uint32, applyDeleted, applyChanged func(uint64)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChanged", tables, applyDeleted, applyChanged)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetChanged indicates an expected call of GetChanged.
func (mr *MockShardStorageMockRecorder) GetChanged(tables, applyDeleted, applyChanged interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChanged", reflect.TypeOf((*MockShardStorage)(nil).GetChanged), tables, applyDeleted, applyChanged)
}

// Read mocks base method.
func (m *MockShardStorage) Read(ctx context.Context, shard shard.TableShard, method int, param shard.ReadParam, ts timestamp.Timestamp, buffer *morpc.Buffer) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, shard, method, param, ts, buffer)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockShardStorageMockRecorder) Read(ctx, shard, method, param, ts, buffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockShardStorage)(nil).Read), ctx, shard, method, param, ts, buffer)
}

// Unsubscribe mocks base method.
func (m *MockShardStorage) Unsubscribe(tables ...uint64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range tables {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unsubscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockShardStorageMockRecorder) Unsubscribe(tables ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockShardStorage)(nil).Unsubscribe), tables...)
}

// WaitLogAppliedAt mocks base method.
func (m *MockShardStorage) WaitLogAppliedAt(ctx context.Context, ts timestamp.Timestamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitLogAppliedAt", ctx, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitLogAppliedAt indicates an expected call of WaitLogAppliedAt.
func (mr *MockShardStorageMockRecorder) WaitLogAppliedAt(ctx, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitLogAppliedAt", reflect.TypeOf((*MockShardStorage)(nil).WaitLogAppliedAt), ctx, ts)
}
