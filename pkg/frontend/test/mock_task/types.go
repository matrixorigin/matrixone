// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/taskservice/types.go
//
// Generated by this command:
//
//	mockgen -source pkg/taskservice/types.go --destination pkg/frontend/test/mock_task/types.go -package=mock_task
//

// Package mock_task is a generated GoMock package.
package mock_task

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logservice "github.com/matrixorigin/matrixone/pkg/pb/logservice"
	task "github.com/matrixorigin/matrixone/pkg/pb/task"
	taskservice "github.com/matrixorigin/matrixone/pkg/taskservice"
)

// Mockcondition is a mock of condition interface.
type Mockcondition struct {
	ctrl     *gomock.Controller
	recorder *MockconditionMockRecorder
}

// MockconditionMockRecorder is the mock recorder for Mockcondition.
type MockconditionMockRecorder struct {
	mock *Mockcondition
}

// NewMockcondition creates a new mock instance.
func NewMockcondition(ctrl *gomock.Controller) *Mockcondition {
	mock := &Mockcondition{ctrl: ctrl}
	mock.recorder = &MockconditionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcondition) EXPECT() *MockconditionMockRecorder {
	return m.recorder
}

// eval mocks base method.
func (m *Mockcondition) eval(v any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "eval", v)
	ret0, _ := ret[0].(bool)
	return ret0
}

// eval indicates an expected call of eval.
func (mr *MockconditionMockRecorder) eval(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "eval", reflect.TypeOf((*Mockcondition)(nil).eval), v)
}

// sql mocks base method.
func (m *Mockcondition) sql() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sql")
	ret0, _ := ret[0].(string)
	return ret0
}

// sql indicates an expected call of sql.
func (mr *MockconditionMockRecorder) sql() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sql", reflect.TypeOf((*Mockcondition)(nil).sql))
}

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// Allocate mocks base method.
func (m *MockTaskService) Allocate(ctx context.Context, value task.AsyncTask, taskRunner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", ctx, value, taskRunner)
	ret0, _ := ret[0].(error)
	return ret0
}

// Allocate indicates an expected call of Allocate.
func (mr *MockTaskServiceMockRecorder) Allocate(ctx, value, taskRunner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockTaskService)(nil).Allocate), ctx, value, taskRunner)
}

// Close mocks base method.
func (m *MockTaskService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTaskServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTaskService)(nil).Close))
}

// Complete mocks base method.
func (m *MockTaskService) Complete(ctx context.Context, taskRunner string, task task.AsyncTask, result task.ExecuteResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx, taskRunner, task, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockTaskServiceMockRecorder) Complete(ctx, taskRunner, task, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockTaskService)(nil).Complete), ctx, taskRunner, task, result)
}

// CreateAsyncTask mocks base method.
func (m *MockTaskService) CreateAsyncTask(arg0 context.Context, arg1 task.TaskMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsyncTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAsyncTask indicates an expected call of CreateAsyncTask.
func (mr *MockTaskServiceMockRecorder) CreateAsyncTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsyncTask", reflect.TypeOf((*MockTaskService)(nil).CreateAsyncTask), arg0, arg1)
}

// CreateBatch mocks base method.
func (m *MockTaskService) CreateBatch(arg0 context.Context, arg1 []task.TaskMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockTaskServiceMockRecorder) CreateBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockTaskService)(nil).CreateBatch), arg0, arg1)
}

// CreateCronTask mocks base method.
func (m *MockTaskService) CreateCronTask(ctx context.Context, task task.TaskMetadata, cronExpr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCronTask", ctx, task, cronExpr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCronTask indicates an expected call of CreateCronTask.
func (mr *MockTaskServiceMockRecorder) CreateCronTask(ctx, task, cronExpr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCronTask", reflect.TypeOf((*MockTaskService)(nil).CreateCronTask), ctx, task, cronExpr)
}

// CreateDaemonTask mocks base method.
func (m *MockTaskService) CreateDaemonTask(ctx context.Context, value task.TaskMetadata, details *task.Details) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDaemonTask", ctx, value, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDaemonTask indicates an expected call of CreateDaemonTask.
func (mr *MockTaskServiceMockRecorder) CreateDaemonTask(ctx, value, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDaemonTask", reflect.TypeOf((*MockTaskService)(nil).CreateDaemonTask), ctx, value, details)
}

// GetStorage mocks base method.
func (m *MockTaskService) GetStorage() taskservice.TaskStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage")
	ret0, _ := ret[0].(taskservice.TaskStorage)
	return ret0
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockTaskServiceMockRecorder) GetStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockTaskService)(nil).GetStorage))
}

// Heartbeat mocks base method.
func (m *MockTaskService) Heartbeat(ctx context.Context, task task.AsyncTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockTaskServiceMockRecorder) Heartbeat(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockTaskService)(nil).Heartbeat), ctx, task)
}

// HeartbeatDaemonTask mocks base method.
func (m *MockTaskService) HeartbeatDaemonTask(ctx context.Context, task task.DaemonTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartbeatDaemonTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// HeartbeatDaemonTask indicates an expected call of HeartbeatDaemonTask.
func (mr *MockTaskServiceMockRecorder) HeartbeatDaemonTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatDaemonTask", reflect.TypeOf((*MockTaskService)(nil).HeartbeatDaemonTask), ctx, task)
}

// QueryAsyncTask mocks base method.
func (m *MockTaskService) QueryAsyncTask(arg0 context.Context, arg1 ...taskservice.Condition) ([]task.AsyncTask, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAsyncTask", varargs...)
	ret0, _ := ret[0].([]task.AsyncTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAsyncTask indicates an expected call of QueryAsyncTask.
func (mr *MockTaskServiceMockRecorder) QueryAsyncTask(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAsyncTask", reflect.TypeOf((*MockTaskService)(nil).QueryAsyncTask), varargs...)
}

// QueryCronTask mocks base method.
func (m *MockTaskService) QueryCronTask(arg0 context.Context, arg1 ...taskservice.Condition) ([]task.CronTask, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryCronTask", varargs...)
	ret0, _ := ret[0].([]task.CronTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCronTask indicates an expected call of QueryCronTask.
func (mr *MockTaskServiceMockRecorder) QueryCronTask(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCronTask", reflect.TypeOf((*MockTaskService)(nil).QueryCronTask), varargs...)
}

// QueryDaemonTask mocks base method.
func (m *MockTaskService) QueryDaemonTask(ctx context.Context, conds ...taskservice.Condition) ([]task.DaemonTask, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryDaemonTask", varargs...)
	ret0, _ := ret[0].([]task.DaemonTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDaemonTask indicates an expected call of QueryDaemonTask.
func (mr *MockTaskServiceMockRecorder) QueryDaemonTask(ctx any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDaemonTask", reflect.TypeOf((*MockTaskService)(nil).QueryDaemonTask), varargs...)
}

// StartScheduleCronTask mocks base method.
func (m *MockTaskService) StartScheduleCronTask() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartScheduleCronTask")
}

// StartScheduleCronTask indicates an expected call of StartScheduleCronTask.
func (mr *MockTaskServiceMockRecorder) StartScheduleCronTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartScheduleCronTask", reflect.TypeOf((*MockTaskService)(nil).StartScheduleCronTask))
}

// StopScheduleCronTask mocks base method.
func (m *MockTaskService) StopScheduleCronTask() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopScheduleCronTask")
}

// StopScheduleCronTask indicates an expected call of StopScheduleCronTask.
func (mr *MockTaskServiceMockRecorder) StopScheduleCronTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopScheduleCronTask", reflect.TypeOf((*MockTaskService)(nil).StopScheduleCronTask))
}

// TruncateCompletedTasks mocks base method.
func (m *MockTaskService) TruncateCompletedTasks(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateCompletedTasks", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TruncateCompletedTasks indicates an expected call of TruncateCompletedTasks.
func (mr *MockTaskServiceMockRecorder) TruncateCompletedTasks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateCompletedTasks", reflect.TypeOf((*MockTaskService)(nil).TruncateCompletedTasks), ctx)
}

// UpdateDaemonTask mocks base method.
func (m *MockTaskService) UpdateDaemonTask(ctx context.Context, tasks []task.DaemonTask, cond ...taskservice.Condition) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tasks}
	for _, a := range cond {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDaemonTask", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDaemonTask indicates an expected call of UpdateDaemonTask.
func (mr *MockTaskServiceMockRecorder) UpdateDaemonTask(ctx, tasks any, cond ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tasks}, cond...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDaemonTask", reflect.TypeOf((*MockTaskService)(nil).UpdateDaemonTask), varargs...)
}

// MockTaskRunner is a mock of TaskRunner interface.
type MockTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRunnerMockRecorder
}

// MockTaskRunnerMockRecorder is the mock recorder for MockTaskRunner.
type MockTaskRunnerMockRecorder struct {
	mock *MockTaskRunner
}

// NewMockTaskRunner creates a new mock instance.
func NewMockTaskRunner(ctrl *gomock.Controller) *MockTaskRunner {
	mock := &MockTaskRunner{ctrl: ctrl}
	mock.recorder = &MockTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRunner) EXPECT() *MockTaskRunnerMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockTaskRunner) Attach(ctx context.Context, taskID uint64, routine taskservice.ActiveRoutine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", ctx, taskID, routine)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attach indicates an expected call of Attach.
func (mr *MockTaskRunnerMockRecorder) Attach(ctx, taskID, routine any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockTaskRunner)(nil).Attach), ctx, taskID, routine)
}

// GetExecutor mocks base method.
func (m *MockTaskRunner) GetExecutor(code task.TaskCode) taskservice.TaskExecutor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutor", code)
	ret0, _ := ret[0].(taskservice.TaskExecutor)
	return ret0
}

// GetExecutor indicates an expected call of GetExecutor.
func (mr *MockTaskRunnerMockRecorder) GetExecutor(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutor", reflect.TypeOf((*MockTaskRunner)(nil).GetExecutor), code)
}

// ID mocks base method.
func (m *MockTaskRunner) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockTaskRunnerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockTaskRunner)(nil).ID))
}

// Parallelism mocks base method.
func (m *MockTaskRunner) Parallelism() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parallelism")
	ret0, _ := ret[0].(int)
	return ret0
}

// Parallelism indicates an expected call of Parallelism.
func (mr *MockTaskRunnerMockRecorder) Parallelism() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parallelism", reflect.TypeOf((*MockTaskRunner)(nil).Parallelism))
}

// RegisterExecutor mocks base method.
func (m *MockTaskRunner) RegisterExecutor(code task.TaskCode, executor taskservice.TaskExecutor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterExecutor", code, executor)
}

// RegisterExecutor indicates an expected call of RegisterExecutor.
func (mr *MockTaskRunnerMockRecorder) RegisterExecutor(code, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterExecutor", reflect.TypeOf((*MockTaskRunner)(nil).RegisterExecutor), code, executor)
}

// Start mocks base method.
func (m *MockTaskRunner) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTaskRunnerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTaskRunner)(nil).Start))
}

// Stop mocks base method.
func (m *MockTaskRunner) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTaskRunnerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTaskRunner)(nil).Stop))
}

// MockTaskStorage is a mock of TaskStorage interface.
type MockTaskStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStorageMockRecorder
}

// MockTaskStorageMockRecorder is the mock recorder for MockTaskStorage.
type MockTaskStorageMockRecorder struct {
	mock *MockTaskStorage
}

// NewMockTaskStorage creates a new mock instance.
func NewMockTaskStorage(ctrl *gomock.Controller) *MockTaskStorage {
	mock := &MockTaskStorage{ctrl: ctrl}
	mock.recorder = &MockTaskStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStorage) EXPECT() *MockTaskStorageMockRecorder {
	return m.recorder
}

// AddAsyncTask mocks base method.
func (m *MockTaskStorage) AddAsyncTask(arg0 context.Context, arg1 ...task.AsyncTask) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAsyncTask", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAsyncTask indicates an expected call of AddAsyncTask.
func (mr *MockTaskStorageMockRecorder) AddAsyncTask(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAsyncTask", reflect.TypeOf((*MockTaskStorage)(nil).AddAsyncTask), varargs...)
}

// AddCronTask mocks base method.
func (m *MockTaskStorage) AddCronTask(arg0 context.Context, arg1 ...task.CronTask) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCronTask", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCronTask indicates an expected call of AddCronTask.
func (mr *MockTaskStorageMockRecorder) AddCronTask(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCronTask", reflect.TypeOf((*MockTaskStorage)(nil).AddCronTask), varargs...)
}

// AddDaemonTask mocks base method.
func (m *MockTaskStorage) AddDaemonTask(ctx context.Context, tasks ...task.DaemonTask) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range tasks {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDaemonTask", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDaemonTask indicates an expected call of AddDaemonTask.
func (mr *MockTaskStorageMockRecorder) AddDaemonTask(ctx any, tasks ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, tasks...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDaemonTask", reflect.TypeOf((*MockTaskStorage)(nil).AddDaemonTask), varargs...)
}

// Close mocks base method.
func (m *MockTaskStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTaskStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTaskStorage)(nil).Close))
}

// DeleteAsyncTask mocks base method.
func (m *MockTaskStorage) DeleteAsyncTask(arg0 context.Context, arg1 ...taskservice.Condition) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAsyncTask", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsyncTask indicates an expected call of DeleteAsyncTask.
func (mr *MockTaskStorageMockRecorder) DeleteAsyncTask(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsyncTask", reflect.TypeOf((*MockTaskStorage)(nil).DeleteAsyncTask), varargs...)
}

// DeleteDaemonTask mocks base method.
func (m *MockTaskStorage) DeleteDaemonTask(ctx context.Context, condition ...taskservice.Condition) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range condition {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDaemonTask", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDaemonTask indicates an expected call of DeleteDaemonTask.
func (mr *MockTaskStorageMockRecorder) DeleteDaemonTask(ctx any, condition ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, condition...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonTask", reflect.TypeOf((*MockTaskStorage)(nil).DeleteDaemonTask), varargs...)
}

// HeartbeatDaemonTask mocks base method.
func (m *MockTaskStorage) HeartbeatDaemonTask(ctx context.Context, task []task.DaemonTask) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartbeatDaemonTask", ctx, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatDaemonTask indicates an expected call of HeartbeatDaemonTask.
func (mr *MockTaskStorageMockRecorder) HeartbeatDaemonTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatDaemonTask", reflect.TypeOf((*MockTaskStorage)(nil).HeartbeatDaemonTask), ctx, task)
}

// PingContext mocks base method.
func (m *MockTaskStorage) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockTaskStorageMockRecorder) PingContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockTaskStorage)(nil).PingContext), arg0)
}

// QueryAsyncTask mocks base method.
func (m *MockTaskStorage) QueryAsyncTask(arg0 context.Context, arg1 ...taskservice.Condition) ([]task.AsyncTask, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAsyncTask", varargs...)
	ret0, _ := ret[0].([]task.AsyncTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAsyncTask indicates an expected call of QueryAsyncTask.
func (mr *MockTaskStorageMockRecorder) QueryAsyncTask(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAsyncTask", reflect.TypeOf((*MockTaskStorage)(nil).QueryAsyncTask), varargs...)
}

// QueryCronTask mocks base method.
func (m *MockTaskStorage) QueryCronTask(arg0 context.Context, arg1 ...taskservice.Condition) ([]task.CronTask, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryCronTask", varargs...)
	ret0, _ := ret[0].([]task.CronTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCronTask indicates an expected call of QueryCronTask.
func (mr *MockTaskStorageMockRecorder) QueryCronTask(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCronTask", reflect.TypeOf((*MockTaskStorage)(nil).QueryCronTask), varargs...)
}

// QueryDaemonTask mocks base method.
func (m *MockTaskStorage) QueryDaemonTask(ctx context.Context, condition ...taskservice.Condition) ([]task.DaemonTask, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range condition {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryDaemonTask", varargs...)
	ret0, _ := ret[0].([]task.DaemonTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDaemonTask indicates an expected call of QueryDaemonTask.
func (mr *MockTaskStorageMockRecorder) QueryDaemonTask(ctx any, condition ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, condition...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDaemonTask", reflect.TypeOf((*MockTaskStorage)(nil).QueryDaemonTask), varargs...)
}

// UpdateAsyncTask mocks base method.
func (m *MockTaskStorage) UpdateAsyncTask(arg0 context.Context, arg1 []task.AsyncTask, arg2 ...taskservice.Condition) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAsyncTask", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsyncTask indicates an expected call of UpdateAsyncTask.
func (mr *MockTaskStorageMockRecorder) UpdateAsyncTask(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsyncTask", reflect.TypeOf((*MockTaskStorage)(nil).UpdateAsyncTask), varargs...)
}

// UpdateCronTask mocks base method.
func (m *MockTaskStorage) UpdateCronTask(arg0 context.Context, arg1 task.CronTask, arg2 task.AsyncTask) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCronTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCronTask indicates an expected call of UpdateCronTask.
func (mr *MockTaskStorageMockRecorder) UpdateCronTask(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCronTask", reflect.TypeOf((*MockTaskStorage)(nil).UpdateCronTask), arg0, arg1, arg2)
}

// UpdateDaemonTask mocks base method.
func (m *MockTaskStorage) UpdateDaemonTask(ctx context.Context, tasks []task.DaemonTask, conds ...taskservice.Condition) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tasks}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDaemonTask", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDaemonTask indicates an expected call of UpdateDaemonTask.
func (mr *MockTaskStorageMockRecorder) UpdateDaemonTask(ctx, tasks any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tasks}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDaemonTask", reflect.TypeOf((*MockTaskStorage)(nil).UpdateDaemonTask), varargs...)
}

// MockTaskServiceHolder is a mock of TaskServiceHolder interface.
type MockTaskServiceHolder struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceHolderMockRecorder
}

// MockTaskServiceHolderMockRecorder is the mock recorder for MockTaskServiceHolder.
type MockTaskServiceHolderMockRecorder struct {
	mock *MockTaskServiceHolder
}

// NewMockTaskServiceHolder creates a new mock instance.
func NewMockTaskServiceHolder(ctrl *gomock.Controller) *MockTaskServiceHolder {
	mock := &MockTaskServiceHolder{ctrl: ctrl}
	mock.recorder = &MockTaskServiceHolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceHolder) EXPECT() *MockTaskServiceHolderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTaskServiceHolder) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTaskServiceHolderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTaskServiceHolder)(nil).Close))
}

// Create mocks base method.
func (m *MockTaskServiceHolder) Create(command logservice.CreateTaskService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceHolderMockRecorder) Create(command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskServiceHolder)(nil).Create), command)
}

// Get mocks base method.
func (m *MockTaskServiceHolder) Get() (taskservice.TaskService, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(taskservice.TaskService)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskServiceHolderMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskServiceHolder)(nil).Get))
}

// MockTaskStorageFactory is a mock of TaskStorageFactory interface.
type MockTaskStorageFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStorageFactoryMockRecorder
}

// MockTaskStorageFactoryMockRecorder is the mock recorder for MockTaskStorageFactory.
type MockTaskStorageFactoryMockRecorder struct {
	mock *MockTaskStorageFactory
}

// NewMockTaskStorageFactory creates a new mock instance.
func NewMockTaskStorageFactory(ctrl *gomock.Controller) *MockTaskStorageFactory {
	mock := &MockTaskStorageFactory{ctrl: ctrl}
	mock.recorder = &MockTaskStorageFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStorageFactory) EXPECT() *MockTaskStorageFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskStorageFactory) Create(address string) (taskservice.TaskStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", address)
	ret0, _ := ret[0].(taskservice.TaskStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskStorageFactoryMockRecorder) Create(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskStorageFactory)(nil).Create), address)
}
