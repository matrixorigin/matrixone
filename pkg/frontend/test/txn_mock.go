// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../pkg/txn/client/types.go

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	lock "github.com/matrixorigin/matrixone/pkg/pb/lock"
	timestamp "github.com/matrixorigin/matrixone/pkg/pb/timestamp"
	txn "github.com/matrixorigin/matrixone/pkg/pb/txn"
	client "github.com/matrixorigin/matrixone/pkg/txn/client"
	rpc "github.com/matrixorigin/matrixone/pkg/txn/rpc"
)

// MockTxnClient is a mock of TxnClient interface.
type MockTxnClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxnClientMockRecorder
}

// MockTxnClientMockRecorder is the mock recorder for MockTxnClient.
type MockTxnClientMockRecorder struct {
	mock *MockTxnClient
}

// NewMockTxnClient creates a new mock instance.
func NewMockTxnClient(ctrl *gomock.Controller) *MockTxnClient {
	mock := &MockTxnClient{ctrl: ctrl}
	mock.recorder = &MockTxnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxnClient) EXPECT() *MockTxnClientMockRecorder {
	return m.recorder
}

// AbortAllRunningTxn mocks base method.
func (m *MockTxnClient) AbortAllRunningTxn() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortAllRunningTxn")
}

// AbortAllRunningTxn indicates an expected call of AbortAllRunningTxn.
func (mr *MockTxnClientMockRecorder) AbortAllRunningTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortAllRunningTxn", reflect.TypeOf((*MockTxnClient)(nil).AbortAllRunningTxn))
}

// Close mocks base method.
func (m *MockTxnClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTxnClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTxnClient)(nil).Close))
}

// MinTimestamp mocks base method.
func (m *MockTxnClient) MinTimestamp() timestamp.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinTimestamp")
	ret0, _ := ret[0].(timestamp.Timestamp)
	return ret0
}

// MinTimestamp indicates an expected call of MinTimestamp.
func (mr *MockTxnClientMockRecorder) MinTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinTimestamp", reflect.TypeOf((*MockTxnClient)(nil).MinTimestamp))
}

// New mocks base method.
func (m *MockTxnClient) New(ctx context.Context, commitTS timestamp.Timestamp, options ...client.TxnOption) (client.TxnOperator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitTS}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(client.TxnOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockTxnClientMockRecorder) New(ctx, commitTS interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitTS}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockTxnClient)(nil).New), varargs...)
}

// NewWithSnapshot mocks base method.
func (m *MockTxnClient) NewWithSnapshot(snapshot []byte) (client.TxnOperator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWithSnapshot", snapshot)
	ret0, _ := ret[0].(client.TxnOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWithSnapshot indicates an expected call of NewWithSnapshot.
func (mr *MockTxnClientMockRecorder) NewWithSnapshot(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWithSnapshot", reflect.TypeOf((*MockTxnClient)(nil).NewWithSnapshot), snapshot)
}

// WaitLogTailAppliedAt mocks base method.
func (m *MockTxnClient) WaitLogTailAppliedAt(ctx context.Context, ts timestamp.Timestamp) (timestamp.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitLogTailAppliedAt", ctx, ts)
	ret0, _ := ret[0].(timestamp.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitLogTailAppliedAt indicates an expected call of WaitLogTailAppliedAt.
func (mr *MockTxnClientMockRecorder) WaitLogTailAppliedAt(ctx, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitLogTailAppliedAt", reflect.TypeOf((*MockTxnClient)(nil).WaitLogTailAppliedAt), ctx, ts)
}

// MockTxnClientWithCtl is a mock of TxnClientWithCtl interface.
type MockTxnClientWithCtl struct {
	ctrl     *gomock.Controller
	recorder *MockTxnClientWithCtlMockRecorder
}

// MockTxnClientWithCtlMockRecorder is the mock recorder for MockTxnClientWithCtl.
type MockTxnClientWithCtlMockRecorder struct {
	mock *MockTxnClientWithCtl
}

// NewMockTxnClientWithCtl creates a new mock instance.
func NewMockTxnClientWithCtl(ctrl *gomock.Controller) *MockTxnClientWithCtl {
	mock := &MockTxnClientWithCtl{ctrl: ctrl}
	mock.recorder = &MockTxnClientWithCtlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxnClientWithCtl) EXPECT() *MockTxnClientWithCtlMockRecorder {
	return m.recorder
}

// AbortAllRunningTxn mocks base method.
func (m *MockTxnClientWithCtl) AbortAllRunningTxn() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortAllRunningTxn")
}

// AbortAllRunningTxn indicates an expected call of AbortAllRunningTxn.
func (mr *MockTxnClientWithCtlMockRecorder) AbortAllRunningTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortAllRunningTxn", reflect.TypeOf((*MockTxnClientWithCtl)(nil).AbortAllRunningTxn))
}

// Close mocks base method.
func (m *MockTxnClientWithCtl) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTxnClientWithCtlMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTxnClientWithCtl)(nil).Close))
}

// GetLatestCommitTS mocks base method.
func (m *MockTxnClientWithCtl) GetLatestCommitTS() timestamp.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestCommitTS")
	ret0, _ := ret[0].(timestamp.Timestamp)
	return ret0
}

// GetLatestCommitTS indicates an expected call of GetLatestCommitTS.
func (mr *MockTxnClientWithCtlMockRecorder) GetLatestCommitTS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestCommitTS", reflect.TypeOf((*MockTxnClientWithCtl)(nil).GetLatestCommitTS))
}

// MinTimestamp mocks base method.
func (m *MockTxnClientWithCtl) MinTimestamp() timestamp.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinTimestamp")
	ret0, _ := ret[0].(timestamp.Timestamp)
	return ret0
}

// MinTimestamp indicates an expected call of MinTimestamp.
func (mr *MockTxnClientWithCtlMockRecorder) MinTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinTimestamp", reflect.TypeOf((*MockTxnClientWithCtl)(nil).MinTimestamp))
}

// New mocks base method.
func (m *MockTxnClientWithCtl) New(ctx context.Context, commitTS timestamp.Timestamp, options ...client.TxnOption) (client.TxnOperator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitTS}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(client.TxnOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockTxnClientWithCtlMockRecorder) New(ctx, commitTS interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitTS}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockTxnClientWithCtl)(nil).New), varargs...)
}

// NewWithSnapshot mocks base method.
func (m *MockTxnClientWithCtl) NewWithSnapshot(snapshot []byte) (client.TxnOperator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWithSnapshot", snapshot)
	ret0, _ := ret[0].(client.TxnOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWithSnapshot indicates an expected call of NewWithSnapshot.
func (mr *MockTxnClientWithCtlMockRecorder) NewWithSnapshot(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWithSnapshot", reflect.TypeOf((*MockTxnClientWithCtl)(nil).NewWithSnapshot), snapshot)
}

// SetLatestCommitTS mocks base method.
func (m *MockTxnClientWithCtl) SetLatestCommitTS(arg0 timestamp.Timestamp) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLatestCommitTS", arg0)
}

// SetLatestCommitTS indicates an expected call of SetLatestCommitTS.
func (mr *MockTxnClientWithCtlMockRecorder) SetLatestCommitTS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLatestCommitTS", reflect.TypeOf((*MockTxnClientWithCtl)(nil).SetLatestCommitTS), arg0)
}

// WaitLogTailAppliedAt mocks base method.
func (m *MockTxnClientWithCtl) WaitLogTailAppliedAt(ctx context.Context, ts timestamp.Timestamp) (timestamp.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitLogTailAppliedAt", ctx, ts)
	ret0, _ := ret[0].(timestamp.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitLogTailAppliedAt indicates an expected call of WaitLogTailAppliedAt.
func (mr *MockTxnClientWithCtlMockRecorder) WaitLogTailAppliedAt(ctx, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitLogTailAppliedAt", reflect.TypeOf((*MockTxnClientWithCtl)(nil).WaitLogTailAppliedAt), ctx, ts)
}

// MockTxnClientWithFeature is a mock of TxnClientWithFeature interface.
type MockTxnClientWithFeature struct {
	ctrl     *gomock.Controller
	recorder *MockTxnClientWithFeatureMockRecorder
}

// MockTxnClientWithFeatureMockRecorder is the mock recorder for MockTxnClientWithFeature.
type MockTxnClientWithFeatureMockRecorder struct {
	mock *MockTxnClientWithFeature
}

// NewMockTxnClientWithFeature creates a new mock instance.
func NewMockTxnClientWithFeature(ctrl *gomock.Controller) *MockTxnClientWithFeature {
	mock := &MockTxnClientWithFeature{ctrl: ctrl}
	mock.recorder = &MockTxnClientWithFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxnClientWithFeature) EXPECT() *MockTxnClientWithFeatureMockRecorder {
	return m.recorder
}

// AbortAllRunningTxn mocks base method.
func (m *MockTxnClientWithFeature) AbortAllRunningTxn() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortAllRunningTxn")
}

// AbortAllRunningTxn indicates an expected call of AbortAllRunningTxn.
func (mr *MockTxnClientWithFeatureMockRecorder) AbortAllRunningTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortAllRunningTxn", reflect.TypeOf((*MockTxnClientWithFeature)(nil).AbortAllRunningTxn))
}

// CNBasedConsistencyEnabled mocks base method.
func (m *MockTxnClientWithFeature) CNBasedConsistencyEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CNBasedConsistencyEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CNBasedConsistencyEnabled indicates an expected call of CNBasedConsistencyEnabled.
func (mr *MockTxnClientWithFeatureMockRecorder) CNBasedConsistencyEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CNBasedConsistencyEnabled", reflect.TypeOf((*MockTxnClientWithFeature)(nil).CNBasedConsistencyEnabled))
}

// Close mocks base method.
func (m *MockTxnClientWithFeature) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTxnClientWithFeatureMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTxnClientWithFeature)(nil).Close))
}

// MinTimestamp mocks base method.
func (m *MockTxnClientWithFeature) MinTimestamp() timestamp.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinTimestamp")
	ret0, _ := ret[0].(timestamp.Timestamp)
	return ret0
}

// MinTimestamp indicates an expected call of MinTimestamp.
func (mr *MockTxnClientWithFeatureMockRecorder) MinTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinTimestamp", reflect.TypeOf((*MockTxnClientWithFeature)(nil).MinTimestamp))
}

// New mocks base method.
func (m *MockTxnClientWithFeature) New(ctx context.Context, commitTS timestamp.Timestamp, options ...client.TxnOption) (client.TxnOperator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitTS}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(client.TxnOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockTxnClientWithFeatureMockRecorder) New(ctx, commitTS interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitTS}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockTxnClientWithFeature)(nil).New), varargs...)
}

// NewWithSnapshot mocks base method.
func (m *MockTxnClientWithFeature) NewWithSnapshot(snapshot []byte) (client.TxnOperator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWithSnapshot", snapshot)
	ret0, _ := ret[0].(client.TxnOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWithSnapshot indicates an expected call of NewWithSnapshot.
func (mr *MockTxnClientWithFeatureMockRecorder) NewWithSnapshot(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWithSnapshot", reflect.TypeOf((*MockTxnClientWithFeature)(nil).NewWithSnapshot), snapshot)
}

// Pause mocks base method.
func (m *MockTxnClientWithFeature) Pause() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pause")
}

// Pause indicates an expected call of Pause.
func (mr *MockTxnClientWithFeatureMockRecorder) Pause() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockTxnClientWithFeature)(nil).Pause))
}

// RefreshExpressionEnabled mocks base method.
func (m *MockTxnClientWithFeature) RefreshExpressionEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshExpressionEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RefreshExpressionEnabled indicates an expected call of RefreshExpressionEnabled.
func (mr *MockTxnClientWithFeatureMockRecorder) RefreshExpressionEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshExpressionEnabled", reflect.TypeOf((*MockTxnClientWithFeature)(nil).RefreshExpressionEnabled))
}

// Resume mocks base method.
func (m *MockTxnClientWithFeature) Resume() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resume")
}

// Resume indicates an expected call of Resume.
func (mr *MockTxnClientWithFeatureMockRecorder) Resume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockTxnClientWithFeature)(nil).Resume))
}

// WaitLogTailAppliedAt mocks base method.
func (m *MockTxnClientWithFeature) WaitLogTailAppliedAt(ctx context.Context, ts timestamp.Timestamp) (timestamp.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitLogTailAppliedAt", ctx, ts)
	ret0, _ := ret[0].(timestamp.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitLogTailAppliedAt indicates an expected call of WaitLogTailAppliedAt.
func (mr *MockTxnClientWithFeatureMockRecorder) WaitLogTailAppliedAt(ctx, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitLogTailAppliedAt", reflect.TypeOf((*MockTxnClientWithFeature)(nil).WaitLogTailAppliedAt), ctx, ts)
}

// MockTxnOperator is a mock of TxnOperator interface.
type MockTxnOperator struct {
	ctrl     *gomock.Controller
	recorder *MockTxnOperatorMockRecorder
}

// MockTxnOperatorMockRecorder is the mock recorder for MockTxnOperator.
type MockTxnOperatorMockRecorder struct {
	mock *MockTxnOperator
}

// NewMockTxnOperator creates a new mock instance.
func NewMockTxnOperator(ctrl *gomock.Controller) *MockTxnOperator {
	mock := &MockTxnOperator{ctrl: ctrl}
	mock.recorder = &MockTxnOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxnOperator) EXPECT() *MockTxnOperatorMockRecorder {
	return m.recorder
}

// AddLockTable mocks base method.
func (m *MockTxnOperator) AddLockTable(locktable lock.LockTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLockTable", locktable)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLockTable indicates an expected call of AddLockTable.
func (mr *MockTxnOperatorMockRecorder) AddLockTable(locktable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLockTable", reflect.TypeOf((*MockTxnOperator)(nil).AddLockTable), locktable)
}

// AddWorkspace mocks base method.
func (m *MockTxnOperator) AddWorkspace(workspace client.Workspace) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddWorkspace", workspace)
}

// AddWorkspace indicates an expected call of AddWorkspace.
func (mr *MockTxnOperatorMockRecorder) AddWorkspace(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkspace", reflect.TypeOf((*MockTxnOperator)(nil).AddWorkspace), workspace)
}

// ApplySnapshot mocks base method.
func (m *MockTxnOperator) ApplySnapshot(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySnapshot", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySnapshot indicates an expected call of ApplySnapshot.
func (mr *MockTxnOperatorMockRecorder) ApplySnapshot(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySnapshot", reflect.TypeOf((*MockTxnOperator)(nil).ApplySnapshot), data)
}

// Commit mocks base method.
func (m *MockTxnOperator) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxnOperatorMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxnOperator)(nil).Commit), ctx)
}

// GetWorkspace mocks base method.
func (m *MockTxnOperator) GetWorkspace() client.Workspace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace")
	ret0, _ := ret[0].(client.Workspace)
	return ret0
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockTxnOperatorMockRecorder) GetWorkspace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockTxnOperator)(nil).GetWorkspace))
}

// IsRetry mocks base method.
func (m *MockTxnOperator) IsRetry() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetry")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetry indicates an expected call of IsRetry.
func (mr *MockTxnOperatorMockRecorder) IsRetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetry", reflect.TypeOf((*MockTxnOperator)(nil).IsRetry))
}

// Read mocks base method.
func (m *MockTxnOperator) Read(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTxnOperatorMockRecorder) Read(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTxnOperator)(nil).Read), ctx, ops)
}

// ResetRetry mocks base method.
func (m *MockTxnOperator) ResetRetry(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetRetry", arg0)
}

// ResetRetry indicates an expected call of ResetRetry.
func (mr *MockTxnOperatorMockRecorder) ResetRetry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetRetry", reflect.TypeOf((*MockTxnOperator)(nil).ResetRetry), arg0)
}

// Rollback mocks base method.
func (m *MockTxnOperator) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxnOperatorMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTxnOperator)(nil).Rollback), ctx)
}

// Snapshot mocks base method.
func (m *MockTxnOperator) Snapshot() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockTxnOperatorMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockTxnOperator)(nil).Snapshot))
}

// Txn mocks base method.
func (m *MockTxnOperator) Txn() txn.TxnMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn")
	ret0, _ := ret[0].(txn.TxnMeta)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockTxnOperatorMockRecorder) Txn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockTxnOperator)(nil).Txn))
}

// TxnRef mocks base method.
func (m *MockTxnOperator) TxnRef() *txn.TxnMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxnRef")
	ret0, _ := ret[0].(*txn.TxnMeta)
	return ret0
}

// TxnRef indicates an expected call of TxnRef.
func (mr *MockTxnOperatorMockRecorder) TxnRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxnRef", reflect.TypeOf((*MockTxnOperator)(nil).TxnRef))
}

// UpdateSnapshot mocks base method.
func (m *MockTxnOperator) UpdateSnapshot(ctx context.Context, ts timestamp.Timestamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", ctx, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot.
func (mr *MockTxnOperatorMockRecorder) UpdateSnapshot(ctx, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockTxnOperator)(nil).UpdateSnapshot), ctx, ts)
}

// Write mocks base method.
func (m *MockTxnOperator) Write(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockTxnOperatorMockRecorder) Write(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTxnOperator)(nil).Write), ctx, ops)
}

// WriteAndCommit mocks base method.
func (m *MockTxnOperator) WriteAndCommit(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAndCommit", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAndCommit indicates an expected call of WriteAndCommit.
func (mr *MockTxnOperatorMockRecorder) WriteAndCommit(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAndCommit", reflect.TypeOf((*MockTxnOperator)(nil).WriteAndCommit), ctx, ops)
}

// MockDebugableTxnOperator is a mock of DebugableTxnOperator interface.
type MockDebugableTxnOperator struct {
	ctrl     *gomock.Controller
	recorder *MockDebugableTxnOperatorMockRecorder
}

// MockDebugableTxnOperatorMockRecorder is the mock recorder for MockDebugableTxnOperator.
type MockDebugableTxnOperatorMockRecorder struct {
	mock *MockDebugableTxnOperator
}

// NewMockDebugableTxnOperator creates a new mock instance.
func NewMockDebugableTxnOperator(ctrl *gomock.Controller) *MockDebugableTxnOperator {
	mock := &MockDebugableTxnOperator{ctrl: ctrl}
	mock.recorder = &MockDebugableTxnOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebugableTxnOperator) EXPECT() *MockDebugableTxnOperatorMockRecorder {
	return m.recorder
}

// AddLockTable mocks base method.
func (m *MockDebugableTxnOperator) AddLockTable(locktable lock.LockTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLockTable", locktable)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLockTable indicates an expected call of AddLockTable.
func (mr *MockDebugableTxnOperatorMockRecorder) AddLockTable(locktable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLockTable", reflect.TypeOf((*MockDebugableTxnOperator)(nil).AddLockTable), locktable)
}

// AddWorkspace mocks base method.
func (m *MockDebugableTxnOperator) AddWorkspace(workspace client.Workspace) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddWorkspace", workspace)
}

// AddWorkspace indicates an expected call of AddWorkspace.
func (mr *MockDebugableTxnOperatorMockRecorder) AddWorkspace(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkspace", reflect.TypeOf((*MockDebugableTxnOperator)(nil).AddWorkspace), workspace)
}

// ApplySnapshot mocks base method.
func (m *MockDebugableTxnOperator) ApplySnapshot(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySnapshot", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySnapshot indicates an expected call of ApplySnapshot.
func (mr *MockDebugableTxnOperatorMockRecorder) ApplySnapshot(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySnapshot", reflect.TypeOf((*MockDebugableTxnOperator)(nil).ApplySnapshot), data)
}

// Commit mocks base method.
func (m *MockDebugableTxnOperator) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDebugableTxnOperatorMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDebugableTxnOperator)(nil).Commit), ctx)
}

// Debug mocks base method.
func (m *MockDebugableTxnOperator) Debug(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Debug indicates an expected call of Debug.
func (mr *MockDebugableTxnOperatorMockRecorder) Debug(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockDebugableTxnOperator)(nil).Debug), ctx, ops)
}

// GetWorkspace mocks base method.
func (m *MockDebugableTxnOperator) GetWorkspace() client.Workspace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace")
	ret0, _ := ret[0].(client.Workspace)
	return ret0
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockDebugableTxnOperatorMockRecorder) GetWorkspace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockDebugableTxnOperator)(nil).GetWorkspace))
}

// IsRetry mocks base method.
func (m *MockDebugableTxnOperator) IsRetry() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetry")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetry indicates an expected call of IsRetry.
func (mr *MockDebugableTxnOperatorMockRecorder) IsRetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetry", reflect.TypeOf((*MockDebugableTxnOperator)(nil).IsRetry))
}

// Read mocks base method.
func (m *MockDebugableTxnOperator) Read(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDebugableTxnOperatorMockRecorder) Read(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDebugableTxnOperator)(nil).Read), ctx, ops)
}

// ResetRetry mocks base method.
func (m *MockDebugableTxnOperator) ResetRetry(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetRetry", arg0)
}

// ResetRetry indicates an expected call of ResetRetry.
func (mr *MockDebugableTxnOperatorMockRecorder) ResetRetry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetRetry", reflect.TypeOf((*MockDebugableTxnOperator)(nil).ResetRetry), arg0)
}

// Rollback mocks base method.
func (m *MockDebugableTxnOperator) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDebugableTxnOperatorMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDebugableTxnOperator)(nil).Rollback), ctx)
}

// Snapshot mocks base method.
func (m *MockDebugableTxnOperator) Snapshot() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockDebugableTxnOperatorMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockDebugableTxnOperator)(nil).Snapshot))
}

// Txn mocks base method.
func (m *MockDebugableTxnOperator) Txn() txn.TxnMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn")
	ret0, _ := ret[0].(txn.TxnMeta)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockDebugableTxnOperatorMockRecorder) Txn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockDebugableTxnOperator)(nil).Txn))
}

// TxnRef mocks base method.
func (m *MockDebugableTxnOperator) TxnRef() *txn.TxnMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxnRef")
	ret0, _ := ret[0].(*txn.TxnMeta)
	return ret0
}

// TxnRef indicates an expected call of TxnRef.
func (mr *MockDebugableTxnOperatorMockRecorder) TxnRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxnRef", reflect.TypeOf((*MockDebugableTxnOperator)(nil).TxnRef))
}

// UpdateSnapshot mocks base method.
func (m *MockDebugableTxnOperator) UpdateSnapshot(ctx context.Context, ts timestamp.Timestamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", ctx, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot.
func (mr *MockDebugableTxnOperatorMockRecorder) UpdateSnapshot(ctx, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockDebugableTxnOperator)(nil).UpdateSnapshot), ctx, ts)
}

// Write mocks base method.
func (m *MockDebugableTxnOperator) Write(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockDebugableTxnOperatorMockRecorder) Write(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDebugableTxnOperator)(nil).Write), ctx, ops)
}

// WriteAndCommit mocks base method.
func (m *MockDebugableTxnOperator) WriteAndCommit(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAndCommit", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAndCommit indicates an expected call of WriteAndCommit.
func (mr *MockDebugableTxnOperatorMockRecorder) WriteAndCommit(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAndCommit", reflect.TypeOf((*MockDebugableTxnOperator)(nil).WriteAndCommit), ctx, ops)
}

// MockEventableTxnOperator is a mock of EventableTxnOperator interface.
type MockEventableTxnOperator struct {
	ctrl     *gomock.Controller
	recorder *MockEventableTxnOperatorMockRecorder
}

// MockEventableTxnOperatorMockRecorder is the mock recorder for MockEventableTxnOperator.
type MockEventableTxnOperatorMockRecorder struct {
	mock *MockEventableTxnOperator
}

// NewMockEventableTxnOperator creates a new mock instance.
func NewMockEventableTxnOperator(ctrl *gomock.Controller) *MockEventableTxnOperator {
	mock := &MockEventableTxnOperator{ctrl: ctrl}
	mock.recorder = &MockEventableTxnOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventableTxnOperator) EXPECT() *MockEventableTxnOperatorMockRecorder {
	return m.recorder
}

// AddLockTable mocks base method.
func (m *MockEventableTxnOperator) AddLockTable(locktable lock.LockTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLockTable", locktable)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLockTable indicates an expected call of AddLockTable.
func (mr *MockEventableTxnOperatorMockRecorder) AddLockTable(locktable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLockTable", reflect.TypeOf((*MockEventableTxnOperator)(nil).AddLockTable), locktable)
}

// AddWorkspace mocks base method.
func (m *MockEventableTxnOperator) AddWorkspace(workspace client.Workspace) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddWorkspace", workspace)
}

// AddWorkspace indicates an expected call of AddWorkspace.
func (mr *MockEventableTxnOperatorMockRecorder) AddWorkspace(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkspace", reflect.TypeOf((*MockEventableTxnOperator)(nil).AddWorkspace), workspace)
}

// AppendEventCallback mocks base method.
func (m *MockEventableTxnOperator) AppendEventCallback(event client.EventType, callbacks ...func(txn.TxnMeta)) {
	m.ctrl.T.Helper()
	varargs := []interface{}{event}
	for _, a := range callbacks {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AppendEventCallback", varargs...)
}

// AppendEventCallback indicates an expected call of AppendEventCallback.
func (mr *MockEventableTxnOperatorMockRecorder) AppendEventCallback(event interface{}, callbacks ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{event}, callbacks...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEventCallback", reflect.TypeOf((*MockEventableTxnOperator)(nil).AppendEventCallback), varargs...)
}

// ApplySnapshot mocks base method.
func (m *MockEventableTxnOperator) ApplySnapshot(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySnapshot", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySnapshot indicates an expected call of ApplySnapshot.
func (mr *MockEventableTxnOperatorMockRecorder) ApplySnapshot(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySnapshot", reflect.TypeOf((*MockEventableTxnOperator)(nil).ApplySnapshot), data)
}

// Commit mocks base method.
func (m *MockEventableTxnOperator) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockEventableTxnOperatorMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockEventableTxnOperator)(nil).Commit), ctx)
}

// GetWorkspace mocks base method.
func (m *MockEventableTxnOperator) GetWorkspace() client.Workspace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace")
	ret0, _ := ret[0].(client.Workspace)
	return ret0
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockEventableTxnOperatorMockRecorder) GetWorkspace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockEventableTxnOperator)(nil).GetWorkspace))
}

// IsRetry mocks base method.
func (m *MockEventableTxnOperator) IsRetry() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetry")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetry indicates an expected call of IsRetry.
func (mr *MockEventableTxnOperatorMockRecorder) IsRetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetry", reflect.TypeOf((*MockEventableTxnOperator)(nil).IsRetry))
}

// Read mocks base method.
func (m *MockEventableTxnOperator) Read(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockEventableTxnOperatorMockRecorder) Read(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockEventableTxnOperator)(nil).Read), ctx, ops)
}

// ResetRetry mocks base method.
func (m *MockEventableTxnOperator) ResetRetry(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetRetry", arg0)
}

// ResetRetry indicates an expected call of ResetRetry.
func (mr *MockEventableTxnOperatorMockRecorder) ResetRetry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetRetry", reflect.TypeOf((*MockEventableTxnOperator)(nil).ResetRetry), arg0)
}

// Rollback mocks base method.
func (m *MockEventableTxnOperator) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockEventableTxnOperatorMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockEventableTxnOperator)(nil).Rollback), ctx)
}

// Snapshot mocks base method.
func (m *MockEventableTxnOperator) Snapshot() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockEventableTxnOperatorMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockEventableTxnOperator)(nil).Snapshot))
}

// Txn mocks base method.
func (m *MockEventableTxnOperator) Txn() txn.TxnMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn")
	ret0, _ := ret[0].(txn.TxnMeta)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockEventableTxnOperatorMockRecorder) Txn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockEventableTxnOperator)(nil).Txn))
}

// TxnRef mocks base method.
func (m *MockEventableTxnOperator) TxnRef() *txn.TxnMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxnRef")
	ret0, _ := ret[0].(*txn.TxnMeta)
	return ret0
}

// TxnRef indicates an expected call of TxnRef.
func (mr *MockEventableTxnOperatorMockRecorder) TxnRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxnRef", reflect.TypeOf((*MockEventableTxnOperator)(nil).TxnRef))
}

// UpdateSnapshot mocks base method.
func (m *MockEventableTxnOperator) UpdateSnapshot(ctx context.Context, ts timestamp.Timestamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", ctx, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot.
func (mr *MockEventableTxnOperatorMockRecorder) UpdateSnapshot(ctx, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockEventableTxnOperator)(nil).UpdateSnapshot), ctx, ts)
}

// Write mocks base method.
func (m *MockEventableTxnOperator) Write(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockEventableTxnOperatorMockRecorder) Write(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockEventableTxnOperator)(nil).Write), ctx, ops)
}

// WriteAndCommit mocks base method.
func (m *MockEventableTxnOperator) WriteAndCommit(ctx context.Context, ops []txn.TxnRequest) (*rpc.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAndCommit", ctx, ops)
	ret0, _ := ret[0].(*rpc.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAndCommit indicates an expected call of WriteAndCommit.
func (mr *MockEventableTxnOperatorMockRecorder) WriteAndCommit(ctx, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAndCommit", reflect.TypeOf((*MockEventableTxnOperator)(nil).WriteAndCommit), ctx, ops)
}

// MockTxnIDGenerator is a mock of TxnIDGenerator interface.
type MockTxnIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTxnIDGeneratorMockRecorder
}

// MockTxnIDGeneratorMockRecorder is the mock recorder for MockTxnIDGenerator.
type MockTxnIDGeneratorMockRecorder struct {
	mock *MockTxnIDGenerator
}

// NewMockTxnIDGenerator creates a new mock instance.
func NewMockTxnIDGenerator(ctrl *gomock.Controller) *MockTxnIDGenerator {
	mock := &MockTxnIDGenerator{ctrl: ctrl}
	mock.recorder = &MockTxnIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxnIDGenerator) EXPECT() *MockTxnIDGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTxnIDGenerator) Generate() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockTxnIDGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTxnIDGenerator)(nil).Generate))
}

// MockTimestampWaiter is a mock of TimestampWaiter interface.
type MockTimestampWaiter struct {
	ctrl     *gomock.Controller
	recorder *MockTimestampWaiterMockRecorder
}

// MockTimestampWaiterMockRecorder is the mock recorder for MockTimestampWaiter.
type MockTimestampWaiterMockRecorder struct {
	mock *MockTimestampWaiter
}

// NewMockTimestampWaiter creates a new mock instance.
func NewMockTimestampWaiter(ctrl *gomock.Controller) *MockTimestampWaiter {
	mock := &MockTimestampWaiter{ctrl: ctrl}
	mock.recorder = &MockTimestampWaiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimestampWaiter) EXPECT() *MockTimestampWaiterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTimestampWaiter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTimestampWaiterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTimestampWaiter)(nil).Close))
}

// GetTimestamp mocks base method.
func (m *MockTimestampWaiter) GetTimestamp(arg0 context.Context, arg1 timestamp.Timestamp) (timestamp.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp", arg0, arg1)
	ret0, _ := ret[0].(timestamp.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockTimestampWaiterMockRecorder) GetTimestamp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockTimestampWaiter)(nil).GetTimestamp), arg0, arg1)
}

// NotifyLatestCommitTS mocks base method.
func (m *MockTimestampWaiter) NotifyLatestCommitTS(appliedTS timestamp.Timestamp) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyLatestCommitTS", appliedTS)
}

// NotifyLatestCommitTS indicates an expected call of NotifyLatestCommitTS.
func (mr *MockTimestampWaiterMockRecorder) NotifyLatestCommitTS(appliedTS interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyLatestCommitTS", reflect.TypeOf((*MockTimestampWaiter)(nil).NotifyLatestCommitTS), appliedTS)
}

// MockWorkspace is a mock of Workspace interface.
type MockWorkspace struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceMockRecorder
}

// MockWorkspaceMockRecorder is the mock recorder for MockWorkspace.
type MockWorkspaceMockRecorder struct {
	mock *MockWorkspace
}

// NewMockWorkspace creates a new mock instance.
func NewMockWorkspace(ctrl *gomock.Controller) *MockWorkspace {
	mock := &MockWorkspace{ctrl: ctrl}
	mock.recorder = &MockWorkspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspace) EXPECT() *MockWorkspaceMockRecorder {
	return m.recorder
}

// Adjust mocks base method.
func (m *MockWorkspace) Adjust() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Adjust")
	ret0, _ := ret[0].(error)
	return ret0
}

// Adjust indicates an expected call of Adjust.
func (mr *MockWorkspaceMockRecorder) Adjust() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Adjust", reflect.TypeOf((*MockWorkspace)(nil).Adjust))
}

// Commit mocks base method.
func (m *MockWorkspace) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockWorkspaceMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockWorkspace)(nil).Commit), ctx)
}

// EndStatement mocks base method.
func (m *MockWorkspace) EndStatement() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndStatement")
}

// EndStatement indicates an expected call of EndStatement.
func (mr *MockWorkspaceMockRecorder) EndStatement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndStatement", reflect.TypeOf((*MockWorkspace)(nil).EndStatement))
}

// GetSQLCount mocks base method.
func (m *MockWorkspace) GetSQLCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSQLCount indicates an expected call of GetSQLCount.
func (mr *MockWorkspaceMockRecorder) GetSQLCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLCount", reflect.TypeOf((*MockWorkspace)(nil).GetSQLCount))
}

// IncrSQLCount mocks base method.
func (m *MockWorkspace) IncrSQLCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrSQLCount")
}

// IncrSQLCount indicates an expected call of IncrSQLCount.
func (mr *MockWorkspaceMockRecorder) IncrSQLCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrSQLCount", reflect.TypeOf((*MockWorkspace)(nil).IncrSQLCount))
}

// IncrStatementID mocks base method.
func (m *MockWorkspace) IncrStatementID(ctx context.Context, commit bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrStatementID", ctx, commit)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrStatementID indicates an expected call of IncrStatementID.
func (mr *MockWorkspaceMockRecorder) IncrStatementID(ctx, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrStatementID", reflect.TypeOf((*MockWorkspace)(nil).IncrStatementID), ctx, commit)
}

// Rollback mocks base method.
func (m *MockWorkspace) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockWorkspaceMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockWorkspace)(nil).Rollback), ctx)
}

// RollbackLastStatement mocks base method.
func (m *MockWorkspace) RollbackLastStatement(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackLastStatement", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackLastStatement indicates an expected call of RollbackLastStatement.
func (mr *MockWorkspaceMockRecorder) RollbackLastStatement(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackLastStatement", reflect.TypeOf((*MockWorkspace)(nil).RollbackLastStatement), ctx)
}

// StartStatement mocks base method.
func (m *MockWorkspace) StartStatement() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartStatement")
}

// StartStatement indicates an expected call of StartStatement.
func (mr *MockWorkspaceMockRecorder) StartStatement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStatement", reflect.TypeOf((*MockWorkspace)(nil).StartStatement))
}
