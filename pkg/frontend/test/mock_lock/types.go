// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/lockservice/types.go
//
// Generated by this command:
//
//	mockgen -source pkg/lockservice/types.go --destination pkg/frontend/test/mock_lock/types.go -package=mock_lock
//

// Package mock_lock is a generated GoMock package.
package mock_lock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	morpc "github.com/matrixorigin/matrixone/pkg/common/morpc"
	lockservice "github.com/matrixorigin/matrixone/pkg/lockservice"
	lock "github.com/matrixorigin/matrixone/pkg/pb/lock"
	timestamp "github.com/matrixorigin/matrixone/pkg/pb/timestamp"
)

// MockLockStorage is a mock of LockStorage interface.
type MockLockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockLockStorageMockRecorder
}

// MockLockStorageMockRecorder is the mock recorder for MockLockStorage.
type MockLockStorageMockRecorder struct {
	mock *MockLockStorage
}

// NewMockLockStorage creates a new mock instance.
func NewMockLockStorage(ctrl *gomock.Controller) *MockLockStorage {
	mock := &MockLockStorage{ctrl: ctrl}
	mock.recorder = &MockLockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockStorage) EXPECT() *MockLockStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLockStorage) Add(key []byte, value lockservice.Lock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", key, value)
}

// Add indicates an expected call of Add.
func (mr *MockLockStorageMockRecorder) Add(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLockStorage)(nil).Add), key, value)
}

// Clear mocks base method.
func (m *MockLockStorage) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockLockStorageMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockLockStorage)(nil).Clear))
}

// Delete mocks base method.
func (m *MockLockStorage) Delete(key []byte) (lockservice.Lock, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(lockservice.Lock)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockLockStorageMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLockStorage)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockLockStorage) Get(key []byte) (lockservice.Lock, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(lockservice.Lock)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLockStorageMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLockStorage)(nil).Get), key)
}

// Iter mocks base method.
func (m *MockLockStorage) Iter(arg0 func([]byte, lockservice.Lock) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Iter", arg0)
}

// Iter indicates an expected call of Iter.
func (mr *MockLockStorageMockRecorder) Iter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockLockStorage)(nil).Iter), arg0)
}

// Len mocks base method.
func (m *MockLockStorage) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockLockStorageMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockLockStorage)(nil).Len))
}

// Prev mocks base method.
func (m *MockLockStorage) Prev(key []byte) ([]byte, lockservice.Lock, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prev", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(lockservice.Lock)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Prev indicates an expected call of Prev.
func (mr *MockLockStorageMockRecorder) Prev(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prev", reflect.TypeOf((*MockLockStorage)(nil).Prev), key)
}

// Range mocks base method.
func (m *MockLockStorage) Range(start, end []byte, fn func([]byte, lockservice.Lock) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", start, end, fn)
}

// Range indicates an expected call of Range.
func (mr *MockLockStorageMockRecorder) Range(start, end, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockLockStorage)(nil).Range), start, end, fn)
}

// Seek mocks base method.
func (m *MockLockStorage) Seek(key []byte) ([]byte, lockservice.Lock, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(lockservice.Lock)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Seek indicates an expected call of Seek.
func (mr *MockLockStorageMockRecorder) Seek(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockLockStorage)(nil).Seek), key)
}

// MockLockService is a mock of LockService interface.
type MockLockService struct {
	ctrl     *gomock.Controller
	recorder *MockLockServiceMockRecorder
}

// MockLockServiceMockRecorder is the mock recorder for MockLockService.
type MockLockServiceMockRecorder struct {
	mock *MockLockService
}

// NewMockLockService creates a new mock instance.
func NewMockLockService(ctrl *gomock.Controller) *MockLockService {
	mock := &MockLockService{ctrl: ctrl}
	mock.recorder = &MockLockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockService) EXPECT() *MockLockServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLockService)(nil).Close))
}

// CloseRemoteLockTable mocks base method.
func (m *MockLockService) CloseRemoteLockTable(group uint32, tableID, version uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRemoteLockTable", group, tableID, version)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseRemoteLockTable indicates an expected call of CloseRemoteLockTable.
func (mr *MockLockServiceMockRecorder) CloseRemoteLockTable(group, tableID, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRemoteLockTable", reflect.TypeOf((*MockLockService)(nil).CloseRemoteLockTable), group, tableID, version)
}

// ForceRefreshLockTableBinds mocks base method.
func (m *MockLockService) ForceRefreshLockTableBinds(targets []uint64, matcher func(lock.LockTable) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceRefreshLockTableBinds", targets, matcher)
}

// ForceRefreshLockTableBinds indicates an expected call of ForceRefreshLockTableBinds.
func (mr *MockLockServiceMockRecorder) ForceRefreshLockTableBinds(targets, matcher any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceRefreshLockTableBinds", reflect.TypeOf((*MockLockService)(nil).ForceRefreshLockTableBinds), targets, matcher)
}

// GetConfig mocks base method.
func (m *MockLockService) GetConfig() lockservice.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(lockservice.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockLockServiceMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockLockService)(nil).GetConfig))
}

// GetLockTableBind mocks base method.
func (m *MockLockService) GetLockTableBind(group uint32, tableID uint64) (lock.LockTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockTableBind", group, tableID)
	ret0, _ := ret[0].(lock.LockTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLockTableBind indicates an expected call of GetLockTableBind.
func (mr *MockLockServiceMockRecorder) GetLockTableBind(group, tableID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockTableBind", reflect.TypeOf((*MockLockService)(nil).GetLockTableBind), group, tableID)
}

// GetServiceID mocks base method.
func (m *MockLockService) GetServiceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceID indicates an expected call of GetServiceID.
func (mr *MockLockServiceMockRecorder) GetServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceID", reflect.TypeOf((*MockLockService)(nil).GetServiceID))
}

// GetWaitingList mocks base method.
func (m *MockLockService) GetWaitingList(ctx context.Context, txnID []byte) (bool, []lock.WaitTxn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaitingList", ctx, txnID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]lock.WaitTxn)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWaitingList indicates an expected call of GetWaitingList.
func (mr *MockLockServiceMockRecorder) GetWaitingList(ctx, txnID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaitingList", reflect.TypeOf((*MockLockService)(nil).GetWaitingList), ctx, txnID)
}

// IsOrphanTxn mocks base method.
func (m *MockLockService) IsOrphanTxn(arg0 context.Context, arg1 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrphanTxn", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrphanTxn indicates an expected call of IsOrphanTxn.
func (mr *MockLockServiceMockRecorder) IsOrphanTxn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrphanTxn", reflect.TypeOf((*MockLockService)(nil).IsOrphanTxn), arg0, arg1)
}

// IterLocks mocks base method.
func (m *MockLockService) IterLocks(arg0 func(uint64, [][]byte, lockservice.Lock) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterLocks", arg0)
}

// IterLocks indicates an expected call of IterLocks.
func (mr *MockLockServiceMockRecorder) IterLocks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterLocks", reflect.TypeOf((*MockLockService)(nil).IterLocks), arg0)
}

// Lock mocks base method.
func (m *MockLockService) Lock(ctx context.Context, tableID uint64, rows [][]byte, txnID []byte, options lock.LockOptions) (lock.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx, tableID, rows, txnID, options)
	ret0, _ := ret[0].(lock.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockLockServiceMockRecorder) Lock(ctx, tableID, rows, txnID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLockService)(nil).Lock), ctx, tableID, rows, txnID, options)
}

// Unlock mocks base method.
func (m *MockLockService) Unlock(ctx context.Context, txnID []byte, commitTS timestamp.Timestamp, mutations ...lock.ExtraMutation) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, txnID, commitTS}
	for _, a := range mutations {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unlock", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockServiceMockRecorder) Unlock(ctx, txnID, commitTS any, mutations ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, txnID, commitTS}, mutations...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLockService)(nil).Unlock), varargs...)
}

// MockLockTableAllocator is a mock of LockTableAllocator interface.
type MockLockTableAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockLockTableAllocatorMockRecorder
}

// MockLockTableAllocatorMockRecorder is the mock recorder for MockLockTableAllocator.
type MockLockTableAllocatorMockRecorder struct {
	mock *MockLockTableAllocator
}

// NewMockLockTableAllocator creates a new mock instance.
func NewMockLockTableAllocator(ctrl *gomock.Controller) *MockLockTableAllocator {
	mock := &MockLockTableAllocator{ctrl: ctrl}
	mock.recorder = &MockLockTableAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockTableAllocator) EXPECT() *MockLockTableAllocatorMockRecorder {
	return m.recorder
}

// AddCannotCommit mocks base method.
func (m *MockLockTableAllocator) AddCannotCommit(values []lock.OrphanTxn) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCannotCommit", values)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// AddCannotCommit indicates an expected call of AddCannotCommit.
func (mr *MockLockTableAllocatorMockRecorder) AddCannotCommit(values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCannotCommit", reflect.TypeOf((*MockLockTableAllocator)(nil).AddCannotCommit), values)
}

// Close mocks base method.
func (m *MockLockTableAllocator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLockTableAllocatorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLockTableAllocator)(nil).Close))
}

// Get mocks base method.
func (m *MockLockTableAllocator) Get(serviceID string, group uint32, tableID, originTableID uint64, sharding lock.Sharding) lock.LockTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", serviceID, group, tableID, originTableID, sharding)
	ret0, _ := ret[0].(lock.LockTable)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockLockTableAllocatorMockRecorder) Get(serviceID, group, tableID, originTableID, sharding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLockTableAllocator)(nil).Get), serviceID, group, tableID, originTableID, sharding)
}

// GetLatest mocks base method.
func (m *MockLockTableAllocator) GetLatest(groupID uint32, tableID uint64) lock.LockTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", groupID, tableID)
	ret0, _ := ret[0].(lock.LockTable)
	return ret0
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockLockTableAllocatorMockRecorder) GetLatest(groupID, tableID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockLockTableAllocator)(nil).GetLatest), groupID, tableID)
}

// GetVersion mocks base method.
func (m *MockLockTableAllocator) GetVersion() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockLockTableAllocatorMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockLockTableAllocator)(nil).GetVersion))
}

// KeepLockTableBind mocks base method.
func (m *MockLockTableAllocator) KeepLockTableBind(serviceID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepLockTableBind", serviceID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// KeepLockTableBind indicates an expected call of KeepLockTableBind.
func (mr *MockLockTableAllocatorMockRecorder) KeepLockTableBind(serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepLockTableBind", reflect.TypeOf((*MockLockTableAllocator)(nil).KeepLockTableBind), serviceID)
}

// Valid mocks base method.
func (m *MockLockTableAllocator) Valid(serviceID string, txnID []byte, binds []lock.LockTable) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid", serviceID, txnID, binds)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Valid indicates an expected call of Valid.
func (mr *MockLockTableAllocatorMockRecorder) Valid(serviceID, txnID, binds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockLockTableAllocator)(nil).Valid), serviceID, txnID, binds)
}

// MockLockTableKeeper is a mock of LockTableKeeper interface.
type MockLockTableKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockLockTableKeeperMockRecorder
}

// MockLockTableKeeperMockRecorder is the mock recorder for MockLockTableKeeper.
type MockLockTableKeeperMockRecorder struct {
	mock *MockLockTableKeeper
}

// NewMockLockTableKeeper creates a new mock instance.
func NewMockLockTableKeeper(ctrl *gomock.Controller) *MockLockTableKeeper {
	mock := &MockLockTableKeeper{ctrl: ctrl}
	mock.recorder = &MockLockTableKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockTableKeeper) EXPECT() *MockLockTableKeeperMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLockTableKeeper) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLockTableKeeperMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLockTableKeeper)(nil).Close))
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AsyncSend mocks base method.
func (m *MockClient) AsyncSend(arg0 context.Context, arg1 *lock.Request) (*morpc.Future, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncSend", arg0, arg1)
	ret0, _ := ret[0].(*morpc.Future)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsyncSend indicates an expected call of AsyncSend.
func (mr *MockClientMockRecorder) AsyncSend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncSend", reflect.TypeOf((*MockClient)(nil).AsyncSend), arg0, arg1)
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Send mocks base method.
func (m *MockClient) Send(arg0 context.Context, arg1 *lock.Request) (*lock.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*lock.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), arg0, arg1)
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockServer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServer)(nil).Close))
}

// RegisterMethodHandler mocks base method.
func (m *MockServer) RegisterMethodHandler(arg0 lock.Method, arg1 lockservice.RequestHandleFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterMethodHandler", arg0, arg1)
}

// RegisterMethodHandler indicates an expected call of RegisterMethodHandler.
func (mr *MockServerMockRecorder) RegisterMethodHandler(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMethodHandler", reflect.TypeOf((*MockServer)(nil).RegisterMethodHandler), arg0, arg1)
}

// Start mocks base method.
func (m *MockServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServer)(nil).Start))
}
