// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/queryservice/query_service.go
//
// Generated by this command:
//
//	mockgen -source pkg/queryservice/query_service.go --destination pkg/frontend/test/mock_query/query_service.go -package=mock_query
//

// Package mock_query is a generated GoMock package.
package mock_query

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	morpc "github.com/matrixorigin/matrixone/pkg/common/morpc"
	query "github.com/matrixorigin/matrixone/pkg/pb/query"
)

// MockQueryService is a mock of QueryService interface.
type MockQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockQueryServiceMockRecorder
}

// MockQueryServiceMockRecorder is the mock recorder for MockQueryService.
type MockQueryServiceMockRecorder struct {
	mock *MockQueryService
}

// NewMockQueryService creates a new mock instance.
func NewMockQueryService(ctrl *gomock.Controller) *MockQueryService {
	mock := &MockQueryService{ctrl: ctrl}
	mock.recorder = &MockQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryService) EXPECT() *MockQueryServiceMockRecorder {
	return m.recorder
}

// AddHandleFunc mocks base method.
func (m *MockQueryService) AddHandleFunc(method query.CmdMethod, h func(context.Context, *query.Request, *query.Response, *morpc.Buffer) error, async bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandleFunc", method, h, async)
}

// AddHandleFunc indicates an expected call of AddHandleFunc.
func (mr *MockQueryServiceMockRecorder) AddHandleFunc(method, h, async any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandleFunc", reflect.TypeOf((*MockQueryService)(nil).AddHandleFunc), method, h, async)
}

// Close mocks base method.
func (m *MockQueryService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQueryServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueryService)(nil).Close))
}

// ServiceID mocks base method.
func (m *MockQueryService) ServiceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceID indicates an expected call of ServiceID.
func (mr *MockQueryServiceMockRecorder) ServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceID", reflect.TypeOf((*MockQueryService)(nil).ServiceID))
}

// SetReleaseFunc mocks base method.
func (m *MockQueryService) SetReleaseFunc(resp *query.Response, f func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReleaseFunc", resp, f)
}

// SetReleaseFunc indicates an expected call of SetReleaseFunc.
func (mr *MockQueryServiceMockRecorder) SetReleaseFunc(resp, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReleaseFunc", reflect.TypeOf((*MockQueryService)(nil).SetReleaseFunc), resp, f)
}

// Start mocks base method.
func (m *MockQueryService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockQueryServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQueryService)(nil).Start))
}
