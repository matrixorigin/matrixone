// Code generated by MockGen. DO NOT EDIT.
// Source: iopackage.go

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIOPackage is a mock of IOPackage interface.
type MockIOPackage struct {
	ctrl     *gomock.Controller
	recorder *MockIOPackageMockRecorder
}

// MockIOPackageMockRecorder is the mock recorder for MockIOPackage.
type MockIOPackageMockRecorder struct {
	mock *MockIOPackage
}

// NewMockIOPackage creates a new mock instance.
func NewMockIOPackage(ctrl *gomock.Controller) *MockIOPackage {
	mock := &MockIOPackage{ctrl: ctrl}
	mock.recorder = &MockIOPackageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOPackage) EXPECT() *MockIOPackageMockRecorder {
	return m.recorder
}

// AppendUint16 mocks base method.
func (m *MockIOPackage) AppendUint16(arg0 []byte, arg1 uint16) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendUint16", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// AppendUint16 indicates an expected call of AppendUint16.
func (mr *MockIOPackageMockRecorder) AppendUint16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUint16", reflect.TypeOf((*MockIOPackage)(nil).AppendUint16), arg0, arg1)
}

// AppendUint32 mocks base method.
func (m *MockIOPackage) AppendUint32(arg0 []byte, arg1 uint32) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendUint32", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// AppendUint32 indicates an expected call of AppendUint32.
func (mr *MockIOPackageMockRecorder) AppendUint32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUint32", reflect.TypeOf((*MockIOPackage)(nil).AppendUint32), arg0, arg1)
}

// AppendUint64 mocks base method.
func (m *MockIOPackage) AppendUint64(arg0 []byte, arg1 uint64) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendUint64", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// AppendUint64 indicates an expected call of AppendUint64.
func (mr *MockIOPackageMockRecorder) AppendUint64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUint64", reflect.TypeOf((*MockIOPackage)(nil).AppendUint64), arg0, arg1)
}

// AppendUint8 mocks base method.
func (m *MockIOPackage) AppendUint8(arg0 []byte, arg1 uint8) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendUint8", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// AppendUint8 indicates an expected call of AppendUint8.
func (mr *MockIOPackageMockRecorder) AppendUint8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUint8", reflect.TypeOf((*MockIOPackage)(nil).AppendUint8), arg0, arg1)
}

// IsLittleEndian mocks base method.
func (m *MockIOPackage) IsLittleEndian() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLittleEndian")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLittleEndian indicates an expected call of IsLittleEndian.
func (mr *MockIOPackageMockRecorder) IsLittleEndian() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLittleEndian", reflect.TypeOf((*MockIOPackage)(nil).IsLittleEndian))
}

// ReadUint16 mocks base method.
func (m *MockIOPackage) ReadUint16(arg0 []byte, arg1 int) (uint16, int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUint16", arg0, arg1)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ReadUint16 indicates an expected call of ReadUint16.
func (mr *MockIOPackageMockRecorder) ReadUint16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUint16", reflect.TypeOf((*MockIOPackage)(nil).ReadUint16), arg0, arg1)
}

// ReadUint32 mocks base method.
func (m *MockIOPackage) ReadUint32(arg0 []byte, arg1 int) (uint32, int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUint32", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ReadUint32 indicates an expected call of ReadUint32.
func (mr *MockIOPackageMockRecorder) ReadUint32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUint32", reflect.TypeOf((*MockIOPackage)(nil).ReadUint32), arg0, arg1)
}

// ReadUint64 mocks base method.
func (m *MockIOPackage) ReadUint64(arg0 []byte, arg1 int) (uint64, int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUint64", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ReadUint64 indicates an expected call of ReadUint64.
func (mr *MockIOPackageMockRecorder) ReadUint64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUint64", reflect.TypeOf((*MockIOPackage)(nil).ReadUint64), arg0, arg1)
}

// ReadUint8 mocks base method.
func (m *MockIOPackage) ReadUint8(arg0 []byte, arg1 int) (uint8, int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUint8", arg0, arg1)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ReadUint8 indicates an expected call of ReadUint8.
func (mr *MockIOPackageMockRecorder) ReadUint8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUint8", reflect.TypeOf((*MockIOPackage)(nil).ReadUint8), arg0, arg1)
}

// WriteUint16 mocks base method.
func (m *MockIOPackage) WriteUint16(arg0 []byte, arg1 int, arg2 uint16) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUint16", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	return ret0
}

// WriteUint16 indicates an expected call of WriteUint16.
func (mr *MockIOPackageMockRecorder) WriteUint16(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUint16", reflect.TypeOf((*MockIOPackage)(nil).WriteUint16), arg0, arg1, arg2)
}

// WriteUint32 mocks base method.
func (m *MockIOPackage) WriteUint32(arg0 []byte, arg1 int, arg2 uint32) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUint32", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	return ret0
}

// WriteUint32 indicates an expected call of WriteUint32.
func (mr *MockIOPackageMockRecorder) WriteUint32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUint32", reflect.TypeOf((*MockIOPackage)(nil).WriteUint32), arg0, arg1, arg2)
}

// WriteUint64 mocks base method.
func (m *MockIOPackage) WriteUint64(arg0 []byte, arg1 int, arg2 uint64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUint64", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	return ret0
}

// WriteUint64 indicates an expected call of WriteUint64.
func (mr *MockIOPackageMockRecorder) WriteUint64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUint64", reflect.TypeOf((*MockIOPackage)(nil).WriteUint64), arg0, arg1, arg2)
}

// WriteUint8 mocks base method.
func (m *MockIOPackage) WriteUint8(arg0 []byte, arg1 int, arg2 uint8) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUint8", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	return ret0
}

// WriteUint8 indicates an expected call of WriteUint8.
func (mr *MockIOPackageMockRecorder) WriteUint8(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUint8", reflect.TypeOf((*MockIOPackage)(nil).WriteUint8), arg0, arg1, arg2)
}
