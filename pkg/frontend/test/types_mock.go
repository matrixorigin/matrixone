// Code generated by MockGen. DO NOT EDIT.
// Source: ../types.go

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	bytes "bytes"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	buffer "github.com/matrixorigin/matrixone/pkg/common/buffer"
	mpool "github.com/matrixorigin/matrixone/pkg/common/mpool"
	batch "github.com/matrixorigin/matrixone/pkg/container/batch"
	types "github.com/matrixorigin/matrixone/pkg/container/types"
	frontend "github.com/matrixorigin/matrixone/pkg/frontend"
	plan "github.com/matrixorigin/matrixone/pkg/pb/plan"
	timestamp "github.com/matrixorigin/matrixone/pkg/pb/timestamp"
	models "github.com/matrixorigin/matrixone/pkg/sql/models"
	mysql "github.com/matrixorigin/matrixone/pkg/sql/parsers/dialect/mysql"
	tree "github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	plan0 "github.com/matrixorigin/matrixone/pkg/sql/plan"
	util "github.com/matrixorigin/matrixone/pkg/util"
	motrace "github.com/matrixorigin/matrixone/pkg/util/trace/impl/motrace"
	process "github.com/matrixorigin/matrixone/pkg/vm/process"
	zap "go.uber.org/zap"
	zapcore "go.uber.org/zap/zapcore"
)

// MockComputationRunner is a mock of ComputationRunner interface.
type MockComputationRunner struct {
	ctrl     *gomock.Controller
	recorder *MockComputationRunnerMockRecorder
}

// MockComputationRunnerMockRecorder is the mock recorder for MockComputationRunner.
type MockComputationRunnerMockRecorder struct {
	mock *MockComputationRunner
}

// NewMockComputationRunner creates a new mock instance.
func NewMockComputationRunner(ctrl *gomock.Controller) *MockComputationRunner {
	mock := &MockComputationRunner{ctrl: ctrl}
	mock.recorder = &MockComputationRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputationRunner) EXPECT() *MockComputationRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockComputationRunner) Run(ts uint64) (*util.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ts)
	ret0, _ := ret[0].(*util.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockComputationRunnerMockRecorder) Run(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockComputationRunner)(nil).Run), ts)
}

// MockComputationWrapper is a mock of ComputationWrapper interface.
type MockComputationWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockComputationWrapperMockRecorder
}

// MockComputationWrapperMockRecorder is the mock recorder for MockComputationWrapper.
type MockComputationWrapperMockRecorder struct {
	mock *MockComputationWrapper
}

// NewMockComputationWrapper creates a new mock instance.
func NewMockComputationWrapper(ctrl *gomock.Controller) *MockComputationWrapper {
	mock := &MockComputationWrapper{ctrl: ctrl}
	mock.recorder = &MockComputationWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputationWrapper) EXPECT() *MockComputationWrapperMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockComputationWrapper) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockComputationWrapperMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockComputationWrapper)(nil).Clear))
}

// Compile mocks base method.
func (m *MockComputationWrapper) Compile(any any, fill func(*batch.Batch) error) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compile", any, fill)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile.
func (mr *MockComputationWrapperMockRecorder) Compile(any, fill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockComputationWrapper)(nil).Compile), any, fill)
}

// Free mocks base method.
func (m *MockComputationWrapper) Free() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free")
}

// Free indicates an expected call of Free.
func (mr *MockComputationWrapperMockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockComputationWrapper)(nil).Free))
}

// GetAst mocks base method.
func (m *MockComputationWrapper) GetAst() tree.Statement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAst")
	ret0, _ := ret[0].(tree.Statement)
	return ret0
}

// GetAst indicates an expected call of GetAst.
func (mr *MockComputationWrapperMockRecorder) GetAst() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAst", reflect.TypeOf((*MockComputationWrapper)(nil).GetAst))
}

// GetColumns mocks base method.
func (m *MockComputationWrapper) GetColumns(ctx context.Context) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumns", ctx)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumns indicates an expected call of GetColumns.
func (mr *MockComputationWrapperMockRecorder) GetColumns(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumns", reflect.TypeOf((*MockComputationWrapper)(nil).GetColumns), ctx)
}

// GetLoadTag mocks base method.
func (m *MockComputationWrapper) GetLoadTag() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadTag")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetLoadTag indicates an expected call of GetLoadTag.
func (mr *MockComputationWrapperMockRecorder) GetLoadTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadTag", reflect.TypeOf((*MockComputationWrapper)(nil).GetLoadTag))
}

// GetProcess mocks base method.
func (m *MockComputationWrapper) GetProcess() *process.Process {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcess")
	ret0, _ := ret[0].(*process.Process)
	return ret0
}

// GetProcess indicates an expected call of GetProcess.
func (mr *MockComputationWrapperMockRecorder) GetProcess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcess", reflect.TypeOf((*MockComputationWrapper)(nil).GetProcess))
}

// GetServerStatus mocks base method.
func (m *MockComputationWrapper) GetServerStatus() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerStatus")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetServerStatus indicates an expected call of GetServerStatus.
func (mr *MockComputationWrapperMockRecorder) GetServerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerStatus", reflect.TypeOf((*MockComputationWrapper)(nil).GetServerStatus))
}

// GetUUID mocks base method.
func (m *MockComputationWrapper) GetUUID() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockComputationWrapperMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockComputationWrapper)(nil).GetUUID))
}

// ParamVals mocks base method.
func (m *MockComputationWrapper) ParamVals() []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamVals")
	ret0, _ := ret[0].([]any)
	return ret0
}

// ParamVals indicates an expected call of ParamVals.
func (mr *MockComputationWrapperMockRecorder) ParamVals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamVals", reflect.TypeOf((*MockComputationWrapper)(nil).ParamVals))
}

// Plan mocks base method.
func (m *MockComputationWrapper) Plan() *plan.Plan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plan")
	ret0, _ := ret[0].(*plan.Plan)
	return ret0
}

// Plan indicates an expected call of Plan.
func (mr *MockComputationWrapperMockRecorder) Plan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockComputationWrapper)(nil).Plan))
}

// RecordExecPlan mocks base method.
func (m *MockComputationWrapper) RecordExecPlan(ctx context.Context, phyPlan *models.PhyPlan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordExecPlan", ctx, phyPlan)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordExecPlan indicates an expected call of RecordExecPlan.
func (mr *MockComputationWrapperMockRecorder) RecordExecPlan(ctx, phyPlan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordExecPlan", reflect.TypeOf((*MockComputationWrapper)(nil).RecordExecPlan), ctx, phyPlan)
}

// ResetPlanAndStmt mocks base method.
func (m *MockComputationWrapper) ResetPlanAndStmt(stmt tree.Statement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetPlanAndStmt", stmt)
}

// ResetPlanAndStmt indicates an expected call of ResetPlanAndStmt.
func (mr *MockComputationWrapperMockRecorder) ResetPlanAndStmt(stmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPlanAndStmt", reflect.TypeOf((*MockComputationWrapper)(nil).ResetPlanAndStmt), stmt)
}

// Run mocks base method.
func (m *MockComputationWrapper) Run(ts uint64) (*util.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ts)
	ret0, _ := ret[0].(*util.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockComputationWrapperMockRecorder) Run(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockComputationWrapper)(nil).Run), ts)
}

// SetExplainBuffer mocks base method.
func (m *MockComputationWrapper) SetExplainBuffer(buf *bytes.Buffer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExplainBuffer", buf)
}

// SetExplainBuffer indicates an expected call of SetExplainBuffer.
func (mr *MockComputationWrapperMockRecorder) SetExplainBuffer(buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExplainBuffer", reflect.TypeOf((*MockComputationWrapper)(nil).SetExplainBuffer), buf)
}

// MockColumnInfo is a mock of ColumnInfo interface.
type MockColumnInfo struct {
	ctrl     *gomock.Controller
	recorder *MockColumnInfoMockRecorder
}

// MockColumnInfoMockRecorder is the mock recorder for MockColumnInfo.
type MockColumnInfoMockRecorder struct {
	mock *MockColumnInfo
}

// NewMockColumnInfo creates a new mock instance.
func NewMockColumnInfo(ctrl *gomock.Controller) *MockColumnInfo {
	mock := &MockColumnInfo{ctrl: ctrl}
	mock.recorder = &MockColumnInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColumnInfo) EXPECT() *MockColumnInfoMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockColumnInfo) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockColumnInfoMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockColumnInfo)(nil).GetName))
}

// GetType mocks base method.
func (m *MockColumnInfo) GetType() types.T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(types.T)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockColumnInfoMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockColumnInfo)(nil).GetType))
}

// MockTableInfo is a mock of TableInfo interface.
type MockTableInfo struct {
	ctrl     *gomock.Controller
	recorder *MockTableInfoMockRecorder
}

// MockTableInfoMockRecorder is the mock recorder for MockTableInfo.
type MockTableInfoMockRecorder struct {
	mock *MockTableInfo
}

// NewMockTableInfo creates a new mock instance.
func NewMockTableInfo(ctrl *gomock.Controller) *MockTableInfo {
	mock := &MockTableInfo{ctrl: ctrl}
	mock.recorder = &MockTableInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableInfo) EXPECT() *MockTableInfoMockRecorder {
	return m.recorder
}

// GetColumns mocks base method.
func (m *MockTableInfo) GetColumns() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetColumns")
}

// GetColumns indicates an expected call of GetColumns.
func (mr *MockTableInfoMockRecorder) GetColumns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumns", reflect.TypeOf((*MockTableInfo)(nil).GetColumns))
}

// MockExecResult is a mock of ExecResult interface.
type MockExecResult struct {
	ctrl     *gomock.Controller
	recorder *MockExecResultMockRecorder
}

// MockExecResultMockRecorder is the mock recorder for MockExecResult.
type MockExecResultMockRecorder struct {
	mock *MockExecResult
}

// NewMockExecResult creates a new mock instance.
func NewMockExecResult(ctrl *gomock.Controller) *MockExecResult {
	mock := &MockExecResult{ctrl: ctrl}
	mock.recorder = &MockExecResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecResult) EXPECT() *MockExecResultMockRecorder {
	return m.recorder
}

// ColumnIsNull mocks base method.
func (m *MockExecResult) ColumnIsNull(ctx context.Context, rindex, cindex uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnIsNull", ctx, rindex, cindex)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ColumnIsNull indicates an expected call of ColumnIsNull.
func (mr *MockExecResultMockRecorder) ColumnIsNull(ctx, rindex, cindex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnIsNull", reflect.TypeOf((*MockExecResult)(nil).ColumnIsNull), ctx, rindex, cindex)
}

// GetInt64 mocks base method.
func (m *MockExecResult) GetInt64(ctx context.Context, rindex, cindex uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt64", ctx, rindex, cindex)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt64 indicates an expected call of GetInt64.
func (mr *MockExecResultMockRecorder) GetInt64(ctx, rindex, cindex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64", reflect.TypeOf((*MockExecResult)(nil).GetInt64), ctx, rindex, cindex)
}

// GetRowCount mocks base method.
func (m *MockExecResult) GetRowCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRowCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRowCount indicates an expected call of GetRowCount.
func (mr *MockExecResultMockRecorder) GetRowCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRowCount", reflect.TypeOf((*MockExecResult)(nil).GetRowCount))
}

// GetString mocks base method.
func (m *MockExecResult) GetString(ctx context.Context, rindex, cindex uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", ctx, rindex, cindex)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockExecResultMockRecorder) GetString(ctx, rindex, cindex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockExecResult)(nil).GetString), ctx, rindex, cindex)
}

// GetUint64 mocks base method.
func (m *MockExecResult) GetUint64(ctx context.Context, rindex, cindex uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUint64", ctx, rindex, cindex)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUint64 indicates an expected call of GetUint64.
func (mr *MockExecResultMockRecorder) GetUint64(ctx, rindex, cindex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint64", reflect.TypeOf((*MockExecResult)(nil).GetUint64), ctx, rindex, cindex)
}

// MockBackgroundExec is a mock of BackgroundExec interface.
type MockBackgroundExec struct {
	ctrl     *gomock.Controller
	recorder *MockBackgroundExecMockRecorder
}

// MockBackgroundExecMockRecorder is the mock recorder for MockBackgroundExec.
type MockBackgroundExecMockRecorder struct {
	mock *MockBackgroundExec
}

// NewMockBackgroundExec creates a new mock instance.
func NewMockBackgroundExec(ctrl *gomock.Controller) *MockBackgroundExec {
	mock := &MockBackgroundExec{ctrl: ctrl}
	mock.recorder = &MockBackgroundExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackgroundExec) EXPECT() *MockBackgroundExecMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockBackgroundExec) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockBackgroundExecMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockBackgroundExec)(nil).Clear))
}

// ClearExecResultBatches mocks base method.
func (m *MockBackgroundExec) ClearExecResultBatches() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearExecResultBatches")
}

// ClearExecResultBatches indicates an expected call of ClearExecResultBatches.
func (mr *MockBackgroundExecMockRecorder) ClearExecResultBatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearExecResultBatches", reflect.TypeOf((*MockBackgroundExec)(nil).ClearExecResultBatches))
}

// ClearExecResultSet mocks base method.
func (m *MockBackgroundExec) ClearExecResultSet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearExecResultSet")
}

// ClearExecResultSet indicates an expected call of ClearExecResultSet.
func (mr *MockBackgroundExecMockRecorder) ClearExecResultSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearExecResultSet", reflect.TypeOf((*MockBackgroundExec)(nil).ClearExecResultSet))
}

// Close mocks base method.
func (m *MockBackgroundExec) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBackgroundExecMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBackgroundExec)(nil).Close))
}

// Exec mocks base method.
func (m *MockBackgroundExec) Exec(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockBackgroundExecMockRecorder) Exec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockBackgroundExec)(nil).Exec), arg0, arg1)
}

// ExecRestore mocks base method.
func (m *MockBackgroundExec) ExecRestore(arg0 context.Context, arg1 string, arg2, arg3 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecRestore", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecRestore indicates an expected call of ExecRestore.
func (mr *MockBackgroundExecMockRecorder) ExecRestore(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecRestore", reflect.TypeOf((*MockBackgroundExec)(nil).ExecRestore), arg0, arg1, arg2, arg3)
}

// ExecStmt mocks base method.
func (m *MockBackgroundExec) ExecStmt(arg0 context.Context, arg1 tree.Statement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecStmt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecStmt indicates an expected call of ExecStmt.
func (mr *MockBackgroundExecMockRecorder) ExecStmt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecStmt", reflect.TypeOf((*MockBackgroundExec)(nil).ExecStmt), arg0, arg1)
}

// GetExecResultBatches mocks base method.
func (m *MockBackgroundExec) GetExecResultBatches() []*batch.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecResultBatches")
	ret0, _ := ret[0].([]*batch.Batch)
	return ret0
}

// GetExecResultBatches indicates an expected call of GetExecResultBatches.
func (mr *MockBackgroundExecMockRecorder) GetExecResultBatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecResultBatches", reflect.TypeOf((*MockBackgroundExec)(nil).GetExecResultBatches))
}

// GetExecResultSet mocks base method.
func (m *MockBackgroundExec) GetExecResultSet() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecResultSet")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetExecResultSet indicates an expected call of GetExecResultSet.
func (mr *MockBackgroundExecMockRecorder) GetExecResultSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecResultSet", reflect.TypeOf((*MockBackgroundExec)(nil).GetExecResultSet))
}

// MockAllocator is a mock of Allocator interface.
type MockAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockAllocatorMockRecorder
}

// MockAllocatorMockRecorder is the mock recorder for MockAllocator.
type MockAllocatorMockRecorder struct {
	mock *MockAllocator
}

// NewMockAllocator creates a new mock instance.
func NewMockAllocator(ctrl *gomock.Controller) *MockAllocator {
	mock := &MockAllocator{ctrl: ctrl}
	mock.recorder = &MockAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllocator) EXPECT() *MockAllocatorMockRecorder {
	return m.recorder
}

// Alloc mocks base method.
func (m *MockAllocator) Alloc(capacity int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alloc", capacity)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Alloc indicates an expected call of Alloc.
func (mr *MockAllocatorMockRecorder) Alloc(capacity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alloc", reflect.TypeOf((*MockAllocator)(nil).Alloc), capacity)
}

// Free mocks base method.
func (m *MockAllocator) Free(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", arg0)
}

// Free indicates an expected call of Free.
func (mr *MockAllocatorMockRecorder) Free(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockAllocator)(nil).Free), arg0)
}

// MockFeSession is a mock of FeSession interface.
type MockFeSession struct {
	ctrl     *gomock.Controller
	recorder *MockFeSessionMockRecorder
}

// MockFeSessionMockRecorder is the mock recorder for MockFeSession.
type MockFeSessionMockRecorder struct {
	mock *MockFeSession
}

// NewMockFeSession creates a new mock instance.
func NewMockFeSession(ctrl *gomock.Controller) *MockFeSession {
	mock := &MockFeSession{ctrl: ctrl}
	mock.recorder = &MockFeSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeSession) EXPECT() *MockFeSessionMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockFeSession) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockFeSessionMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockFeSession)(nil).Clear))
}

// Close mocks base method.
func (m *MockFeSession) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockFeSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFeSession)(nil).Close))
}

// CopySeqToProc mocks base method.
func (m *MockFeSession) CopySeqToProc(proc *process.Process) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CopySeqToProc", proc)
}

// CopySeqToProc indicates an expected call of CopySeqToProc.
func (mr *MockFeSessionMockRecorder) CopySeqToProc(proc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySeqToProc", reflect.TypeOf((*MockFeSession)(nil).CopySeqToProc), proc)
}

// CountPayload mocks base method.
func (m *MockFeSession) CountPayload(i int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountPayload", i)
}

// CountPayload indicates an expected call of CountPayload.
func (mr *MockFeSessionMockRecorder) CountPayload(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPayload", reflect.TypeOf((*MockFeSession)(nil).CountPayload), i)
}

// Debug mocks base method.
func (m *MockFeSession) Debug(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockFeSessionMockRecorder) Debug(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockFeSession)(nil).Debug), varargs...)
}

// Debugf mocks base method.
func (m *MockFeSession) Debugf(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockFeSessionMockRecorder) Debugf(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockFeSession)(nil).Debugf), varargs...)
}

// DisableTrace mocks base method.
func (m *MockFeSession) DisableTrace() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTrace")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableTrace indicates an expected call of DisableTrace.
func (mr *MockFeSessionMockRecorder) DisableTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTrace", reflect.TypeOf((*MockFeSession)(nil).DisableTrace))
}

// EnterFPrint mocks base method.
func (m *MockFeSession) EnterFPrint(idx int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnterFPrint", idx)
}

// EnterFPrint indicates an expected call of EnterFPrint.
func (mr *MockFeSessionMockRecorder) EnterFPrint(idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterFPrint", reflect.TypeOf((*MockFeSession)(nil).EnterFPrint), idx)
}

// Error mocks base method.
func (m *MockFeSession) Error(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockFeSessionMockRecorder) Error(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockFeSession)(nil).Error), varargs...)
}

// Errorf mocks base method.
func (m *MockFeSession) Errorf(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockFeSessionMockRecorder) Errorf(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockFeSession)(nil).Errorf), varargs...)
}

// ExitFPrint mocks base method.
func (m *MockFeSession) ExitFPrint(idx int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExitFPrint", idx)
}

// ExitFPrint indicates an expected call of ExitFPrint.
func (mr *MockFeSessionMockRecorder) ExitFPrint(idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitFPrint", reflect.TypeOf((*MockFeSession)(nil).ExitFPrint), idx)
}

// Fatal mocks base method.
func (m *MockFeSession) Fatal(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockFeSessionMockRecorder) Fatal(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockFeSession)(nil).Fatal), varargs...)
}

// Fatalf mocks base method.
func (m *MockFeSession) Fatalf(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockFeSessionMockRecorder) Fatalf(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockFeSession)(nil).Fatalf), varargs...)
}

// GetAccountId mocks base method.
func (m *MockFeSession) GetAccountId() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountId")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetAccountId indicates an expected call of GetAccountId.
func (mr *MockFeSessionMockRecorder) GetAccountId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockFeSession)(nil).GetAccountId))
}

// GetBackgroundExec mocks base method.
func (m *MockFeSession) GetBackgroundExec(ctx context.Context) frontend.BackgroundExec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackgroundExec", ctx)
	ret0, _ := ret[0].(frontend.BackgroundExec)
	return ret0
}

// GetBackgroundExec indicates an expected call of GetBackgroundExec.
func (mr *MockFeSessionMockRecorder) GetBackgroundExec(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackgroundExec", reflect.TypeOf((*MockFeSession)(nil).GetBackgroundExec), ctx)
}

// GetBuffer mocks base method.
func (m *MockFeSession) GetBuffer() *buffer.Buffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuffer")
	ret0, _ := ret[0].(*buffer.Buffer)
	return ret0
}

// GetBuffer indicates an expected call of GetBuffer.
func (mr *MockFeSessionMockRecorder) GetBuffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuffer", reflect.TypeOf((*MockFeSession)(nil).GetBuffer))
}

// GetCmd mocks base method.
func (m *MockFeSession) GetCmd() frontend.CommandType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCmd")
	ret0, _ := ret[0].(frontend.CommandType)
	return ret0
}

// GetCmd indicates an expected call of GetCmd.
func (mr *MockFeSessionMockRecorder) GetCmd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCmd", reflect.TypeOf((*MockFeSession)(nil).GetCmd))
}

// GetConfig mocks base method.
func (m *MockFeSession) GetConfig(ctx context.Context, dbName, varName string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, dbName, varName)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockFeSessionMockRecorder) GetConfig(ctx, dbName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockFeSession)(nil).GetConfig), ctx, dbName, varName)
}

// GetConnectionID mocks base method.
func (m *MockFeSession) GetConnectionID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetConnectionID indicates an expected call of GetConnectionID.
func (mr *MockFeSessionMockRecorder) GetConnectionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionID", reflect.TypeOf((*MockFeSession)(nil).GetConnectionID))
}

// GetDatabaseName mocks base method.
func (m *MockFeSession) GetDatabaseName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatabaseName indicates an expected call of GetDatabaseName.
func (mr *MockFeSessionMockRecorder) GetDatabaseName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseName", reflect.TypeOf((*MockFeSession)(nil).GetDatabaseName))
}

// GetDebugString mocks base method.
func (m *MockFeSession) GetDebugString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebugString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDebugString indicates an expected call of GetDebugString.
func (mr *MockFeSessionMockRecorder) GetDebugString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebugString", reflect.TypeOf((*MockFeSession)(nil).GetDebugString))
}

// GetFPrints mocks base method.
func (m *MockFeSession) GetFPrints() footPrints {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFPrints")
	ret0, _ := ret[0].(footPrints)
	return ret0
}

// GetFPrints indicates an expected call of GetFPrints.
func (mr *MockFeSessionMockRecorder) GetFPrints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFPrints", reflect.TypeOf((*MockFeSession)(nil).GetFPrints))
}

// GetFromRealUser mocks base method.
func (m *MockFeSession) GetFromRealUser() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromRealUser")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetFromRealUser indicates an expected call of GetFromRealUser.
func (mr *MockFeSessionMockRecorder) GetFromRealUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromRealUser", reflect.TypeOf((*MockFeSession)(nil).GetFromRealUser))
}

// GetGlobalSysVar mocks base method.
func (m *MockFeSession) GetGlobalSysVar(name string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalSysVar", name)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalSysVar indicates an expected call of GetGlobalSysVar.
func (mr *MockFeSessionMockRecorder) GetGlobalSysVar(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalSysVar", reflect.TypeOf((*MockFeSession)(nil).GetGlobalSysVar), name)
}

// GetGlobalSysVars mocks base method.
func (m *MockFeSession) GetGlobalSysVars() *frontend.SystemVariables {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalSysVars")
	ret0, _ := ret[0].(*frontend.SystemVariables)
	return ret0
}

// GetGlobalSysVars indicates an expected call of GetGlobalSysVars.
func (mr *MockFeSessionMockRecorder) GetGlobalSysVars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalSysVars", reflect.TypeOf((*MockFeSession)(nil).GetGlobalSysVars))
}

// GetIsInternal mocks base method.
func (m *MockFeSession) GetIsInternal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsInternal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsInternal indicates an expected call of GetIsInternal.
func (mr *MockFeSessionMockRecorder) GetIsInternal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsInternal", reflect.TypeOf((*MockFeSession)(nil).GetIsInternal))
}

// GetLastInsertID mocks base method.
func (m *MockFeSession) GetLastInsertID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastInsertID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastInsertID indicates an expected call of GetLastInsertID.
func (mr *MockFeSessionMockRecorder) GetLastInsertID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastInsertID", reflect.TypeOf((*MockFeSession)(nil).GetLastInsertID))
}

// GetLogLevel mocks base method.
func (m *MockFeSession) GetLogLevel() zapcore.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogLevel")
	ret0, _ := ret[0].(zapcore.Level)
	return ret0
}

// GetLogLevel indicates an expected call of GetLogLevel.
func (mr *MockFeSessionMockRecorder) GetLogLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogLevel", reflect.TypeOf((*MockFeSession)(nil).GetLogLevel))
}

// GetLogger mocks base method.
func (m *MockFeSession) GetLogger() frontend.SessionLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(frontend.SessionLogger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockFeSessionMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockFeSession)(nil).GetLogger))
}

// GetMemPool mocks base method.
func (m *MockFeSession) GetMemPool() *mpool.MPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemPool")
	ret0, _ := ret[0].(*mpool.MPool)
	return ret0
}

// GetMemPool indicates an expected call of GetMemPool.
func (mr *MockFeSessionMockRecorder) GetMemPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemPool", reflect.TypeOf((*MockFeSession)(nil).GetMemPool))
}

// GetMySQLParser mocks base method.
func (m *MockFeSession) GetMySQLParser() *mysql.MySQLParser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMySQLParser")
	ret0, _ := ret[0].(*mysql.MySQLParser)
	return ret0
}

// GetMySQLParser indicates an expected call of GetMySQLParser.
func (mr *MockFeSessionMockRecorder) GetMySQLParser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMySQLParser", reflect.TypeOf((*MockFeSession)(nil).GetMySQLParser))
}

// GetMysqlResultSet mocks base method.
func (m *MockFeSession) GetMysqlResultSet() *frontend.MysqlResultSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlResultSet")
	ret0, _ := ret[0].(*frontend.MysqlResultSet)
	return ret0
}

// GetMysqlResultSet indicates an expected call of GetMysqlResultSet.
func (mr *MockFeSessionMockRecorder) GetMysqlResultSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlResultSet", reflect.TypeOf((*MockFeSession)(nil).GetMysqlResultSet))
}

// GetPrepareStmt mocks base method.
func (m *MockFeSession) GetPrepareStmt(ctx context.Context, name string) (*frontend.PrepareStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrepareStmt", ctx, name)
	ret0, _ := ret[0].(*frontend.PrepareStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrepareStmt indicates an expected call of GetPrepareStmt.
func (mr *MockFeSessionMockRecorder) GetPrepareStmt(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrepareStmt", reflect.TypeOf((*MockFeSession)(nil).GetPrepareStmt), ctx, name)
}

// GetProc mocks base method.
func (m *MockFeSession) GetProc() *process.Process {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProc")
	ret0, _ := ret[0].(*process.Process)
	return ret0
}

// GetProc indicates an expected call of GetProc.
func (mr *MockFeSessionMockRecorder) GetProc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProc", reflect.TypeOf((*MockFeSession)(nil).GetProc))
}

// GetRawBatchBackgroundExec mocks base method.
func (m *MockFeSession) GetRawBatchBackgroundExec(ctx context.Context) frontend.BackgroundExec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawBatchBackgroundExec", ctx)
	ret0, _ := ret[0].(frontend.BackgroundExec)
	return ret0
}

// GetRawBatchBackgroundExec indicates an expected call of GetRawBatchBackgroundExec.
func (mr *MockFeSessionMockRecorder) GetRawBatchBackgroundExec(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawBatchBackgroundExec", reflect.TypeOf((*MockFeSession)(nil).GetRawBatchBackgroundExec), ctx)
}

// GetResponser mocks base method.
func (m *MockFeSession) GetResponser() frontend.Responser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponser")
	ret0, _ := ret[0].(frontend.Responser)
	return ret0
}

// GetResponser indicates an expected call of GetResponser.
func (mr *MockFeSessionMockRecorder) GetResponser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponser", reflect.TypeOf((*MockFeSession)(nil).GetResponser))
}

// GetService mocks base method.
func (m *MockFeSession) GetService() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetService indicates an expected call of GetService.
func (mr *MockFeSessionMockRecorder) GetService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockFeSession)(nil).GetService))
}

// GetSessId mocks base method.
func (m *MockFeSession) GetSessId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetSessId indicates an expected call of GetSessId.
func (mr *MockFeSessionMockRecorder) GetSessId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessId", reflect.TypeOf((*MockFeSession)(nil).GetSessId))
}

// GetSessionSysVar mocks base method.
func (m *MockFeSession) GetSessionSysVar(name string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionSysVar", name)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionSysVar indicates an expected call of GetSessionSysVar.
func (mr *MockFeSessionMockRecorder) GetSessionSysVar(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionSysVar", reflect.TypeOf((*MockFeSession)(nil).GetSessionSysVar), name)
}

// GetSessionSysVars mocks base method.
func (m *MockFeSession) GetSessionSysVars() *frontend.SystemVariables {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionSysVars")
	ret0, _ := ret[0].(*frontend.SystemVariables)
	return ret0
}

// GetSessionSysVars indicates an expected call of GetSessionSysVars.
func (mr *MockFeSessionMockRecorder) GetSessionSysVars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionSysVars", reflect.TypeOf((*MockFeSession)(nil).GetSessionSysVars))
}

// GetShareTxnBackgroundExec mocks base method.
func (m *MockFeSession) GetShareTxnBackgroundExec(ctx context.Context, newRawBatch bool) frontend.BackgroundExec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShareTxnBackgroundExec", ctx, newRawBatch)
	ret0, _ := ret[0].(frontend.BackgroundExec)
	return ret0
}

// GetShareTxnBackgroundExec indicates an expected call of GetShareTxnBackgroundExec.
func (mr *MockFeSessionMockRecorder) GetShareTxnBackgroundExec(ctx, newRawBatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShareTxnBackgroundExec", reflect.TypeOf((*MockFeSession)(nil).GetShareTxnBackgroundExec), ctx, newRawBatch)
}

// GetSql mocks base method.
func (m *MockFeSession) GetSql() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSql")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSql indicates an expected call of GetSql.
func (mr *MockFeSessionMockRecorder) GetSql() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSql", reflect.TypeOf((*MockFeSession)(nil).GetSql))
}

// GetSqlCount mocks base method.
func (m *MockFeSession) GetSqlCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSqlCount indicates an expected call of GetSqlCount.
func (mr *MockFeSessionMockRecorder) GetSqlCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlCount", reflect.TypeOf((*MockFeSession)(nil).GetSqlCount))
}

// GetSqlHelper mocks base method.
func (m *MockFeSession) GetSqlHelper() *frontend.SqlHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlHelper")
	ret0, _ := ret[0].(*frontend.SqlHelper)
	return ret0
}

// GetSqlHelper indicates an expected call of GetSqlHelper.
func (mr *MockFeSessionMockRecorder) GetSqlHelper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlHelper", reflect.TypeOf((*MockFeSession)(nil).GetSqlHelper))
}

// GetSqlOfStmt mocks base method.
func (m *MockFeSession) GetSqlOfStmt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlOfStmt")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSqlOfStmt indicates an expected call of GetSqlOfStmt.
func (mr *MockFeSessionMockRecorder) GetSqlOfStmt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlOfStmt", reflect.TypeOf((*MockFeSession)(nil).GetSqlOfStmt))
}

// GetStaticTxnInfo mocks base method.
func (m *MockFeSession) GetStaticTxnInfo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticTxnInfo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStaticTxnInfo indicates an expected call of GetStaticTxnInfo.
func (mr *MockFeSessionMockRecorder) GetStaticTxnInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticTxnInfo", reflect.TypeOf((*MockFeSession)(nil).GetStaticTxnInfo))
}

// GetStatsCache mocks base method.
func (m *MockFeSession) GetStatsCache() *plan0.StatsCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsCache")
	ret0, _ := ret[0].(*plan0.StatsCache)
	return ret0
}

// GetStatsCache indicates an expected call of GetStatsCache.
func (mr *MockFeSessionMockRecorder) GetStatsCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsCache", reflect.TypeOf((*MockFeSession)(nil).GetStatsCache))
}

// GetStmtId mocks base method.
func (m *MockFeSession) GetStmtId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStmtId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetStmtId indicates an expected call of GetStmtId.
func (mr *MockFeSessionMockRecorder) GetStmtId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStmtId", reflect.TypeOf((*MockFeSession)(nil).GetStmtId))
}

// GetStmtInfo mocks base method.
func (m *MockFeSession) GetStmtInfo() *motrace.StatementInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStmtInfo")
	ret0, _ := ret[0].(*motrace.StatementInfo)
	return ret0
}

// GetStmtInfo indicates an expected call of GetStmtInfo.
func (mr *MockFeSessionMockRecorder) GetStmtInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStmtInfo", reflect.TypeOf((*MockFeSession)(nil).GetStmtInfo))
}

// GetStmtProfile mocks base method.
func (m *MockFeSession) GetStmtProfile() *process.StmtProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStmtProfile")
	ret0, _ := ret[0].(*process.StmtProfile)
	return ret0
}

// GetStmtProfile indicates an expected call of GetStmtProfile.
func (mr *MockFeSessionMockRecorder) GetStmtProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStmtProfile", reflect.TypeOf((*MockFeSession)(nil).GetStmtProfile))
}

// GetTenantInfo mocks base method.
func (m *MockFeSession) GetTenantInfo() *frontend.TenantInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantInfo")
	ret0, _ := ret[0].(*frontend.TenantInfo)
	return ret0
}

// GetTenantInfo indicates an expected call of GetTenantInfo.
func (mr *MockFeSessionMockRecorder) GetTenantInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantInfo", reflect.TypeOf((*MockFeSession)(nil).GetTenantInfo))
}

// GetTenantName mocks base method.
func (m *MockFeSession) GetTenantName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTenantName indicates an expected call of GetTenantName.
func (mr *MockFeSessionMockRecorder) GetTenantName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantName", reflect.TypeOf((*MockFeSession)(nil).GetTenantName))
}

// GetTimeZone mocks base method.
func (m *MockFeSession) GetTimeZone() *time.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeZone")
	ret0, _ := ret[0].(*time.Location)
	return ret0
}

// GetTimeZone indicates an expected call of GetTimeZone.
func (mr *MockFeSessionMockRecorder) GetTimeZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeZone", reflect.TypeOf((*MockFeSession)(nil).GetTimeZone))
}

// GetTxnCompileCtx mocks base method.
func (m *MockFeSession) GetTxnCompileCtx() *frontend.TxnCompilerContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnCompileCtx")
	ret0, _ := ret[0].(*frontend.TxnCompilerContext)
	return ret0
}

// GetTxnCompileCtx indicates an expected call of GetTxnCompileCtx.
func (mr *MockFeSessionMockRecorder) GetTxnCompileCtx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnCompileCtx", reflect.TypeOf((*MockFeSession)(nil).GetTxnCompileCtx))
}

// GetTxnHandler mocks base method.
func (m *MockFeSession) GetTxnHandler() *frontend.TxnHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnHandler")
	ret0, _ := ret[0].(*frontend.TxnHandler)
	return ret0
}

// GetTxnHandler indicates an expected call of GetTxnHandler.
func (mr *MockFeSessionMockRecorder) GetTxnHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnHandler", reflect.TypeOf((*MockFeSession)(nil).GetTxnHandler))
}

// GetTxnId mocks base method.
func (m *MockFeSession) GetTxnId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetTxnId indicates an expected call of GetTxnId.
func (mr *MockFeSessionMockRecorder) GetTxnId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnId", reflect.TypeOf((*MockFeSession)(nil).GetTxnId))
}

// GetTxnInfo mocks base method.
func (m *MockFeSession) GetTxnInfo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnInfo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTxnInfo indicates an expected call of GetTxnInfo.
func (mr *MockFeSessionMockRecorder) GetTxnInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnInfo", reflect.TypeOf((*MockFeSession)(nil).GetTxnInfo))
}

// GetUUID mocks base method.
func (m *MockFeSession) GetUUID() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockFeSessionMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockFeSession)(nil).GetUUID))
}

// GetUUIDString mocks base method.
func (m *MockFeSession) GetUUIDString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUIDString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUUIDString indicates an expected call of GetUUIDString.
func (mr *MockFeSessionMockRecorder) GetUUIDString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUIDString", reflect.TypeOf((*MockFeSession)(nil).GetUUIDString))
}

// GetUpstream mocks base method.
func (m *MockFeSession) GetUpstream() frontend.FeSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstream")
	ret0, _ := ret[0].(frontend.FeSession)
	return ret0
}

// GetUpstream indicates an expected call of GetUpstream.
func (mr *MockFeSessionMockRecorder) GetUpstream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstream", reflect.TypeOf((*MockFeSession)(nil).GetUpstream))
}

// GetUserDefinedVar mocks base method.
func (m *MockFeSession) GetUserDefinedVar(name string) (*frontend.UserDefinedVar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDefinedVar", name)
	ret0, _ := ret[0].(*frontend.UserDefinedVar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDefinedVar indicates an expected call of GetUserDefinedVar.
func (mr *MockFeSessionMockRecorder) GetUserDefinedVar(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedVar", reflect.TypeOf((*MockFeSession)(nil).GetUserDefinedVar), name)
}

// GetUserName mocks base method.
func (m *MockFeSession) GetUserName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserName indicates an expected call of GetUserName.
func (mr *MockFeSessionMockRecorder) GetUserName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserName", reflect.TypeOf((*MockFeSession)(nil).GetUserName))
}

// Info mocks base method.
func (m *MockFeSession) Info(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockFeSessionMockRecorder) Info(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockFeSession)(nil).Info), varargs...)
}

// Infof mocks base method.
func (m *MockFeSession) Infof(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockFeSessionMockRecorder) Infof(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockFeSession)(nil).Infof), varargs...)
}

// IsBackgroundSession mocks base method.
func (m *MockFeSession) IsBackgroundSession() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBackgroundSession")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBackgroundSession indicates an expected call of IsBackgroundSession.
func (mr *MockFeSessionMockRecorder) IsBackgroundSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBackgroundSession", reflect.TypeOf((*MockFeSession)(nil).IsBackgroundSession))
}

// IsDerivedStmt mocks base method.
func (m *MockFeSession) IsDerivedStmt() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDerivedStmt")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDerivedStmt indicates an expected call of IsDerivedStmt.
func (mr *MockFeSessionMockRecorder) IsDerivedStmt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDerivedStmt", reflect.TypeOf((*MockFeSession)(nil).IsDerivedStmt))
}

// RemovePrepareStmt mocks base method.
func (m *MockFeSession) RemovePrepareStmt(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePrepareStmt", name)
}

// RemovePrepareStmt indicates an expected call of RemovePrepareStmt.
func (mr *MockFeSessionMockRecorder) RemovePrepareStmt(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePrepareStmt", reflect.TypeOf((*MockFeSession)(nil).RemovePrepareStmt), name)
}

// ResetFPrints mocks base method.
func (m *MockFeSession) ResetFPrints() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetFPrints")
}

// ResetFPrints indicates an expected call of ResetFPrints.
func (mr *MockFeSessionMockRecorder) ResetFPrints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFPrints", reflect.TypeOf((*MockFeSession)(nil).ResetFPrints))
}

// SendRows mocks base method.
func (m *MockFeSession) SendRows() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRows")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SendRows indicates an expected call of SendRows.
func (mr *MockFeSessionMockRecorder) SendRows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRows", reflect.TypeOf((*MockFeSession)(nil).SendRows))
}

// SetAccountId mocks base method.
func (m *MockFeSession) SetAccountId(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccountId", arg0)
}

// SetAccountId indicates an expected call of SetAccountId.
func (mr *MockFeSessionMockRecorder) SetAccountId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountId", reflect.TypeOf((*MockFeSession)(nil).SetAccountId), arg0)
}

// SetData mocks base method.
func (m *MockFeSession) SetData(arg0 [][]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetData", arg0)
}

// SetData indicates an expected call of SetData.
func (mr *MockFeSessionMockRecorder) SetData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockFeSession)(nil).SetData), arg0)
}

// SetDatabaseName mocks base method.
func (m *MockFeSession) SetDatabaseName(db string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatabaseName", db)
}

// SetDatabaseName indicates an expected call of SetDatabaseName.
func (mr *MockFeSessionMockRecorder) SetDatabaseName(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabaseName", reflect.TypeOf((*MockFeSession)(nil).SetDatabaseName), db)
}

// SetMysqlResultSet mocks base method.
func (m *MockFeSession) SetMysqlResultSet(mrs *frontend.MysqlResultSet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMysqlResultSet", mrs)
}

// SetMysqlResultSet indicates an expected call of SetMysqlResultSet.
func (mr *MockFeSessionMockRecorder) SetMysqlResultSet(mrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMysqlResultSet", reflect.TypeOf((*MockFeSession)(nil).SetMysqlResultSet), mrs)
}

// SetNewResponse mocks base method.
func (m *MockFeSession) SetNewResponse(category int, affectedRows uint64, cmd int, d interface{}, isLastStmt bool) *frontend.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewResponse", category, affectedRows, cmd, d, isLastStmt)
	ret0, _ := ret[0].(*frontend.Response)
	return ret0
}

// SetNewResponse indicates an expected call of SetNewResponse.
func (mr *MockFeSessionMockRecorder) SetNewResponse(category, affectedRows, cmd, d, isLastStmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewResponse", reflect.TypeOf((*MockFeSession)(nil).SetNewResponse), category, affectedRows, cmd, d, isLastStmt)
}

// SetPlan mocks base method.
func (m *MockFeSession) SetPlan(plan *plan.Plan) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPlan", plan)
}

// SetPlan indicates an expected call of SetPlan.
func (mr *MockFeSessionMockRecorder) SetPlan(plan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlan", reflect.TypeOf((*MockFeSession)(nil).SetPlan), plan)
}

// SetShowStmtType mocks base method.
func (m *MockFeSession) SetShowStmtType(statement frontend.ShowStatementType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShowStmtType", statement)
}

// SetShowStmtType indicates an expected call of SetShowStmtType.
func (mr *MockFeSessionMockRecorder) SetShowStmtType(statement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShowStmtType", reflect.TypeOf((*MockFeSession)(nil).SetShowStmtType), statement)
}

// SetSql mocks base method.
func (m *MockFeSession) SetSql(sql string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSql", sql)
}

// SetSql indicates an expected call of SetSql.
func (mr *MockFeSessionMockRecorder) SetSql(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSql", reflect.TypeOf((*MockFeSession)(nil).SetSql), sql)
}

// SetStaticTxnInfo mocks base method.
func (m *MockFeSession) SetStaticTxnInfo(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStaticTxnInfo", arg0)
}

// SetStaticTxnInfo indicates an expected call of SetStaticTxnInfo.
func (mr *MockFeSessionMockRecorder) SetStaticTxnInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStaticTxnInfo", reflect.TypeOf((*MockFeSession)(nil).SetStaticTxnInfo), arg0)
}

// SetTStmt mocks base method.
func (m *MockFeSession) SetTStmt(stmt *motrace.StatementInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTStmt", stmt)
}

// SetTStmt indicates an expected call of SetTStmt.
func (mr *MockFeSessionMockRecorder) SetTStmt(stmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTStmt", reflect.TypeOf((*MockFeSession)(nil).SetTStmt), stmt)
}

// SetTxnId mocks base method.
func (m *MockFeSession) SetTxnId(i []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxnId", i)
}

// SetTxnId indicates an expected call of SetTxnId.
func (mr *MockFeSessionMockRecorder) SetTxnId(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxnId", reflect.TypeOf((*MockFeSession)(nil).SetTxnId), i)
}

// Warn mocks base method.
func (m *MockFeSession) Warn(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockFeSessionMockRecorder) Warn(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockFeSession)(nil).Warn), varargs...)
}

// Warnf mocks base method.
func (m *MockFeSession) Warnf(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockFeSessionMockRecorder) Warnf(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockFeSession)(nil).Warnf), varargs...)
}

// addSqlCount mocks base method.
func (m *MockFeSession) addSqlCount(a uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addSqlCount", a)
}

// addSqlCount indicates an expected call of addSqlCount.
func (mr *MockFeSessionMockRecorder) addSqlCount(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addSqlCount", reflect.TypeOf((*MockFeSession)(nil).addSqlCount), a)
}

// cleanCache mocks base method.
func (m *MockFeSession) cleanCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cleanCache")
}

// cleanCache indicates an expected call of cleanCache.
func (mr *MockFeSessionMockRecorder) cleanCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cleanCache", reflect.TypeOf((*MockFeSession)(nil).cleanCache))
}

// getCNLabels mocks base method.
func (m *MockFeSession) getCNLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCNLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// getCNLabels indicates an expected call of getCNLabels.
func (mr *MockFeSessionMockRecorder) getCNLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCNLabels", reflect.TypeOf((*MockFeSession)(nil).getCNLabels))
}

// getCachedPlan mocks base method.
func (m *MockFeSession) getCachedPlan(sql string) *cachedPlan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCachedPlan", sql)
	ret0, _ := ret[0].(*cachedPlan)
	return ret0
}

// getCachedPlan indicates an expected call of getCachedPlan.
func (mr *MockFeSessionMockRecorder) getCachedPlan(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCachedPlan", reflect.TypeOf((*MockFeSession)(nil).getCachedPlan), sql)
}

// getLastCommitTS mocks base method.
func (m *MockFeSession) getLastCommitTS() timestamp.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLastCommitTS")
	ret0, _ := ret[0].(timestamp.Timestamp)
	return ret0
}

// getLastCommitTS indicates an expected call of getLastCommitTS.
func (mr *MockFeSessionMockRecorder) getLastCommitTS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLastCommitTS", reflect.TypeOf((*MockFeSession)(nil).getLastCommitTS))
}

// getNextProcessId mocks base method.
func (m *MockFeSession) getNextProcessId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNextProcessId")
	ret0, _ := ret[0].(string)
	return ret0
}

// getNextProcessId indicates an expected call of getNextProcessId.
func (mr *MockFeSessionMockRecorder) getNextProcessId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNextProcessId", reflect.TypeOf((*MockFeSession)(nil).getNextProcessId))
}

// getQueryId mocks base method.
func (m *MockFeSession) getQueryId(internal bool) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getQueryId", internal)
	ret0, _ := ret[0].([]string)
	return ret0
}

// getQueryId indicates an expected call of getQueryId.
func (mr *MockFeSessionMockRecorder) getQueryId(internal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQueryId", reflect.TypeOf((*MockFeSession)(nil).getQueryId), internal)
}

// updateLastCommitTS mocks base method.
func (m *MockFeSession) updateLastCommitTS(ts timestamp.Timestamp) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateLastCommitTS", ts)
}

// updateLastCommitTS indicates an expected call of updateLastCommitTS.
func (mr *MockFeSessionMockRecorder) updateLastCommitTS(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateLastCommitTS", reflect.TypeOf((*MockFeSession)(nil).updateLastCommitTS), ts)
}

// MockSessionLogger is a mock of SessionLogger interface.
type MockSessionLogger struct {
	ctrl     *gomock.Controller
	recorder *MockSessionLoggerMockRecorder
}

// MockSessionLoggerMockRecorder is the mock recorder for MockSessionLogger.
type MockSessionLoggerMockRecorder struct {
	mock *MockSessionLogger
}

// NewMockSessionLogger creates a new mock instance.
func NewMockSessionLogger(ctrl *gomock.Controller) *MockSessionLogger {
	mock := &MockSessionLogger{ctrl: ctrl}
	mock.recorder = &MockSessionLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionLogger) EXPECT() *MockSessionLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockSessionLogger) Debug(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockSessionLoggerMockRecorder) Debug(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockSessionLogger)(nil).Debug), varargs...)
}

// Debugf mocks base method.
func (m *MockSessionLogger) Debugf(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockSessionLoggerMockRecorder) Debugf(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockSessionLogger)(nil).Debugf), varargs...)
}

// Error mocks base method.
func (m *MockSessionLogger) Error(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockSessionLoggerMockRecorder) Error(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockSessionLogger)(nil).Error), varargs...)
}

// Errorf mocks base method.
func (m *MockSessionLogger) Errorf(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockSessionLoggerMockRecorder) Errorf(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockSessionLogger)(nil).Errorf), varargs...)
}

// Fatal mocks base method.
func (m *MockSessionLogger) Fatal(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockSessionLoggerMockRecorder) Fatal(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockSessionLogger)(nil).Fatal), varargs...)
}

// Fatalf mocks base method.
func (m *MockSessionLogger) Fatalf(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockSessionLoggerMockRecorder) Fatalf(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockSessionLogger)(nil).Fatalf), varargs...)
}

// GetLogLevel mocks base method.
func (m *MockSessionLogger) GetLogLevel() zapcore.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogLevel")
	ret0, _ := ret[0].(zapcore.Level)
	return ret0
}

// GetLogLevel indicates an expected call of GetLogLevel.
func (mr *MockSessionLoggerMockRecorder) GetLogLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogLevel", reflect.TypeOf((*MockSessionLogger)(nil).GetLogLevel))
}

// GetLogger mocks base method.
func (m *MockSessionLogger) GetLogger() frontend.SessionLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(frontend.SessionLogger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockSessionLoggerMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockSessionLogger)(nil).GetLogger))
}

// GetSessId mocks base method.
func (m *MockSessionLogger) GetSessId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetSessId indicates an expected call of GetSessId.
func (mr *MockSessionLoggerMockRecorder) GetSessId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessId", reflect.TypeOf((*MockSessionLogger)(nil).GetSessId))
}

// GetStmtId mocks base method.
func (m *MockSessionLogger) GetStmtId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStmtId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetStmtId indicates an expected call of GetStmtId.
func (mr *MockSessionLoggerMockRecorder) GetStmtId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStmtId", reflect.TypeOf((*MockSessionLogger)(nil).GetStmtId))
}

// GetTxnId mocks base method.
func (m *MockSessionLogger) GetTxnId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetTxnId indicates an expected call of GetTxnId.
func (mr *MockSessionLoggerMockRecorder) GetTxnId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnId", reflect.TypeOf((*MockSessionLogger)(nil).GetTxnId))
}

// Info mocks base method.
func (m *MockSessionLogger) Info(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockSessionLoggerMockRecorder) Info(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockSessionLogger)(nil).Info), varargs...)
}

// Infof mocks base method.
func (m *MockSessionLogger) Infof(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockSessionLoggerMockRecorder) Infof(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockSessionLogger)(nil).Infof), varargs...)
}

// Warn mocks base method.
func (m *MockSessionLogger) Warn(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockSessionLoggerMockRecorder) Warn(ctx, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockSessionLogger)(nil).Warn), varargs...)
}

// Warnf mocks base method.
func (m *MockSessionLogger) Warnf(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockSessionLoggerMockRecorder) Warnf(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockSessionLogger)(nil).Warnf), varargs...)
}

// MockSessionLoggerGetter is a mock of SessionLoggerGetter interface.
type MockSessionLoggerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSessionLoggerGetterMockRecorder
}

// MockSessionLoggerGetterMockRecorder is the mock recorder for MockSessionLoggerGetter.
type MockSessionLoggerGetterMockRecorder struct {
	mock *MockSessionLoggerGetter
}

// NewMockSessionLoggerGetter creates a new mock instance.
func NewMockSessionLoggerGetter(ctrl *gomock.Controller) *MockSessionLoggerGetter {
	mock := &MockSessionLoggerGetter{ctrl: ctrl}
	mock.recorder = &MockSessionLoggerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionLoggerGetter) EXPECT() *MockSessionLoggerGetterMockRecorder {
	return m.recorder
}

// GetLogLevel mocks base method.
func (m *MockSessionLoggerGetter) GetLogLevel() zapcore.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogLevel")
	ret0, _ := ret[0].(zapcore.Level)
	return ret0
}

// GetLogLevel indicates an expected call of GetLogLevel.
func (mr *MockSessionLoggerGetterMockRecorder) GetLogLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogLevel", reflect.TypeOf((*MockSessionLoggerGetter)(nil).GetLogLevel))
}

// GetSessId mocks base method.
func (m *MockSessionLoggerGetter) GetSessId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetSessId indicates an expected call of GetSessId.
func (mr *MockSessionLoggerGetterMockRecorder) GetSessId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessId", reflect.TypeOf((*MockSessionLoggerGetter)(nil).GetSessId))
}

// GetStmtId mocks base method.
func (m *MockSessionLoggerGetter) GetStmtId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStmtId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetStmtId indicates an expected call of GetStmtId.
func (mr *MockSessionLoggerGetterMockRecorder) GetStmtId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStmtId", reflect.TypeOf((*MockSessionLoggerGetter)(nil).GetStmtId))
}

// GetTxnId mocks base method.
func (m *MockSessionLoggerGetter) GetTxnId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetTxnId indicates an expected call of GetTxnId.
func (mr *MockSessionLoggerGetterMockRecorder) GetTxnId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnId", reflect.TypeOf((*MockSessionLoggerGetter)(nil).GetTxnId))
}

// MockProperty is a mock of Property interface.
type MockProperty struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyMockRecorder
}

// MockPropertyMockRecorder is the mock recorder for MockProperty.
type MockPropertyMockRecorder struct {
	mock *MockProperty
}

// NewMockProperty creates a new mock instance.
func NewMockProperty(ctrl *gomock.Controller) *MockProperty {
	mock := &MockProperty{ctrl: ctrl}
	mock.recorder = &MockPropertyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProperty) EXPECT() *MockPropertyMockRecorder {
	return m.recorder
}

// GetBool mocks base method.
func (m *MockProperty) GetBool(arg0 frontend.PropertyID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockPropertyMockRecorder) GetBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockProperty)(nil).GetBool), arg0)
}

// GetStr mocks base method.
func (m *MockProperty) GetStr(arg0 frontend.PropertyID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStr", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStr indicates an expected call of GetStr.
func (mr *MockPropertyMockRecorder) GetStr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStr", reflect.TypeOf((*MockProperty)(nil).GetStr), arg0)
}

// GetU32 mocks base method.
func (m *MockProperty) GetU32(arg0 frontend.PropertyID) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU32", arg0)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetU32 indicates an expected call of GetU32.
func (mr *MockPropertyMockRecorder) GetU32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU32", reflect.TypeOf((*MockProperty)(nil).GetU32), arg0)
}

// GetU8 mocks base method.
func (m *MockProperty) GetU8(arg0 frontend.PropertyID) uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU8", arg0)
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetU8 indicates an expected call of GetU8.
func (mr *MockPropertyMockRecorder) GetU8(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU8", reflect.TypeOf((*MockProperty)(nil).GetU8), arg0)
}

// SetBool mocks base method.
func (m *MockProperty) SetBool(arg0 frontend.PropertyID, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBool", arg0, arg1)
}

// SetBool indicates an expected call of SetBool.
func (mr *MockPropertyMockRecorder) SetBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBool", reflect.TypeOf((*MockProperty)(nil).SetBool), arg0, arg1)
}

// SetStr mocks base method.
func (m *MockProperty) SetStr(arg0 frontend.PropertyID, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStr", arg0, arg1)
}

// SetStr indicates an expected call of SetStr.
func (mr *MockPropertyMockRecorder) SetStr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStr", reflect.TypeOf((*MockProperty)(nil).SetStr), arg0, arg1)
}

// SetU32 mocks base method.
func (m *MockProperty) SetU32(arg0 frontend.PropertyID, arg1 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU32", arg0, arg1)
}

// SetU32 indicates an expected call of SetU32.
func (mr *MockPropertyMockRecorder) SetU32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU32", reflect.TypeOf((*MockProperty)(nil).SetU32), arg0, arg1)
}

// SetU8 mocks base method.
func (m *MockProperty) SetU8(arg0 frontend.PropertyID, arg1 uint8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU8", arg0, arg1)
}

// SetU8 indicates an expected call of SetU8.
func (mr *MockPropertyMockRecorder) SetU8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU8", reflect.TypeOf((*MockProperty)(nil).SetU8), arg0, arg1)
}

// MockResponser is a mock of Responser interface.
type MockResponser struct {
	ctrl     *gomock.Controller
	recorder *MockResponserMockRecorder
}

// MockResponserMockRecorder is the mock recorder for MockResponser.
type MockResponserMockRecorder struct {
	mock *MockResponser
}

// NewMockResponser creates a new mock instance.
func NewMockResponser(ctrl *gomock.Controller) *MockResponser {
	mock := &MockResponser{ctrl: ctrl}
	mock.recorder = &MockResponserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponser) EXPECT() *MockResponserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockResponser) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockResponserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockResponser)(nil).Close))
}

// GetBool mocks base method.
func (m *MockResponser) GetBool(arg0 frontend.PropertyID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockResponserMockRecorder) GetBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockResponser)(nil).GetBool), arg0)
}

// GetStr mocks base method.
func (m *MockResponser) GetStr(arg0 frontend.PropertyID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStr", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStr indicates an expected call of GetStr.
func (mr *MockResponserMockRecorder) GetStr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStr", reflect.TypeOf((*MockResponser)(nil).GetStr), arg0)
}

// GetU32 mocks base method.
func (m *MockResponser) GetU32(arg0 frontend.PropertyID) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU32", arg0)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetU32 indicates an expected call of GetU32.
func (mr *MockResponserMockRecorder) GetU32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU32", reflect.TypeOf((*MockResponser)(nil).GetU32), arg0)
}

// GetU8 mocks base method.
func (m *MockResponser) GetU8(arg0 frontend.PropertyID) uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU8", arg0)
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetU8 indicates an expected call of GetU8.
func (mr *MockResponserMockRecorder) GetU8(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU8", reflect.TypeOf((*MockResponser)(nil).GetU8), arg0)
}

// MysqlRrWr mocks base method.
func (m *MockResponser) MysqlRrWr() frontend.MysqlRrWr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MysqlRrWr")
	ret0, _ := ret[0].(frontend.MysqlRrWr)
	return ret0
}

// MysqlRrWr indicates an expected call of MysqlRrWr.
func (mr *MockResponserMockRecorder) MysqlRrWr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MysqlRrWr", reflect.TypeOf((*MockResponser)(nil).MysqlRrWr))
}

// ResetStatistics mocks base method.
func (m *MockResponser) ResetStatistics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetStatistics")
}

// ResetStatistics indicates an expected call of ResetStatistics.
func (mr *MockResponserMockRecorder) ResetStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStatistics", reflect.TypeOf((*MockResponser)(nil).ResetStatistics))
}

// RespPostMeta mocks base method.
func (m *MockResponser) RespPostMeta(arg0 *frontend.ExecCtx, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespPostMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespPostMeta indicates an expected call of RespPostMeta.
func (mr *MockResponserMockRecorder) RespPostMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespPostMeta", reflect.TypeOf((*MockResponser)(nil).RespPostMeta), arg0, arg1)
}

// RespPreMeta mocks base method.
func (m *MockResponser) RespPreMeta(arg0 *frontend.ExecCtx, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespPreMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespPreMeta indicates an expected call of RespPreMeta.
func (mr *MockResponserMockRecorder) RespPreMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespPreMeta", reflect.TypeOf((*MockResponser)(nil).RespPreMeta), arg0, arg1)
}

// RespResult mocks base method.
func (m *MockResponser) RespResult(arg0 *frontend.ExecCtx, arg1 *batch.Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespResult indicates an expected call of RespResult.
func (mr *MockResponserMockRecorder) RespResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespResult", reflect.TypeOf((*MockResponser)(nil).RespResult), arg0, arg1)
}

// SetBool mocks base method.
func (m *MockResponser) SetBool(arg0 frontend.PropertyID, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBool", arg0, arg1)
}

// SetBool indicates an expected call of SetBool.
func (mr *MockResponserMockRecorder) SetBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBool", reflect.TypeOf((*MockResponser)(nil).SetBool), arg0, arg1)
}

// SetStr mocks base method.
func (m *MockResponser) SetStr(arg0 frontend.PropertyID, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStr", arg0, arg1)
}

// SetStr indicates an expected call of SetStr.
func (mr *MockResponserMockRecorder) SetStr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStr", reflect.TypeOf((*MockResponser)(nil).SetStr), arg0, arg1)
}

// SetU32 mocks base method.
func (m *MockResponser) SetU32(arg0 frontend.PropertyID, arg1 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU32", arg0, arg1)
}

// SetU32 indicates an expected call of SetU32.
func (mr *MockResponserMockRecorder) SetU32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU32", reflect.TypeOf((*MockResponser)(nil).SetU32), arg0, arg1)
}

// SetU8 mocks base method.
func (m *MockResponser) SetU8(arg0 frontend.PropertyID, arg1 uint8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU8", arg0, arg1)
}

// SetU8 indicates an expected call of SetU8.
func (mr *MockResponserMockRecorder) SetU8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU8", reflect.TypeOf((*MockResponser)(nil).SetU8), arg0, arg1)
}

// MockMediaReader is a mock of MediaReader interface.
type MockMediaReader struct {
	ctrl     *gomock.Controller
	recorder *MockMediaReaderMockRecorder
}

// MockMediaReaderMockRecorder is the mock recorder for MockMediaReader.
type MockMediaReaderMockRecorder struct {
	mock *MockMediaReader
}

// NewMockMediaReader creates a new mock instance.
func NewMockMediaReader(ctrl *gomock.Controller) *MockMediaReader {
	mock := &MockMediaReader{ctrl: ctrl}
	mock.recorder = &MockMediaReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaReader) EXPECT() *MockMediaReaderMockRecorder {
	return m.recorder
}

// MockMediaWriter is a mock of MediaWriter interface.
type MockMediaWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMediaWriterMockRecorder
}

// MockMediaWriterMockRecorder is the mock recorder for MockMediaWriter.
type MockMediaWriterMockRecorder struct {
	mock *MockMediaWriter
}

// NewMockMediaWriter creates a new mock instance.
func NewMockMediaWriter(ctrl *gomock.Controller) *MockMediaWriter {
	mock := &MockMediaWriter{ctrl: ctrl}
	mock.recorder = &MockMediaWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaWriter) EXPECT() *MockMediaWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMediaWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMediaWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMediaWriter)(nil).Close))
}

// Write mocks base method.
func (m *MockMediaWriter) Write(arg0 *frontend.ExecCtx, arg1 *batch.Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockMediaWriterMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMediaWriter)(nil).Write), arg0, arg1)
}

// MockMysqlReader is a mock of MysqlReader interface.
type MockMysqlReader struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlReaderMockRecorder
}

// MockMysqlReaderMockRecorder is the mock recorder for MockMysqlReader.
type MockMysqlReaderMockRecorder struct {
	mock *MockMysqlReader
}

// NewMockMysqlReader creates a new mock instance.
func NewMockMysqlReader(ctrl *gomock.Controller) *MockMysqlReader {
	mock := &MockMysqlReader{ctrl: ctrl}
	mock.recorder = &MockMysqlReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlReader) EXPECT() *MockMysqlReaderMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockMysqlReader) Authenticate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockMysqlReaderMockRecorder) Authenticate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockMysqlReader)(nil).Authenticate), ctx)
}

// Free mocks base method.
func (m *MockMysqlReader) Free(buf []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", buf)
}

// Free indicates an expected call of Free.
func (mr *MockMysqlReaderMockRecorder) Free(buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockMysqlReader)(nil).Free), buf)
}

// FreeLoadLocal mocks base method.
func (m *MockMysqlReader) FreeLoadLocal() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeLoadLocal")
}

// FreeLoadLocal indicates an expected call of FreeLoadLocal.
func (mr *MockMysqlReaderMockRecorder) FreeLoadLocal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeLoadLocal", reflect.TypeOf((*MockMysqlReader)(nil).FreeLoadLocal))
}

// GetBool mocks base method.
func (m *MockMysqlReader) GetBool(arg0 frontend.PropertyID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockMysqlReaderMockRecorder) GetBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockMysqlReader)(nil).GetBool), arg0)
}

// GetStr mocks base method.
func (m *MockMysqlReader) GetStr(arg0 frontend.PropertyID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStr", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStr indicates an expected call of GetStr.
func (mr *MockMysqlReaderMockRecorder) GetStr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStr", reflect.TypeOf((*MockMysqlReader)(nil).GetStr), arg0)
}

// GetU32 mocks base method.
func (m *MockMysqlReader) GetU32(arg0 frontend.PropertyID) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU32", arg0)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetU32 indicates an expected call of GetU32.
func (mr *MockMysqlReaderMockRecorder) GetU32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU32", reflect.TypeOf((*MockMysqlReader)(nil).GetU32), arg0)
}

// GetU8 mocks base method.
func (m *MockMysqlReader) GetU8(arg0 frontend.PropertyID) uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU8", arg0)
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetU8 indicates an expected call of GetU8.
func (mr *MockMysqlReaderMockRecorder) GetU8(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU8", reflect.TypeOf((*MockMysqlReader)(nil).GetU8), arg0)
}

// HandleHandshake mocks base method.
func (m *MockMysqlReader) HandleHandshake(ctx context.Context, payload []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleHandshake", ctx, payload)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleHandshake indicates an expected call of HandleHandshake.
func (mr *MockMysqlReaderMockRecorder) HandleHandshake(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleHandshake", reflect.TypeOf((*MockMysqlReader)(nil).HandleHandshake), ctx, payload)
}

// ParseExecuteData mocks base method.
func (m *MockMysqlReader) ParseExecuteData(ctx context.Context, proc *process.Process, stmt *frontend.PrepareStmt, data []byte, pos int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseExecuteData", ctx, proc, stmt, data, pos)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseExecuteData indicates an expected call of ParseExecuteData.
func (mr *MockMysqlReaderMockRecorder) ParseExecuteData(ctx, proc, stmt, data, pos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseExecuteData", reflect.TypeOf((*MockMysqlReader)(nil).ParseExecuteData), ctx, proc, stmt, data, pos)
}

// ParseSendLongData mocks base method.
func (m *MockMysqlReader) ParseSendLongData(ctx context.Context, proc *process.Process, stmt *frontend.PrepareStmt, data []byte, pos int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSendLongData", ctx, proc, stmt, data, pos)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseSendLongData indicates an expected call of ParseSendLongData.
func (mr *MockMysqlReaderMockRecorder) ParseSendLongData(ctx, proc, stmt, data, pos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSendLongData", reflect.TypeOf((*MockMysqlReader)(nil).ParseSendLongData), ctx, proc, stmt, data, pos)
}

// Read mocks base method.
func (m *MockMysqlReader) Read() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockMysqlReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMysqlReader)(nil).Read))
}

// ReadLoadLocalPacket mocks base method.
func (m *MockMysqlReader) ReadLoadLocalPacket() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLoadLocalPacket")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoadLocalPacket indicates an expected call of ReadLoadLocalPacket.
func (mr *MockMysqlReaderMockRecorder) ReadLoadLocalPacket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoadLocalPacket", reflect.TypeOf((*MockMysqlReader)(nil).ReadLoadLocalPacket))
}

// SetBool mocks base method.
func (m *MockMysqlReader) SetBool(arg0 frontend.PropertyID, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBool", arg0, arg1)
}

// SetBool indicates an expected call of SetBool.
func (mr *MockMysqlReaderMockRecorder) SetBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBool", reflect.TypeOf((*MockMysqlReader)(nil).SetBool), arg0, arg1)
}

// SetStr mocks base method.
func (m *MockMysqlReader) SetStr(arg0 frontend.PropertyID, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStr", arg0, arg1)
}

// SetStr indicates an expected call of SetStr.
func (mr *MockMysqlReaderMockRecorder) SetStr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStr", reflect.TypeOf((*MockMysqlReader)(nil).SetStr), arg0, arg1)
}

// SetU32 mocks base method.
func (m *MockMysqlReader) SetU32(arg0 frontend.PropertyID, arg1 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU32", arg0, arg1)
}

// SetU32 indicates an expected call of SetU32.
func (mr *MockMysqlReaderMockRecorder) SetU32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU32", reflect.TypeOf((*MockMysqlReader)(nil).SetU32), arg0, arg1)
}

// SetU8 mocks base method.
func (m *MockMysqlReader) SetU8(arg0 frontend.PropertyID, arg1 uint8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU8", arg0, arg1)
}

// SetU8 indicates an expected call of SetU8.
func (mr *MockMysqlReaderMockRecorder) SetU8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU8", reflect.TypeOf((*MockMysqlReader)(nil).SetU8), arg0, arg1)
}

// MockMysqlWriter is a mock of MysqlWriter interface.
type MockMysqlWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlWriterMockRecorder
}

// MockMysqlWriterMockRecorder is the mock recorder for MockMysqlWriter.
type MockMysqlWriterMockRecorder struct {
	mock *MockMysqlWriter
}

// NewMockMysqlWriter creates a new mock instance.
func NewMockMysqlWriter(ctrl *gomock.Controller) *MockMysqlWriter {
	mock := &MockMysqlWriter{ctrl: ctrl}
	mock.recorder = &MockMysqlWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlWriter) EXPECT() *MockMysqlWriterMockRecorder {
	return m.recorder
}

// CalculateOutTrafficBytes mocks base method.
func (m *MockMysqlWriter) CalculateOutTrafficBytes(b bool) (int64, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateOutTrafficBytes", b)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// CalculateOutTrafficBytes indicates an expected call of CalculateOutTrafficBytes.
func (mr *MockMysqlWriterMockRecorder) CalculateOutTrafficBytes(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateOutTrafficBytes", reflect.TypeOf((*MockMysqlWriter)(nil).CalculateOutTrafficBytes), b)
}

// Close mocks base method.
func (m *MockMysqlWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMysqlWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMysqlWriter)(nil).Close))
}

// GetBool mocks base method.
func (m *MockMysqlWriter) GetBool(arg0 frontend.PropertyID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockMysqlWriterMockRecorder) GetBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockMysqlWriter)(nil).GetBool), arg0)
}

// GetStr mocks base method.
func (m *MockMysqlWriter) GetStr(arg0 frontend.PropertyID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStr", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStr indicates an expected call of GetStr.
func (mr *MockMysqlWriterMockRecorder) GetStr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStr", reflect.TypeOf((*MockMysqlWriter)(nil).GetStr), arg0)
}

// GetU32 mocks base method.
func (m *MockMysqlWriter) GetU32(arg0 frontend.PropertyID) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU32", arg0)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetU32 indicates an expected call of GetU32.
func (mr *MockMysqlWriterMockRecorder) GetU32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU32", reflect.TypeOf((*MockMysqlWriter)(nil).GetU32), arg0)
}

// GetU8 mocks base method.
func (m *MockMysqlWriter) GetU8(arg0 frontend.PropertyID) uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU8", arg0)
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetU8 indicates an expected call of GetU8.
func (mr *MockMysqlWriterMockRecorder) GetU8(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU8", reflect.TypeOf((*MockMysqlWriter)(nil).GetU8), arg0)
}

// Reset mocks base method.
func (m *MockMysqlWriter) Reset(ses *frontend.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", ses)
}

// Reset indicates an expected call of Reset.
func (mr *MockMysqlWriterMockRecorder) Reset(ses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockMysqlWriter)(nil).Reset), ses)
}

// ResetStatistics mocks base method.
func (m *MockMysqlWriter) ResetStatistics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetStatistics")
}

// ResetStatistics indicates an expected call of ResetStatistics.
func (mr *MockMysqlWriterMockRecorder) ResetStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStatistics", reflect.TypeOf((*MockMysqlWriter)(nil).ResetStatistics))
}

// SetBool mocks base method.
func (m *MockMysqlWriter) SetBool(arg0 frontend.PropertyID, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBool", arg0, arg1)
}

// SetBool indicates an expected call of SetBool.
func (mr *MockMysqlWriterMockRecorder) SetBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBool", reflect.TypeOf((*MockMysqlWriter)(nil).SetBool), arg0, arg1)
}

// SetStr mocks base method.
func (m *MockMysqlWriter) SetStr(arg0 frontend.PropertyID, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStr", arg0, arg1)
}

// SetStr indicates an expected call of SetStr.
func (mr *MockMysqlWriterMockRecorder) SetStr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStr", reflect.TypeOf((*MockMysqlWriter)(nil).SetStr), arg0, arg1)
}

// SetU32 mocks base method.
func (m *MockMysqlWriter) SetU32(arg0 frontend.PropertyID, arg1 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU32", arg0, arg1)
}

// SetU32 indicates an expected call of SetU32.
func (mr *MockMysqlWriterMockRecorder) SetU32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU32", reflect.TypeOf((*MockMysqlWriter)(nil).SetU32), arg0, arg1)
}

// SetU8 mocks base method.
func (m *MockMysqlWriter) SetU8(arg0 frontend.PropertyID, arg1 uint8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU8", arg0, arg1)
}

// SetU8 indicates an expected call of SetU8.
func (mr *MockMysqlWriterMockRecorder) SetU8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU8", reflect.TypeOf((*MockMysqlWriter)(nil).SetU8), arg0, arg1)
}

// UpdateCtx mocks base method.
func (m *MockMysqlWriter) UpdateCtx(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCtx", ctx)
}

// UpdateCtx indicates an expected call of UpdateCtx.
func (mr *MockMysqlWriterMockRecorder) UpdateCtx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCtx", reflect.TypeOf((*MockMysqlWriter)(nil).UpdateCtx), ctx)
}

// Write mocks base method.
func (m *MockMysqlWriter) Write(arg0 *frontend.ExecCtx, arg1 *batch.Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockMysqlWriterMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMysqlWriter)(nil).Write), arg0, arg1)
}

// WriteBinaryRow mocks base method.
func (m *MockMysqlWriter) WriteBinaryRow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBinaryRow")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBinaryRow indicates an expected call of WriteBinaryRow.
func (mr *MockMysqlWriterMockRecorder) WriteBinaryRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBinaryRow", reflect.TypeOf((*MockMysqlWriter)(nil).WriteBinaryRow))
}

// WriteColumnDef mocks base method.
func (m *MockMysqlWriter) WriteColumnDef(arg0 context.Context, arg1 frontend.Column, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteColumnDef", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteColumnDef indicates an expected call of WriteColumnDef.
func (mr *MockMysqlWriterMockRecorder) WriteColumnDef(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteColumnDef", reflect.TypeOf((*MockMysqlWriter)(nil).WriteColumnDef), arg0, arg1, arg2)
}

// WriteColumnDefBytes mocks base method.
func (m *MockMysqlWriter) WriteColumnDefBytes(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteColumnDefBytes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteColumnDefBytes indicates an expected call of WriteColumnDefBytes.
func (mr *MockMysqlWriterMockRecorder) WriteColumnDefBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteColumnDefBytes", reflect.TypeOf((*MockMysqlWriter)(nil).WriteColumnDefBytes), arg0)
}

// WriteEOF mocks base method.
func (m *MockMysqlWriter) WriteEOF(warnings, status uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEOF", warnings, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEOF indicates an expected call of WriteEOF.
func (mr *MockMysqlWriterMockRecorder) WriteEOF(warnings, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEOF", reflect.TypeOf((*MockMysqlWriter)(nil).WriteEOF), warnings, status)
}

// WriteEOFIF mocks base method.
func (m *MockMysqlWriter) WriteEOFIF(warnings, status uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEOFIF", warnings, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEOFIF indicates an expected call of WriteEOFIF.
func (mr *MockMysqlWriterMockRecorder) WriteEOFIF(warnings, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEOFIF", reflect.TypeOf((*MockMysqlWriter)(nil).WriteEOFIF), warnings, status)
}

// WriteEOFIFAndNoFlush mocks base method.
func (m *MockMysqlWriter) WriteEOFIFAndNoFlush(warnings, status uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEOFIFAndNoFlush", warnings, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEOFIFAndNoFlush indicates an expected call of WriteEOFIFAndNoFlush.
func (mr *MockMysqlWriterMockRecorder) WriteEOFIFAndNoFlush(warnings, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEOFIFAndNoFlush", reflect.TypeOf((*MockMysqlWriter)(nil).WriteEOFIFAndNoFlush), warnings, status)
}

// WriteEOFOrOK mocks base method.
func (m *MockMysqlWriter) WriteEOFOrOK(warnings, status uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEOFOrOK", warnings, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEOFOrOK indicates an expected call of WriteEOFOrOK.
func (mr *MockMysqlWriterMockRecorder) WriteEOFOrOK(warnings, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEOFOrOK", reflect.TypeOf((*MockMysqlWriter)(nil).WriteEOFOrOK), warnings, status)
}

// WriteERR mocks base method.
func (m *MockMysqlWriter) WriteERR(errorCode uint16, sqlState, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteERR", errorCode, sqlState, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteERR indicates an expected call of WriteERR.
func (mr *MockMysqlWriterMockRecorder) WriteERR(errorCode, sqlState, errorMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteERR", reflect.TypeOf((*MockMysqlWriter)(nil).WriteERR), errorCode, sqlState, errorMessage)
}

// WriteHandshake mocks base method.
func (m *MockMysqlWriter) WriteHandshake() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHandshake")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHandshake indicates an expected call of WriteHandshake.
func (mr *MockMysqlWriterMockRecorder) WriteHandshake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHandshake", reflect.TypeOf((*MockMysqlWriter)(nil).WriteHandshake))
}

// WriteLengthEncodedNumber mocks base method.
func (m *MockMysqlWriter) WriteLengthEncodedNumber(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLengthEncodedNumber", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLengthEncodedNumber indicates an expected call of WriteLengthEncodedNumber.
func (mr *MockMysqlWriterMockRecorder) WriteLengthEncodedNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLengthEncodedNumber", reflect.TypeOf((*MockMysqlWriter)(nil).WriteLengthEncodedNumber), arg0)
}

// WriteLocalInfileRequest mocks base method.
func (m *MockMysqlWriter) WriteLocalInfileRequest(filepath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLocalInfileRequest", filepath)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLocalInfileRequest indicates an expected call of WriteLocalInfileRequest.
func (mr *MockMysqlWriterMockRecorder) WriteLocalInfileRequest(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLocalInfileRequest", reflect.TypeOf((*MockMysqlWriter)(nil).WriteLocalInfileRequest), filepath)
}

// WriteOK mocks base method.
func (m *MockMysqlWriter) WriteOK(affectedRows, lastInsertId uint64, status, warnings uint16, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOK", affectedRows, lastInsertId, status, warnings, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOK indicates an expected call of WriteOK.
func (mr *MockMysqlWriterMockRecorder) WriteOK(affectedRows, lastInsertId, status, warnings, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOK", reflect.TypeOf((*MockMysqlWriter)(nil).WriteOK), affectedRows, lastInsertId, status, warnings, message)
}

// WriteOKtWithEOF mocks base method.
func (m *MockMysqlWriter) WriteOKtWithEOF(affectedRows, lastInsertId uint64, status, warnings uint16, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOKtWithEOF", affectedRows, lastInsertId, status, warnings, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOKtWithEOF indicates an expected call of WriteOKtWithEOF.
func (mr *MockMysqlWriterMockRecorder) WriteOKtWithEOF(affectedRows, lastInsertId, status, warnings, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOKtWithEOF", reflect.TypeOf((*MockMysqlWriter)(nil).WriteOKtWithEOF), affectedRows, lastInsertId, status, warnings, message)
}

// WritePrepareResponse mocks base method.
func (m *MockMysqlWriter) WritePrepareResponse(ctx context.Context, stmt *frontend.PrepareStmt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePrepareResponse", ctx, stmt)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePrepareResponse indicates an expected call of WritePrepareResponse.
func (mr *MockMysqlWriterMockRecorder) WritePrepareResponse(ctx, stmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePrepareResponse", reflect.TypeOf((*MockMysqlWriter)(nil).WritePrepareResponse), ctx, stmt)
}

// WriteResponse mocks base method.
func (m *MockMysqlWriter) WriteResponse(arg0 context.Context, arg1 *frontend.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteResponse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteResponse indicates an expected call of WriteResponse.
func (mr *MockMysqlWriterMockRecorder) WriteResponse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResponse", reflect.TypeOf((*MockMysqlWriter)(nil).WriteResponse), arg0, arg1)
}

// WriteResultSetRow mocks base method.
func (m *MockMysqlWriter) WriteResultSetRow(mrs *frontend.MysqlResultSet, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteResultSetRow", mrs, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteResultSetRow indicates an expected call of WriteResultSetRow.
func (mr *MockMysqlWriterMockRecorder) WriteResultSetRow(mrs, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResultSetRow", reflect.TypeOf((*MockMysqlWriter)(nil).WriteResultSetRow), mrs, count)
}

// WriteRow mocks base method.
func (m *MockMysqlWriter) WriteRow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRow")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRow indicates an expected call of WriteRow.
func (mr *MockMysqlWriterMockRecorder) WriteRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRow", reflect.TypeOf((*MockMysqlWriter)(nil).WriteRow))
}

// WriteTextRow mocks base method.
func (m *MockMysqlWriter) WriteTextRow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTextRow")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTextRow indicates an expected call of WriteTextRow.
func (mr *MockMysqlWriterMockRecorder) WriteTextRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTextRow", reflect.TypeOf((*MockMysqlWriter)(nil).WriteTextRow))
}

// MockMysqlHelper is a mock of MysqlHelper interface.
type MockMysqlHelper struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlHelperMockRecorder
}

// MockMysqlHelperMockRecorder is the mock recorder for MockMysqlHelper.
type MockMysqlHelperMockRecorder struct {
	mock *MockMysqlHelper
}

// NewMockMysqlHelper creates a new mock instance.
func NewMockMysqlHelper(ctrl *gomock.Controller) *MockMysqlHelper {
	mock := &MockMysqlHelper{ctrl: ctrl}
	mock.recorder = &MockMysqlHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlHelper) EXPECT() *MockMysqlHelperMockRecorder {
	return m.recorder
}

// MakeColumnDefData mocks base method.
func (m *MockMysqlHelper) MakeColumnDefData(arg0 context.Context, arg1 []*plan.ColDef) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeColumnDefData", arg0, arg1)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeColumnDefData indicates an expected call of MakeColumnDefData.
func (mr *MockMysqlHelperMockRecorder) MakeColumnDefData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeColumnDefData", reflect.TypeOf((*MockMysqlHelper)(nil).MakeColumnDefData), arg0, arg1)
}

// MockMysqlRrWr is a mock of MysqlRrWr interface.
type MockMysqlRrWr struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlRrWrMockRecorder
}

// MockMysqlRrWrMockRecorder is the mock recorder for MockMysqlRrWr.
type MockMysqlRrWrMockRecorder struct {
	mock *MockMysqlRrWr
}

// NewMockMysqlRrWr creates a new mock instance.
func NewMockMysqlRrWr(ctrl *gomock.Controller) *MockMysqlRrWr {
	mock := &MockMysqlRrWr{ctrl: ctrl}
	mock.recorder = &MockMysqlRrWrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlRrWr) EXPECT() *MockMysqlRrWrMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockMysqlRrWr) Authenticate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockMysqlRrWrMockRecorder) Authenticate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockMysqlRrWr)(nil).Authenticate), ctx)
}

// CalculateOutTrafficBytes mocks base method.
func (m *MockMysqlRrWr) CalculateOutTrafficBytes(b bool) (int64, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateOutTrafficBytes", b)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// CalculateOutTrafficBytes indicates an expected call of CalculateOutTrafficBytes.
func (mr *MockMysqlRrWrMockRecorder) CalculateOutTrafficBytes(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateOutTrafficBytes", reflect.TypeOf((*MockMysqlRrWr)(nil).CalculateOutTrafficBytes), b)
}

// Close mocks base method.
func (m *MockMysqlRrWr) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMysqlRrWrMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMysqlRrWr)(nil).Close))
}

// Free mocks base method.
func (m *MockMysqlRrWr) Free(buf []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", buf)
}

// Free indicates an expected call of Free.
func (mr *MockMysqlRrWrMockRecorder) Free(buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockMysqlRrWr)(nil).Free), buf)
}

// FreeLoadLocal mocks base method.
func (m *MockMysqlRrWr) FreeLoadLocal() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeLoadLocal")
}

// FreeLoadLocal indicates an expected call of FreeLoadLocal.
func (mr *MockMysqlRrWrMockRecorder) FreeLoadLocal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeLoadLocal", reflect.TypeOf((*MockMysqlRrWr)(nil).FreeLoadLocal))
}

// GetBool mocks base method.
func (m *MockMysqlRrWr) GetBool(arg0 frontend.PropertyID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockMysqlRrWrMockRecorder) GetBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockMysqlRrWr)(nil).GetBool), arg0)
}

// GetStr mocks base method.
func (m *MockMysqlRrWr) GetStr(arg0 frontend.PropertyID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStr", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStr indicates an expected call of GetStr.
func (mr *MockMysqlRrWrMockRecorder) GetStr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStr", reflect.TypeOf((*MockMysqlRrWr)(nil).GetStr), arg0)
}

// GetU32 mocks base method.
func (m *MockMysqlRrWr) GetU32(arg0 frontend.PropertyID) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU32", arg0)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetU32 indicates an expected call of GetU32.
func (mr *MockMysqlRrWrMockRecorder) GetU32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU32", reflect.TypeOf((*MockMysqlRrWr)(nil).GetU32), arg0)
}

// GetU8 mocks base method.
func (m *MockMysqlRrWr) GetU8(arg0 frontend.PropertyID) uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetU8", arg0)
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetU8 indicates an expected call of GetU8.
func (mr *MockMysqlRrWrMockRecorder) GetU8(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetU8", reflect.TypeOf((*MockMysqlRrWr)(nil).GetU8), arg0)
}

// HandleHandshake mocks base method.
func (m *MockMysqlRrWr) HandleHandshake(ctx context.Context, payload []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleHandshake", ctx, payload)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleHandshake indicates an expected call of HandleHandshake.
func (mr *MockMysqlRrWrMockRecorder) HandleHandshake(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleHandshake", reflect.TypeOf((*MockMysqlRrWr)(nil).HandleHandshake), ctx, payload)
}

// MakeColumnDefData mocks base method.
func (m *MockMysqlRrWr) MakeColumnDefData(arg0 context.Context, arg1 []*plan.ColDef) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeColumnDefData", arg0, arg1)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeColumnDefData indicates an expected call of MakeColumnDefData.
func (mr *MockMysqlRrWrMockRecorder) MakeColumnDefData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeColumnDefData", reflect.TypeOf((*MockMysqlRrWr)(nil).MakeColumnDefData), arg0, arg1)
}

// ParseExecuteData mocks base method.
func (m *MockMysqlRrWr) ParseExecuteData(ctx context.Context, proc *process.Process, stmt *frontend.PrepareStmt, data []byte, pos int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseExecuteData", ctx, proc, stmt, data, pos)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseExecuteData indicates an expected call of ParseExecuteData.
func (mr *MockMysqlRrWrMockRecorder) ParseExecuteData(ctx, proc, stmt, data, pos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseExecuteData", reflect.TypeOf((*MockMysqlRrWr)(nil).ParseExecuteData), ctx, proc, stmt, data, pos)
}

// ParseSendLongData mocks base method.
func (m *MockMysqlRrWr) ParseSendLongData(ctx context.Context, proc *process.Process, stmt *frontend.PrepareStmt, data []byte, pos int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSendLongData", ctx, proc, stmt, data, pos)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseSendLongData indicates an expected call of ParseSendLongData.
func (mr *MockMysqlRrWrMockRecorder) ParseSendLongData(ctx, proc, stmt, data, pos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSendLongData", reflect.TypeOf((*MockMysqlRrWr)(nil).ParseSendLongData), ctx, proc, stmt, data, pos)
}

// Read mocks base method.
func (m *MockMysqlRrWr) Read() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockMysqlRrWrMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMysqlRrWr)(nil).Read))
}

// ReadLoadLocalPacket mocks base method.
func (m *MockMysqlRrWr) ReadLoadLocalPacket() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLoadLocalPacket")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoadLocalPacket indicates an expected call of ReadLoadLocalPacket.
func (mr *MockMysqlRrWrMockRecorder) ReadLoadLocalPacket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoadLocalPacket", reflect.TypeOf((*MockMysqlRrWr)(nil).ReadLoadLocalPacket))
}

// Reset mocks base method.
func (m *MockMysqlRrWr) Reset(ses *frontend.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", ses)
}

// Reset indicates an expected call of Reset.
func (mr *MockMysqlRrWrMockRecorder) Reset(ses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockMysqlRrWr)(nil).Reset), ses)
}

// ResetStatistics mocks base method.
func (m *MockMysqlRrWr) ResetStatistics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetStatistics")
}

// ResetStatistics indicates an expected call of ResetStatistics.
func (mr *MockMysqlRrWrMockRecorder) ResetStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStatistics", reflect.TypeOf((*MockMysqlRrWr)(nil).ResetStatistics))
}

// SetBool mocks base method.
func (m *MockMysqlRrWr) SetBool(arg0 frontend.PropertyID, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBool", arg0, arg1)
}

// SetBool indicates an expected call of SetBool.
func (mr *MockMysqlRrWrMockRecorder) SetBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBool", reflect.TypeOf((*MockMysqlRrWr)(nil).SetBool), arg0, arg1)
}

// SetStr mocks base method.
func (m *MockMysqlRrWr) SetStr(arg0 frontend.PropertyID, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStr", arg0, arg1)
}

// SetStr indicates an expected call of SetStr.
func (mr *MockMysqlRrWrMockRecorder) SetStr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStr", reflect.TypeOf((*MockMysqlRrWr)(nil).SetStr), arg0, arg1)
}

// SetU32 mocks base method.
func (m *MockMysqlRrWr) SetU32(arg0 frontend.PropertyID, arg1 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU32", arg0, arg1)
}

// SetU32 indicates an expected call of SetU32.
func (mr *MockMysqlRrWrMockRecorder) SetU32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU32", reflect.TypeOf((*MockMysqlRrWr)(nil).SetU32), arg0, arg1)
}

// SetU8 mocks base method.
func (m *MockMysqlRrWr) SetU8(arg0 frontend.PropertyID, arg1 uint8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetU8", arg0, arg1)
}

// SetU8 indicates an expected call of SetU8.
func (mr *MockMysqlRrWrMockRecorder) SetU8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetU8", reflect.TypeOf((*MockMysqlRrWr)(nil).SetU8), arg0, arg1)
}

// UpdateCtx mocks base method.
func (m *MockMysqlRrWr) UpdateCtx(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCtx", ctx)
}

// UpdateCtx indicates an expected call of UpdateCtx.
func (mr *MockMysqlRrWrMockRecorder) UpdateCtx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCtx", reflect.TypeOf((*MockMysqlRrWr)(nil).UpdateCtx), ctx)
}

// Write mocks base method.
func (m *MockMysqlRrWr) Write(arg0 *frontend.ExecCtx, arg1 *batch.Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockMysqlRrWrMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMysqlRrWr)(nil).Write), arg0, arg1)
}

// WriteBinaryRow mocks base method.
func (m *MockMysqlRrWr) WriteBinaryRow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBinaryRow")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBinaryRow indicates an expected call of WriteBinaryRow.
func (mr *MockMysqlRrWrMockRecorder) WriteBinaryRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBinaryRow", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteBinaryRow))
}

// WriteColumnDef mocks base method.
func (m *MockMysqlRrWr) WriteColumnDef(arg0 context.Context, arg1 frontend.Column, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteColumnDef", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteColumnDef indicates an expected call of WriteColumnDef.
func (mr *MockMysqlRrWrMockRecorder) WriteColumnDef(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteColumnDef", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteColumnDef), arg0, arg1, arg2)
}

// WriteColumnDefBytes mocks base method.
func (m *MockMysqlRrWr) WriteColumnDefBytes(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteColumnDefBytes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteColumnDefBytes indicates an expected call of WriteColumnDefBytes.
func (mr *MockMysqlRrWrMockRecorder) WriteColumnDefBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteColumnDefBytes", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteColumnDefBytes), arg0)
}

// WriteEOF mocks base method.
func (m *MockMysqlRrWr) WriteEOF(warnings, status uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEOF", warnings, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEOF indicates an expected call of WriteEOF.
func (mr *MockMysqlRrWrMockRecorder) WriteEOF(warnings, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEOF", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteEOF), warnings, status)
}

// WriteEOFIF mocks base method.
func (m *MockMysqlRrWr) WriteEOFIF(warnings, status uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEOFIF", warnings, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEOFIF indicates an expected call of WriteEOFIF.
func (mr *MockMysqlRrWrMockRecorder) WriteEOFIF(warnings, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEOFIF", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteEOFIF), warnings, status)
}

// WriteEOFIFAndNoFlush mocks base method.
func (m *MockMysqlRrWr) WriteEOFIFAndNoFlush(warnings, status uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEOFIFAndNoFlush", warnings, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEOFIFAndNoFlush indicates an expected call of WriteEOFIFAndNoFlush.
func (mr *MockMysqlRrWrMockRecorder) WriteEOFIFAndNoFlush(warnings, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEOFIFAndNoFlush", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteEOFIFAndNoFlush), warnings, status)
}

// WriteEOFOrOK mocks base method.
func (m *MockMysqlRrWr) WriteEOFOrOK(warnings, status uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEOFOrOK", warnings, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEOFOrOK indicates an expected call of WriteEOFOrOK.
func (mr *MockMysqlRrWrMockRecorder) WriteEOFOrOK(warnings, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEOFOrOK", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteEOFOrOK), warnings, status)
}

// WriteERR mocks base method.
func (m *MockMysqlRrWr) WriteERR(errorCode uint16, sqlState, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteERR", errorCode, sqlState, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteERR indicates an expected call of WriteERR.
func (mr *MockMysqlRrWrMockRecorder) WriteERR(errorCode, sqlState, errorMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteERR", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteERR), errorCode, sqlState, errorMessage)
}

// WriteHandshake mocks base method.
func (m *MockMysqlRrWr) WriteHandshake() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHandshake")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHandshake indicates an expected call of WriteHandshake.
func (mr *MockMysqlRrWrMockRecorder) WriteHandshake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHandshake", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteHandshake))
}

// WriteLengthEncodedNumber mocks base method.
func (m *MockMysqlRrWr) WriteLengthEncodedNumber(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLengthEncodedNumber", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLengthEncodedNumber indicates an expected call of WriteLengthEncodedNumber.
func (mr *MockMysqlRrWrMockRecorder) WriteLengthEncodedNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLengthEncodedNumber", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteLengthEncodedNumber), arg0)
}

// WriteLocalInfileRequest mocks base method.
func (m *MockMysqlRrWr) WriteLocalInfileRequest(filepath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLocalInfileRequest", filepath)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLocalInfileRequest indicates an expected call of WriteLocalInfileRequest.
func (mr *MockMysqlRrWrMockRecorder) WriteLocalInfileRequest(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLocalInfileRequest", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteLocalInfileRequest), filepath)
}

// WriteOK mocks base method.
func (m *MockMysqlRrWr) WriteOK(affectedRows, lastInsertId uint64, status, warnings uint16, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOK", affectedRows, lastInsertId, status, warnings, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOK indicates an expected call of WriteOK.
func (mr *MockMysqlRrWrMockRecorder) WriteOK(affectedRows, lastInsertId, status, warnings, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOK", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteOK), affectedRows, lastInsertId, status, warnings, message)
}

// WriteOKtWithEOF mocks base method.
func (m *MockMysqlRrWr) WriteOKtWithEOF(affectedRows, lastInsertId uint64, status, warnings uint16, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOKtWithEOF", affectedRows, lastInsertId, status, warnings, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOKtWithEOF indicates an expected call of WriteOKtWithEOF.
func (mr *MockMysqlRrWrMockRecorder) WriteOKtWithEOF(affectedRows, lastInsertId, status, warnings, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOKtWithEOF", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteOKtWithEOF), affectedRows, lastInsertId, status, warnings, message)
}

// WritePrepareResponse mocks base method.
func (m *MockMysqlRrWr) WritePrepareResponse(ctx context.Context, stmt *frontend.PrepareStmt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePrepareResponse", ctx, stmt)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePrepareResponse indicates an expected call of WritePrepareResponse.
func (mr *MockMysqlRrWrMockRecorder) WritePrepareResponse(ctx, stmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePrepareResponse", reflect.TypeOf((*MockMysqlRrWr)(nil).WritePrepareResponse), ctx, stmt)
}

// WriteResponse mocks base method.
func (m *MockMysqlRrWr) WriteResponse(arg0 context.Context, arg1 *frontend.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteResponse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteResponse indicates an expected call of WriteResponse.
func (mr *MockMysqlRrWrMockRecorder) WriteResponse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResponse", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteResponse), arg0, arg1)
}

// WriteResultSetRow mocks base method.
func (m *MockMysqlRrWr) WriteResultSetRow(mrs *frontend.MysqlResultSet, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteResultSetRow", mrs, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteResultSetRow indicates an expected call of WriteResultSetRow.
func (mr *MockMysqlRrWrMockRecorder) WriteResultSetRow(mrs, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResultSetRow", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteResultSetRow), mrs, count)
}

// WriteRow mocks base method.
func (m *MockMysqlRrWr) WriteRow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRow")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRow indicates an expected call of WriteRow.
func (mr *MockMysqlRrWrMockRecorder) WriteRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRow", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteRow))
}

// WriteTextRow mocks base method.
func (m *MockMysqlRrWr) WriteTextRow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTextRow")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTextRow indicates an expected call of WriteTextRow.
func (mr *MockMysqlRrWrMockRecorder) WriteTextRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTextRow", reflect.TypeOf((*MockMysqlRrWr)(nil).WriteTextRow))
}

// MockMysqlPayloadWriter is a mock of MysqlPayloadWriter interface.
type MockMysqlPayloadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlPayloadWriterMockRecorder
}

// MockMysqlPayloadWriterMockRecorder is the mock recorder for MockMysqlPayloadWriter.
type MockMysqlPayloadWriterMockRecorder struct {
	mock *MockMysqlPayloadWriter
}

// NewMockMysqlPayloadWriter creates a new mock instance.
func NewMockMysqlPayloadWriter(ctrl *gomock.Controller) *MockMysqlPayloadWriter {
	mock := &MockMysqlPayloadWriter{ctrl: ctrl}
	mock.recorder = &MockMysqlPayloadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlPayloadWriter) EXPECT() *MockMysqlPayloadWriterMockRecorder {
	return m.recorder
}

// ClosePayload mocks base method.
func (m *MockMysqlPayloadWriter) ClosePayload(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePayload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePayload indicates an expected call of ClosePayload.
func (mr *MockMysqlPayloadWriterMockRecorder) ClosePayload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePayload", reflect.TypeOf((*MockMysqlPayloadWriter)(nil).ClosePayload), arg0)
}

// CloseRow mocks base method.
func (m *MockMysqlPayloadWriter) CloseRow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRow")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRow indicates an expected call of CloseRow.
func (mr *MockMysqlPayloadWriterMockRecorder) CloseRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRow", reflect.TypeOf((*MockMysqlPayloadWriter)(nil).CloseRow))
}

// FillPayload mocks base method.
func (m *MockMysqlPayloadWriter) FillPayload() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillPayload")
	ret0, _ := ret[0].(error)
	return ret0
}

// FillPayload indicates an expected call of FillPayload.
func (mr *MockMysqlPayloadWriterMockRecorder) FillPayload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillPayload", reflect.TypeOf((*MockMysqlPayloadWriter)(nil).FillPayload))
}

// OpenPayload mocks base method.
func (m *MockMysqlPayloadWriter) OpenPayload() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPayload")
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenPayload indicates an expected call of OpenPayload.
func (mr *MockMysqlPayloadWriterMockRecorder) OpenPayload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPayload", reflect.TypeOf((*MockMysqlPayloadWriter)(nil).OpenPayload))
}

// OpenRow mocks base method.
func (m *MockMysqlPayloadWriter) OpenRow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRow")
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenRow indicates an expected call of OpenRow.
func (mr *MockMysqlPayloadWriterMockRecorder) OpenRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRow", reflect.TypeOf((*MockMysqlPayloadWriter)(nil).OpenRow))
}

// MockBinaryWriter is a mock of BinaryWriter interface.
type MockBinaryWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryWriterMockRecorder
}

// MockBinaryWriterMockRecorder is the mock recorder for MockBinaryWriter.
type MockBinaryWriterMockRecorder struct {
	mock *MockBinaryWriter
}

// NewMockBinaryWriter creates a new mock instance.
func NewMockBinaryWriter(ctrl *gomock.Controller) *MockBinaryWriter {
	mock := &MockBinaryWriter{ctrl: ctrl}
	mock.recorder = &MockBinaryWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryWriter) EXPECT() *MockBinaryWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBinaryWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBinaryWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBinaryWriter)(nil).Close))
}

// Write mocks base method.
func (m *MockBinaryWriter) Write(arg0 *frontend.ExecCtx, arg1 *batch.Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockBinaryWriterMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockBinaryWriter)(nil).Write), arg0, arg1)
}

// MockCsvWriter is a mock of CsvWriter interface.
type MockCsvWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCsvWriterMockRecorder
}

// MockCsvWriterMockRecorder is the mock recorder for MockCsvWriter.
type MockCsvWriterMockRecorder struct {
	mock *MockCsvWriter
}

// NewMockCsvWriter creates a new mock instance.
func NewMockCsvWriter(ctrl *gomock.Controller) *MockCsvWriter {
	mock := &MockCsvWriter{ctrl: ctrl}
	mock.recorder = &MockCsvWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCsvWriter) EXPECT() *MockCsvWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCsvWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCsvWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCsvWriter)(nil).Close))
}

// Write mocks base method.
func (m *MockCsvWriter) Write(arg0 *frontend.ExecCtx, arg1 *batch.Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockCsvWriterMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCsvWriter)(nil).Write), arg0, arg1)
}

// MockMemWriter is a mock of MemWriter interface.
type MockMemWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMemWriterMockRecorder
}

// MockMemWriterMockRecorder is the mock recorder for MockMemWriter.
type MockMemWriterMockRecorder struct {
	mock *MockMemWriter
}

// NewMockMemWriter creates a new mock instance.
func NewMockMemWriter(ctrl *gomock.Controller) *MockMemWriter {
	mock := &MockMemWriter{ctrl: ctrl}
	mock.recorder = &MockMemWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemWriter) EXPECT() *MockMemWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMemWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMemWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMemWriter)(nil).Close))
}

// Write mocks base method.
func (m *MockMemWriter) Write(arg0 *frontend.ExecCtx, arg1 *batch.Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockMemWriterMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMemWriter)(nil).Write), arg0, arg1)
}
