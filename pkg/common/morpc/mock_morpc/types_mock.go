// Copyright 2023 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ../types.go

// Package mock_morpc is a generated GoMock package.
package mock_morpc

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	buf "github.com/fagongzi/goetty/v2/buf"
	gomock "github.com/golang/mock/gomock"
	morpc "github.com/matrixorigin/matrixone/pkg/common/morpc"
)


// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// DebugString mocks base method.
func (m *MockMessage) DebugString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugString")
	ret0, _ := ret[0].(string)
	return ret0
}

// DebugString indicates an expected call of DebugString.
func (mr *MockMessageMockRecorder) DebugString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugString", reflect.TypeOf((*MockMessage)(nil).DebugString))
}

// GetID mocks base method.
func (m *MockMessage) GetID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockMessageMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockMessage)(nil).GetID))
}

// MarshalTo mocks base method.
func (m *MockMessage) MarshalTo(data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockMessageMockRecorder) MarshalTo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockMessage)(nil).MarshalTo), data)
}

// SetID mocks base method.
func (m *MockMessage) SetID(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", arg0)
}

// SetID indicates an expected call of SetID.
func (mr *MockMessageMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockMessage)(nil).SetID), arg0)
}

// Size mocks base method.
func (m *MockMessage) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockMessageMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockMessage)(nil).Size))
}

// Unmarshal mocks base method.
func (m *MockMessage) Unmarshal(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockMessageMockRecorder) Unmarshal(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockMessage)(nil).Unmarshal), data)
}

// MockPayloadMessage is a mock of PayloadMessage interface.
type MockPayloadMessage struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadMessageMockRecorder
}

// MockPayloadMessageMockRecorder is the mock recorder for MockPayloadMessage.
type MockPayloadMessageMockRecorder struct {
	mock *MockPayloadMessage
}

// NewMockPayloadMessage creates a new mock instance.
func NewMockPayloadMessage(ctrl *gomock.Controller) *MockPayloadMessage {
	mock := &MockPayloadMessage{ctrl: ctrl}
	mock.recorder = &MockPayloadMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadMessage) EXPECT() *MockPayloadMessageMockRecorder {
	return m.recorder
}

// DebugString mocks base method.
func (m *MockPayloadMessage) DebugString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugString")
	ret0, _ := ret[0].(string)
	return ret0
}

// DebugString indicates an expected call of DebugString.
func (mr *MockPayloadMessageMockRecorder) DebugString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugString", reflect.TypeOf((*MockPayloadMessage)(nil).DebugString))
}

// GetID mocks base method.
func (m *MockPayloadMessage) GetID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockPayloadMessageMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockPayloadMessage)(nil).GetID))
}

// GetPayloadField mocks base method.
func (m *MockPayloadMessage) GetPayloadField() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayloadField")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPayloadField indicates an expected call of GetPayloadField.
func (mr *MockPayloadMessageMockRecorder) GetPayloadField() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadField", reflect.TypeOf((*MockPayloadMessage)(nil).GetPayloadField))
}

// MarshalTo mocks base method.
func (m *MockPayloadMessage) MarshalTo(data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockPayloadMessageMockRecorder) MarshalTo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockPayloadMessage)(nil).MarshalTo), data)
}

// SetID mocks base method.
func (m *MockPayloadMessage) SetID(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", arg0)
}

// SetID indicates an expected call of SetID.
func (mr *MockPayloadMessageMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockPayloadMessage)(nil).SetID), arg0)
}

// SetPayloadField mocks base method.
func (m *MockPayloadMessage) SetPayloadField(data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPayloadField", data)
}

// SetPayloadField indicates an expected call of SetPayloadField.
func (mr *MockPayloadMessageMockRecorder) SetPayloadField(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayloadField", reflect.TypeOf((*MockPayloadMessage)(nil).SetPayloadField), data)
}

// Size mocks base method.
func (m *MockPayloadMessage) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockPayloadMessageMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockPayloadMessage)(nil).Size))
}

// Unmarshal mocks base method.
func (m *MockPayloadMessage) Unmarshal(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockPayloadMessageMockRecorder) Unmarshal(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockPayloadMessage)(nil).Unmarshal), data)
}

// MockRPCClient is a mock of RPCClient interface.
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient.
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance.
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRPCClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRPCClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRPCClient)(nil).Close))
}

// NewStream mocks base method.
func (m *MockRPCClient) NewStream(backend string, lock bool) (morpc.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStream", backend, lock)
	ret0, _ := ret[0].(morpc.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStream indicates an expected call of NewStream.
func (mr *MockRPCClientMockRecorder) NewStream(backend, lock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockRPCClient)(nil).NewStream), backend, lock)
}

// Ping mocks base method.
func (m *MockRPCClient) Ping(ctx context.Context, backend string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, backend)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRPCClientMockRecorder) Ping(ctx, backend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRPCClient)(nil).Ping), ctx, backend)
}

// Send mocks base method.
func (m *MockRPCClient) Send(ctx context.Context, backend string, request morpc.Message) (*morpc.Future, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, backend, request)
	ret0, _ := ret[0].(*morpc.Future)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockRPCClientMockRecorder) Send(ctx, backend, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRPCClient)(nil).Send), ctx, backend, request)
}

// MockClientSession is a mock of ClientSession interface.
type MockClientSession struct {
	ctrl     *gomock.Controller
	recorder *MockClientSessionMockRecorder
}

// MockClientSessionMockRecorder is the mock recorder for MockClientSession.
type MockClientSessionMockRecorder struct {
	mock *MockClientSession
}

// NewMockClientSession creates a new mock instance.
func NewMockClientSession(ctrl *gomock.Controller) *MockClientSession {
	mock := &MockClientSession{ctrl: ctrl}
	mock.recorder = &MockClientSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSession) EXPECT() *MockClientSessionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientSession)(nil).Close))
}

// CreateCache mocks base method.
func (m *MockClientSession) CreateCache(ctx context.Context, cacheID uint64) (morpc.MessageCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCache", ctx, cacheID)
	ret0, _ := ret[0].(morpc.MessageCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCache indicates an expected call of CreateCache.
func (mr *MockClientSessionMockRecorder) CreateCache(ctx, cacheID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCache", reflect.TypeOf((*MockClientSession)(nil).CreateCache), ctx, cacheID)
}

// DeleteCache mocks base method.
func (m *MockClientSession) DeleteCache(cacheID uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCache", cacheID)
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockClientSessionMockRecorder) DeleteCache(cacheID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockClientSession)(nil).DeleteCache), cacheID)
}

// GetCache mocks base method.
func (m *MockClientSession) GetCache(cacheID uint64) (morpc.MessageCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", cacheID)
	ret0, _ := ret[0].(morpc.MessageCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockClientSessionMockRecorder) GetCache(cacheID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockClientSession)(nil).GetCache), cacheID)
}

// RemoteAddress mocks base method.
func (m *MockClientSession) RemoteAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteAddress indicates an expected call of RemoteAddress.
func (mr *MockClientSessionMockRecorder) RemoteAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddress", reflect.TypeOf((*MockClientSession)(nil).RemoteAddress))
}

// SafeClose mocks base method.
func (m *MockClientSession) SafeClose(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeClose", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SafeClose indicates an expected call of SafeClose.
func (mr *MockClientSessionMockRecorder) SafeClose(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeClose", reflect.TypeOf((*MockClientSession)(nil).SafeClose), ctx)
}

// Write mocks base method.
func (m *MockClientSession) Write(ctx context.Context, response morpc.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockClientSessionMockRecorder) Write(ctx, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClientSession)(nil).Write), ctx, response)
}

// MockMessageCache is a mock of MessageCache interface.
type MockMessageCache struct {
	ctrl     *gomock.Controller
	recorder *MockMessageCacheMockRecorder
}

// MockMessageCacheMockRecorder is the mock recorder for MockMessageCache.
type MockMessageCacheMockRecorder struct {
	mock *MockMessageCache
}

// NewMockMessageCache creates a new mock instance.
func NewMockMessageCache(ctrl *gomock.Controller) *MockMessageCache {
	mock := &MockMessageCache{ctrl: ctrl}
	mock.recorder = &MockMessageCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageCache) EXPECT() *MockMessageCacheMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMessageCache) Add(value morpc.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMessageCacheMockRecorder) Add(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMessageCache)(nil).Add), value)
}

// Close mocks base method.
func (m *MockMessageCache) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMessageCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageCache)(nil).Close))
}

// Len mocks base method.
func (m *MockMessageCache) Len() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Len indicates an expected call of Len.
func (mr *MockMessageCacheMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockMessageCache)(nil).Len))
}

// Pop mocks base method.
func (m *MockMessageCache) Pop() (morpc.Message, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop")
	ret0, _ := ret[0].(morpc.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Pop indicates an expected call of Pop.
func (mr *MockMessageCacheMockRecorder) Pop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockMessageCache)(nil).Pop))
}

// MockRPCServer is a mock of RPCServer interface.
type MockRPCServer struct {
	ctrl     *gomock.Controller
	recorder *MockRPCServerMockRecorder
}

// MockRPCServerMockRecorder is the mock recorder for MockRPCServer.
type MockRPCServerMockRecorder struct {
	mock *MockRPCServer
}

// NewMockRPCServer creates a new mock instance.
func NewMockRPCServer(ctrl *gomock.Controller) *MockRPCServer {
	mock := &MockRPCServer{ctrl: ctrl}
	mock.recorder = &MockRPCServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCServer) EXPECT() *MockRPCServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRPCServer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRPCServerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRPCServer)(nil).Close))
}

// RegisterRequestHandler mocks base method.
func (m *MockRPCServer) RegisterRequestHandler(arg0 func(context.Context, morpc.RPCMessage, uint64, morpc.ClientSession) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterRequestHandler", arg0)
}

// RegisterRequestHandler indicates an expected call of RegisterRequestHandler.
func (mr *MockRPCServerMockRecorder) RegisterRequestHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRequestHandler", reflect.TypeOf((*MockRPCServer)(nil).RegisterRequestHandler), arg0)
}

// Start mocks base method.
func (m *MockRPCServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRPCServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRPCServer)(nil).Start))
}

// MockCodec is a mock of Codec interface.
type MockCodec struct {
	ctrl     *gomock.Controller
	recorder *MockCodecMockRecorder
}

// MockCodecMockRecorder is the mock recorder for MockCodec.
type MockCodecMockRecorder struct {
	mock *MockCodec
}

// NewMockCodec creates a new mock instance.
func NewMockCodec(ctrl *gomock.Controller) *MockCodec {
	mock := &MockCodec{ctrl: ctrl}
	mock.recorder = &MockCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodec) EXPECT() *MockCodecMockRecorder {
	return m.recorder
}

// AddHeaderCodec mocks base method.
func (m *MockCodec) AddHeaderCodec(arg0 morpc.HeaderCodec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHeaderCodec", arg0)
}

// AddHeaderCodec indicates an expected call of AddHeaderCodec.
func (mr *MockCodecMockRecorder) AddHeaderCodec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHeaderCodec", reflect.TypeOf((*MockCodec)(nil).AddHeaderCodec), arg0)
}

// Decode mocks base method.
func (m *MockCodec) Decode(in *buf.ByteBuf) (any, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", in)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Decode indicates an expected call of Decode.
func (mr *MockCodecMockRecorder) Decode(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCodec)(nil).Decode), in)
}

// Encode mocks base method.
func (m *MockCodec) Encode(message any, out *buf.ByteBuf, conn io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", message, out, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockCodecMockRecorder) Encode(message, out, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockCodec)(nil).Encode), message, out, conn)
}

// Valid mocks base method.
func (m *MockCodec) Valid(message morpc.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Valid indicates an expected call of Valid.
func (mr *MockCodecMockRecorder) Valid(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockCodec)(nil).Valid), message)
}

// MockHeaderCodec is a mock of HeaderCodec interface.
type MockHeaderCodec struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderCodecMockRecorder
}

// MockHeaderCodecMockRecorder is the mock recorder for MockHeaderCodec.
type MockHeaderCodecMockRecorder struct {
	mock *MockHeaderCodec
}

// NewMockHeaderCodec creates a new mock instance.
func NewMockHeaderCodec(ctrl *gomock.Controller) *MockHeaderCodec {
	mock := &MockHeaderCodec{ctrl: ctrl}
	mock.recorder = &MockHeaderCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderCodec) EXPECT() *MockHeaderCodecMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockHeaderCodec) Decode(arg0 *morpc.RPCMessage, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockHeaderCodecMockRecorder) Decode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockHeaderCodec)(nil).Decode), arg0, arg1)
}

// Encode mocks base method.
func (m *MockHeaderCodec) Encode(arg0 *morpc.RPCMessage, arg1 *buf.ByteBuf) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockHeaderCodecMockRecorder) Encode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockHeaderCodec)(nil).Encode), arg0, arg1)
}

// MockBackendFactory is a mock of BackendFactory interface.
type MockBackendFactory struct {
	ctrl     *gomock.Controller
	recorder *MockBackendFactoryMockRecorder
}

// MockBackendFactoryMockRecorder is the mock recorder for MockBackendFactory.
type MockBackendFactoryMockRecorder struct {
	mock *MockBackendFactory
}

// NewMockBackendFactory creates a new mock instance.
func NewMockBackendFactory(ctrl *gomock.Controller) *MockBackendFactory {
	mock := &MockBackendFactory{ctrl: ctrl}
	mock.recorder = &MockBackendFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendFactory) EXPECT() *MockBackendFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBackendFactory) Create(address string, extraOptions ...morpc.BackendOption) (morpc.Backend, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range extraOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(morpc.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBackendFactoryMockRecorder) Create(address interface{}, extraOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, extraOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBackendFactory)(nil).Create), varargs...)
}

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Busy mocks base method.
func (m *MockBackend) Busy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Busy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Busy indicates an expected call of Busy.
func (mr *MockBackendMockRecorder) Busy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Busy", reflect.TypeOf((*MockBackend)(nil).Busy))
}

// Close mocks base method.
func (m *MockBackend) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBackend)(nil).Close))
}

// LastActiveTime mocks base method.
func (m *MockBackend) LastActiveTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastActiveTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LastActiveTime indicates an expected call of LastActiveTime.
func (mr *MockBackendMockRecorder) LastActiveTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastActiveTime", reflect.TypeOf((*MockBackend)(nil).LastActiveTime))
}

// Lock mocks base method.
func (m *MockBackend) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockBackendMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockBackend)(nil).Lock))
}

// Locked mocks base method.
func (m *MockBackend) Locked() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Locked indicates an expected call of Locked.
func (mr *MockBackendMockRecorder) Locked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locked", reflect.TypeOf((*MockBackend)(nil).Locked))
}

// NewStream mocks base method.
func (m *MockBackend) NewStream(unlockAfterClose bool) (morpc.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStream", unlockAfterClose)
	ret0, _ := ret[0].(morpc.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStream indicates an expected call of NewStream.
func (mr *MockBackendMockRecorder) NewStream(unlockAfterClose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockBackend)(nil).NewStream), unlockAfterClose)
}

// Send mocks base method.
func (m *MockBackend) Send(ctx context.Context, request morpc.Message) (*morpc.Future, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, request)
	ret0, _ := ret[0].(*morpc.Future)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockBackendMockRecorder) Send(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBackend)(nil).Send), ctx, request)
}

// SendInternal mocks base method.
func (m *MockBackend) SendInternal(ctx context.Context, request morpc.Message) (*morpc.Future, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInternal", ctx, request)
	ret0, _ := ret[0].(*morpc.Future)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInternal indicates an expected call of SendInternal.
func (mr *MockBackendMockRecorder) SendInternal(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInternal", reflect.TypeOf((*MockBackend)(nil).SendInternal), ctx, request)
}

// Unlock mocks base method.
func (m *MockBackend) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockBackendMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockBackend)(nil).Unlock))
}

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close(closeConn bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", closeConn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close(closeConn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close), closeConn)
}

// ID mocks base method.
func (m *MockStream) ID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockStreamMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockStream)(nil).ID))
}

// Receive mocks base method.
func (m *MockStream) Receive() (chan morpc.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(chan morpc.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockStreamMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockStream)(nil).Receive))
}

// Send mocks base method.
func (m *MockStream) Send(ctx context.Context, request morpc.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamMockRecorder) Send(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStream)(nil).Send), ctx, request)
}

// MockMethodBasedMessage is a mock of MethodBasedMessage interface.
type MockMethodBasedMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMethodBasedMessageMockRecorder
}

// MockMethodBasedMessageMockRecorder is the mock recorder for MockMethodBasedMessage.
type MockMethodBasedMessageMockRecorder struct {
	mock *MockMethodBasedMessage
}

// NewMockMethodBasedMessage creates a new mock instance.
func NewMockMethodBasedMessage(ctrl *gomock.Controller) *MockMethodBasedMessage {
	mock := &MockMethodBasedMessage{ctrl: ctrl}
	mock.recorder = &MockMethodBasedMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMethodBasedMessage) EXPECT() *MockMethodBasedMessageMockRecorder {
	return m.recorder
}

// DebugString mocks base method.
func (m *MockMethodBasedMessage) DebugString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugString")
	ret0, _ := ret[0].(string)
	return ret0
}

// DebugString indicates an expected call of DebugString.
func (mr *MockMethodBasedMessageMockRecorder) DebugString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugString", reflect.TypeOf((*MockMethodBasedMessage)(nil).DebugString))
}

// GetID mocks base method.
func (m *MockMethodBasedMessage) GetID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockMethodBasedMessageMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockMethodBasedMessage)(nil).GetID))
}

// MarshalTo mocks base method.
func (m *MockMethodBasedMessage) MarshalTo(data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockMethodBasedMessageMockRecorder) MarshalTo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockMethodBasedMessage)(nil).MarshalTo), data)
}

// Method mocks base method.
func (m *MockMethodBasedMessage) Method() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockMethodBasedMessageMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockMethodBasedMessage)(nil).Method))
}

// Reset mocks base method.
func (m *MockMethodBasedMessage) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockMethodBasedMessageMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockMethodBasedMessage)(nil).Reset))
}

// SetID mocks base method.
func (m *MockMethodBasedMessage) SetID(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", arg0)
}

// SetID indicates an expected call of SetID.
func (mr *MockMethodBasedMessageMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockMethodBasedMessage)(nil).SetID), arg0)
}

// SetMethod mocks base method.
func (m *MockMethodBasedMessage) SetMethod(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMethod", arg0)
}

// SetMethod indicates an expected call of SetMethod.
func (mr *MockMethodBasedMessageMockRecorder) SetMethod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMethod", reflect.TypeOf((*MockMethodBasedMessage)(nil).SetMethod), arg0)
}

// Size mocks base method.
func (m *MockMethodBasedMessage) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockMethodBasedMessageMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockMethodBasedMessage)(nil).Size))
}

// Unmarshal mocks base method.
func (m *MockMethodBasedMessage) Unmarshal(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockMethodBasedMessageMockRecorder) Unmarshal(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockMethodBasedMessage)(nil).Unmarshal), data)
}

// UnwrapError mocks base method.
func (m *MockMethodBasedMessage) UnwrapError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnwrapError")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnwrapError indicates an expected call of UnwrapError.
func (mr *MockMethodBasedMessageMockRecorder) UnwrapError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnwrapError", reflect.TypeOf((*MockMethodBasedMessage)(nil).UnwrapError))
}

// WrapError mocks base method.
func (m *MockMethodBasedMessage) WrapError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WrapError", arg0)
}

// WrapError indicates an expected call of WrapError.
func (mr *MockMethodBasedMessageMockRecorder) WrapError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapError", reflect.TypeOf((*MockMethodBasedMessage)(nil).WrapError), arg0)
}
