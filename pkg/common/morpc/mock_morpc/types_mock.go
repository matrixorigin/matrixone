// Copyright 2023 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/matrixorigin/matrixone/pkg/common/morpc (interfaces: ClientSession,Stream)

// Package mock_morpc is a generated GoMock package.
package mock_morpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	morpc "github.com/matrixorigin/matrixone/pkg/common/morpc"
)

// MockClientSession is a mock of ClientSession interface.
type MockClientSession struct {
	ctrl     *gomock.Controller
	recorder *MockClientSessionMockRecorder
}

// MockClientSessionMockRecorder is the mock recorder for MockClientSession.
type MockClientSessionMockRecorder struct {
	mock *MockClientSession
}

// NewMockClientSession creates a new mock instance.
func NewMockClientSession(ctrl *gomock.Controller) *MockClientSession {
	mock := &MockClientSession{ctrl: ctrl}
	mock.recorder = &MockClientSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSession) EXPECT() *MockClientSessionMockRecorder {
	return m.recorder
}

// AsyncWrite mocks base method.
func (m *MockClientSession) AsyncWrite(response morpc.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncWrite", response)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncWrite indicates an expected call of AsyncWrite.
func (mr *MockClientSessionMockRecorder) AsyncWrite(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncWrite", reflect.TypeOf((*MockClientSession)(nil).AsyncWrite), response)
}

// Close mocks base method.
func (m *MockClientSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientSession)(nil).Close))
}

// CreateCache mocks base method.
func (m *MockClientSession) CreateCache(ctx context.Context, cacheID uint64) (morpc.MessageCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCache", ctx, cacheID)
	ret0, _ := ret[0].(morpc.MessageCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCache indicates an expected call of CreateCache.
func (mr *MockClientSessionMockRecorder) CreateCache(ctx, cacheID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCache", reflect.TypeOf((*MockClientSession)(nil).CreateCache), ctx, cacheID)
}

// DeleteCache mocks base method.
func (m *MockClientSession) DeleteCache(cacheID uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCache", cacheID)
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockClientSessionMockRecorder) DeleteCache(cacheID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockClientSession)(nil).DeleteCache), cacheID)
}

// GetCache mocks base method.
func (m *MockClientSession) GetCache(cacheID uint64) (morpc.MessageCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", cacheID)
	ret0, _ := ret[0].(morpc.MessageCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockClientSessionMockRecorder) GetCache(cacheID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockClientSession)(nil).GetCache), cacheID)
}

// RemoteAddress mocks base method.
func (m *MockClientSession) RemoteAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteAddress indicates an expected call of RemoteAddress.
func (mr *MockClientSessionMockRecorder) RemoteAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddress", reflect.TypeOf((*MockClientSession)(nil).RemoteAddress))
}

// SessionCtx mocks base method.
func (m *MockClientSession) SessionCtx() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionCtx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SessionCtx indicates an expected call of SessionCtx.
func (mr *MockClientSessionMockRecorder) SessionCtx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionCtx", reflect.TypeOf((*MockClientSession)(nil).SessionCtx))
}

// Write mocks base method.
func (m *MockClientSession) Write(ctx context.Context, response morpc.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockClientSessionMockRecorder) Write(ctx, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClientSession)(nil).Write), ctx, response)
}

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close(closeConn bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", closeConn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close(closeConn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close), closeConn)
}

// ID mocks base method.
func (m *MockStream) ID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockStreamMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockStream)(nil).ID))
}

// Receive mocks base method.
func (m *MockStream) Receive() (chan morpc.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(chan morpc.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockStreamMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockStream)(nil).Receive))
}

// Send mocks base method.
func (m *MockStream) Send(ctx context.Context, request morpc.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamMockRecorder) Send(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStream)(nil).Send), ctx, request)
}
